
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  0800dfe8  0800dfe8  0001dfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e374  0800e374  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800e374  0800e374  0001e374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e37c  0800e37c  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e37c  0800e37c  0001e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e380  0800e380  0001e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800e384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be4  20000218  0800e59c  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dfc  0800e59c  00020dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bc9e  00000000  00000000  0002028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004946  00000000  00000000  0003bf29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  00040870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012b1  00000000  00000000  000420c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b066  00000000  00000000  00043379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ff3a  00000000  00000000  0005e3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098f85  00000000  00000000  0007e319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000075a0  00000000  00000000  001172a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011e840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dfcc 	.word	0x0800dfcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	0800dfcc 	.word	0x0800dfcc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a8b      	ldr	r2, [pc, #556]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b89      	ldr	r3, [pc, #548]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a84      	ldr	r2, [pc, #528]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b82      	ldr	r3, [pc, #520]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b7e      	ldr	r3, [pc, #504]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a7d      	ldr	r2, [pc, #500]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b7b      	ldr	r3, [pc, #492]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b77      	ldr	r3, [pc, #476]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a76      	ldr	r2, [pc, #472]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b74      	ldr	r3, [pc, #464]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b70      	ldr	r3, [pc, #448]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a6f      	ldr	r2, [pc, #444]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b6d      	ldr	r3, [pc, #436]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b69      	ldr	r3, [pc, #420]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a68      	ldr	r2, [pc, #416]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b66      	ldr	r3, [pc, #408]	; (8001100 <MX_GPIO_Init+0x24c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8000f78:	4862      	ldr	r0, [pc, #392]	; (8001104 <MX_GPIO_Init+0x250>)
 8000f7a:	f001 fe21 	bl	8002bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	4861      	ldr	r0, [pc, #388]	; (8001108 <MX_GPIO_Init+0x254>)
 8000f84:	f001 fe1c 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	210c      	movs	r1, #12
 8000f8c:	485f      	ldr	r0, [pc, #380]	; (800110c <MX_GPIO_Init+0x258>)
 8000f8e:	f001 fe17 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f24e 0101 	movw	r1, #57345	; 0xe001
 8000f98:	485d      	ldr	r0, [pc, #372]	; (8001110 <MX_GPIO_Init+0x25c>)
 8000f9a:	f001 fe11 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f24f 011f 	movw	r1, #61471	; 0xf01f
 8000fa4:	485b      	ldr	r0, [pc, #364]	; (8001114 <MX_GPIO_Init+0x260>)
 8000fa6:	f001 fe0b 	bl	8002bc0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000faa:	2304      	movs	r3, #4
 8000fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4851      	ldr	r0, [pc, #324]	; (8001104 <MX_GPIO_Init+0x250>)
 8000fbe:	f001 fc63 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PE7 PE8 PE9
                           PE10 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000fc2:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	484a      	ldr	r0, [pc, #296]	; (8001104 <MX_GPIO_Init+0x250>)
 8000fdc:	f001 fc54 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000fe0:	2332      	movs	r3, #50	; 0x32
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4843      	ldr	r0, [pc, #268]	; (8001104 <MX_GPIO_Init+0x250>)
 8000ff6:	f001 fc47 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	483d      	ldr	r0, [pc, #244]	; (8001108 <MX_GPIO_Init+0x254>)
 8001012:	f001 fc39 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001016:	2301      	movs	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800101a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	4838      	ldr	r0, [pc, #224]	; (800110c <MX_GPIO_Init+0x258>)
 800102c:	f001 fc2c 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001030:	230c      	movs	r3, #12
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4619      	mov	r1, r3
 8001046:	4831      	ldr	r0, [pc, #196]	; (800110c <MX_GPIO_Init+0x258>)
 8001048:	f001 fc1e 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800104c:	f24e 0301 	movw	r3, #57345	; 0xe001
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	482a      	ldr	r0, [pc, #168]	; (8001110 <MX_GPIO_Init+0x25c>)
 8001066:	f001 fc0f 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001070:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <MX_GPIO_Init+0x260>)
 8001082:	f001 fc01 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001086:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800108a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <MX_GPIO_Init+0x260>)
 800109e:	f001 fbf3 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PD0 PD1 PD2 PD3
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010a2:	f24f 031f 	movw	r3, #61471	; 0xf01f
 80010a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	4619      	mov	r1, r3
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <MX_GPIO_Init+0x260>)
 80010bc:	f001 fbe4 	bl	8002888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010c0:	2320      	movs	r3, #32
 80010c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <MX_GPIO_Init+0x260>)
 80010d4:	f001 fbd8 	bl	8002888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2017      	movs	r0, #23
 80010de:	f001 fb9c 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e2:	2017      	movs	r0, #23
 80010e4:	f001 fbb5 	bl	8002852 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f001 fb94 	bl	800281a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fbad 	bl	8002852 <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40021000 	.word	0x40021000
 8001108:	40020800 	.word	0x40020800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020c00 	.word	0x40020c00

08001118 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_I2C1_Init+0x50>)
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <MX_I2C1_Init+0x54>)
 8001120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_I2C1_Init+0x50>)
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_I2C1_Init+0x58>)
 8001126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_I2C1_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_I2C1_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_I2C1_Init+0x50>)
 8001136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_I2C1_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_I2C1_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_I2C1_Init+0x50>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_I2C1_Init+0x50>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_I2C1_Init+0x50>)
 8001156:	f003 fe7f 	bl	8004e58 <HAL_I2C_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001160:	f000 feba 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000234 	.word	0x20000234
 800116c:	40005400 	.word	0x40005400
 8001170:	000186a0 	.word	0x000186a0

08001174 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C3_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_I2C3_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C3_Init+0x50>)
 8001180:	4a12      	ldr	r2, [pc, #72]	; (80011cc <MX_I2C3_Init+0x58>)
 8001182:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C3_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_I2C3_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_I2C3_Init+0x50>)
 8001192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001196:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <MX_I2C3_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_I2C3_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <MX_I2C3_Init+0x50>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_I2C3_Init+0x50>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <MX_I2C3_Init+0x50>)
 80011b2:	f003 fe51 	bl	8004e58 <HAL_I2C_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011bc:	f000 fe8c 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000288 	.word	0x20000288
 80011c8:	40005c00 	.word	0x40005c00
 80011cc:	000186a0 	.word	0x000186a0

080011d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a42      	ldr	r2, [pc, #264]	; (80012f8 <HAL_I2C_MspInit+0x128>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d12d      	bne.n	800124e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a40      	ldr	r2, [pc, #256]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800120e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001214:	2312      	movs	r3, #18
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001220:	2304      	movs	r3, #4
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	4835      	ldr	r0, [pc, #212]	; (8001300 <HAL_I2C_MspInit+0x130>)
 800122c:	f001 fb2c 	bl	8002888 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	4a30      	ldr	r2, [pc, #192]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 800123a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800123e:	6413      	str	r3, [r2, #64]	; 0x40
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800124c:	e050      	b.n	80012f0 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <HAL_I2C_MspInit+0x134>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d14b      	bne.n	80012f0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	4a26      	ldr	r2, [pc, #152]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 8001262:	f043 0304 	orr.w	r3, r3, #4
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	; 0x30
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001296:	2312      	movs	r3, #18
 8001298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012a2:	2304      	movs	r3, #4
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 031c 	add.w	r3, r7, #28
 80012aa:	4619      	mov	r1, r3
 80012ac:	4816      	ldr	r0, [pc, #88]	; (8001308 <HAL_I2C_MspInit+0x138>)
 80012ae:	f001 faeb 	bl	8002888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012c4:	2304      	movs	r3, #4
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	480f      	ldr	r0, [pc, #60]	; (800130c <HAL_I2C_MspInit+0x13c>)
 80012d0:	f001 fada 	bl	8002888 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 80012de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_I2C_MspInit+0x12c>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
}
 80012f0:	bf00      	nop
 80012f2:	3730      	adds	r7, #48	; 0x30
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020400 	.word	0x40020400
 8001304:	40005c00 	.word	0x40005c00
 8001308:	40020800 	.word	0x40020800
 800130c:	40020000 	.word	0x40020000

08001310 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2S2_Init+0x50>)
 8001316:	4a13      	ldr	r2, [pc, #76]	; (8001364 <MX_I2S2_Init+0x54>)
 8001318:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_I2S2_Init+0x50>)
 800131c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001320:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_I2S2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_I2S2_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_I2S2_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_I2S2_Init+0x50>)
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <MX_I2S2_Init+0x58>)
 8001338:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2S2_Init+0x50>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_I2S2_Init+0x50>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2S2_Init+0x50>)
 8001348:	2201      	movs	r2, #1
 800134a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_I2S2_Init+0x50>)
 800134e:	f004 fda7 	bl	8005ea0 <HAL_I2S_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8001358:	f000 fdbe 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200002dc 	.word	0x200002dc
 8001364:	40003800 	.word	0x40003800
 8001368:	00017700 	.word	0x00017700

0800136c <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <MX_I2S3_Init+0x58>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <MX_I2S3_Init+0x54>)
 800138c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001390:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_I2S3_Init+0x54>)
 8001394:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <MX_I2S3_Init+0x5c>)
 8001396:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_I2S3_Init+0x54>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_I2S3_Init+0x54>)
 80013ac:	f004 fd78 	bl	8005ea0 <HAL_I2S_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80013b6:	f000 fd8f 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000324 	.word	0x20000324
 80013c4:	40003c00 	.word	0x40003c00
 80013c8:	00017700 	.word	0x00017700

080013cc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	; 0x38
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a59      	ldr	r2, [pc, #356]	; (8001550 <HAL_I2S_MspInit+0x184>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d15b      	bne.n	80014a6 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a57      	ldr	r2, [pc, #348]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <HAL_I2S_MspInit+0x188>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001406:	623b      	str	r3, [r7, #32]
 8001408:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	61fb      	str	r3, [r7, #28]
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_I2S_MspInit+0x188>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_I2S_MspInit+0x188>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b4e      	ldr	r3, [pc, #312]	; (8001554 <HAL_I2S_MspInit+0x188>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	4b4a      	ldr	r3, [pc, #296]	; (8001554 <HAL_I2S_MspInit+0x188>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a49      	ldr	r2, [pc, #292]	; (8001554 <HAL_I2S_MspInit+0x188>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_I2S_MspInit+0x188>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001442:	2304      	movs	r3, #4
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001452:	2306      	movs	r3, #6
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	483e      	ldr	r0, [pc, #248]	; (8001558 <HAL_I2S_MspInit+0x18c>)
 800145e:	f001 fa13 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001462:	2308      	movs	r3, #8
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001472:	2305      	movs	r3, #5
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4836      	ldr	r0, [pc, #216]	; (8001558 <HAL_I2S_MspInit+0x18c>)
 800147e:	f001 fa03 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001482:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001494:	2305      	movs	r3, #5
 8001496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149c:	4619      	mov	r1, r3
 800149e:	482f      	ldr	r0, [pc, #188]	; (800155c <HAL_I2S_MspInit+0x190>)
 80014a0:	f001 f9f2 	bl	8002888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014a4:	e04f      	b.n	8001546 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a2d      	ldr	r2, [pc, #180]	; (8001560 <HAL_I2S_MspInit+0x194>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d14a      	bne.n	8001546 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a26      	ldr	r2, [pc, #152]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_I2S_MspInit+0x188>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001504:	2310      	movs	r3, #16
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001514:	2306      	movs	r3, #6
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <HAL_I2S_MspInit+0x198>)
 8001520:	f001 f9b2 	bl	8002888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001524:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001536:	2306      	movs	r3, #6
 8001538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_I2S_MspInit+0x18c>)
 8001542:	f001 f9a1 	bl	8002888 <HAL_GPIO_Init>
}
 8001546:	bf00      	nop
 8001548:	3738      	adds	r7, #56	; 0x38
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40003800 	.word	0x40003800
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020400 	.word	0x40020400
 8001560:	40003c00 	.word	0x40003c00
 8001564:	40020000 	.word	0x40020000

08001568 <decimal_to_binary>:
/* USER CODE BEGIN 0 */
//LCD5110_display lcd1; //Define LCD_DISPLAY

//convert decimal to bin to control lamp
void decimal_to_binary(int number, int *binary_value)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
	int temp = number;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 4; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	e012      	b.n	80015a2 <decimal_to_binary+0x3a>
	{
		binary_value[i] = temp % 2;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	441a      	add	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	bfb8      	it	lt
 800158e:	425b      	neglt	r3, r3
 8001590:	6013      	str	r3, [r2, #0]
		temp = temp / 2;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0fda      	lsrs	r2, r3, #31
 8001596:	4413      	add	r3, r2
 8001598:	105b      	asrs	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < 4; i++)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3301      	adds	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	dde9      	ble.n	800157c <decimal_to_binary+0x14>
	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <decToBcd>:
//***********************DS3231-RTC MODULE***********************
#define DS3231_ADDRESS 0xD0 //define DS3231

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <decToBcd+0x48>)
 80015c4:	fb82 1203 	smull	r1, r2, r2, r3
 80015c8:	1092      	asrs	r2, r2, #2
 80015ca:	17db      	asrs	r3, r3, #31
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	b2d8      	uxtb	r0, r3
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <decToBcd+0x48>)
 80015d8:	fb83 1302 	smull	r1, r3, r3, r2
 80015dc:	1099      	asrs	r1, r3, #2
 80015de:	17d3      	asrs	r3, r2, #31
 80015e0:	1ac9      	subs	r1, r1, r3
 80015e2:	460b      	mov	r3, r1
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	1ad1      	subs	r1, r2, r3
 80015ec:	b2cb      	uxtb	r3, r1
 80015ee:	4403      	add	r3, r0
 80015f0:	b2db      	uxtb	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	66666667 	.word	0x66666667

08001604 <bcdToDec>:


// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	461a      	mov	r2, r3
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	4413      	add	r3, r2
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <Set_Time>:
}	TIME;
TIME time;


void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af04      	add	r7, sp, #16
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	4603      	mov	r3, r0
 8001648:	71bb      	strb	r3, [r7, #6]
 800164a:	460b      	mov	r3, r1
 800164c:	717b      	strb	r3, [r7, #5]
 800164e:	4613      	mov	r3, r2
 8001650:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ffaf 	bl	80015b8 <decToBcd>
 800165a:	4603      	mov	r3, r0
 800165c:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 800165e:	79bb      	ldrb	r3, [r7, #6]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ffa9 	bl	80015b8 <decToBcd>
 8001666:	4603      	mov	r3, r0
 8001668:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffa3 	bl	80015b8 <decToBcd>
 8001672:	4603      	mov	r3, r0
 8001674:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(dow);
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff9d 	bl	80015b8 <decToBcd>
 800167e:	4603      	mov	r3, r0
 8001680:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(dom);
 8001682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff96 	bl	80015b8 <decToBcd>
 800168c:	4603      	mov	r3, r0
 800168e:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8001690:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff8f 	bl	80015b8 <decToBcd>
 800169a:	4603      	mov	r3, r0
 800169c:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 800169e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff ff88 	bl	80015b8 <decToBcd>
 80016a8:	4603      	mov	r3, r0
 80016aa:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
 80016ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b0:	9302      	str	r3, [sp, #8]
 80016b2:	2307      	movs	r3, #7
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	2200      	movs	r2, #0
 80016c0:	21d0      	movs	r1, #208	; 0xd0
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <Set_Time+0x9c>)
 80016c4:	f003 fd0c 	bl	80050e0 <HAL_I2C_Mem_Write>
}
 80016c8:	bf00      	nop
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	20000288 	.word	0x20000288

080016d4 <Get_Time>:

void Get_Time (void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2307      	movs	r3, #7
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	463b      	mov	r3, r7
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	2200      	movs	r2, #0
 80016ec:	21d0      	movs	r1, #208	; 0xd0
 80016ee:	481f      	ldr	r0, [pc, #124]	; (800176c <Get_Time+0x98>)
 80016f0:	f003 fdf0 	bl	80052d4 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80016f4:	783b      	ldrb	r3, [r7, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff84 	bl	8001604 <bcdToDec>
 80016fc:	4603      	mov	r3, r0
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <Get_Time+0x9c>)
 8001702:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff7c 	bl	8001604 <bcdToDec>
 800170c:	4603      	mov	r3, r0
 800170e:	b2da      	uxtb	r2, r3
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <Get_Time+0x9c>)
 8001712:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8001714:	78bb      	ldrb	r3, [r7, #2]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ff74 	bl	8001604 <bcdToDec>
 800171c:	4603      	mov	r3, r0
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <Get_Time+0x9c>)
 8001722:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff6c 	bl	8001604 <bcdToDec>
 800172c:	4603      	mov	r3, r0
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <Get_Time+0x9c>)
 8001732:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8001734:	793b      	ldrb	r3, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff64 	bl	8001604 <bcdToDec>
 800173c:	4603      	mov	r3, r0
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <Get_Time+0x9c>)
 8001742:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ff5c 	bl	8001604 <bcdToDec>
 800174c:	4603      	mov	r3, r0
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <Get_Time+0x9c>)
 8001752:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff54 	bl	8001604 <bcdToDec>
 800175c:	4603      	mov	r3, r0
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <Get_Time+0x9c>)
 8001762:	719a      	strb	r2, [r3, #6]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000288 	.word	0x20000288
 8001770:	200003b4 	.word	0x200003b4

08001774 <shift_out>:
  0x38,// L - 10
  0x76 // H - 11
};

void shift_out(GPIO_TypeDef* port, int CLK_PIN,
    int DIO_PIN, bool dir, uint8_t command){
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 8; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	e039      	b.n	80017fc <shift_out+0x88>
    {
        bool output = false;
 8001788:	2300      	movs	r3, #0
 800178a:	74fb      	strb	r3, [r7, #19]
        if (dir)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00e      	beq.n	80017b0 <shift_out+0x3c>
        {
            output = command & 0b10000000;
 8001792:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	74fb      	strb	r3, [r7, #19]
            command = command << 1;
 80017a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	f887 3020 	strb.w	r3, [r7, #32]
 80017ae:	e00d      	b.n	80017cc <shift_out+0x58>
        }
        else
        {
            output = command & 0b00000001;
 80017b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	74fb      	strb	r3, [r7, #19]
            command = command >> 1;
 80017c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	f887 3020 	strb.w	r3, [r7, #32]
        }
        HAL_GPIO_WritePin(port, DIO_PIN, output);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	7cfa      	ldrb	r2, [r7, #19]
 80017d2:	4619      	mov	r1, r3
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f001 f9f3 	bl	8002bc0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(port, CLK_PIN, 1);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	2201      	movs	r2, #1
 80017e0:	4619      	mov	r1, r3
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f001 f9ec 	bl	8002bc0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(port, CLK_PIN, 0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	2200      	movs	r2, #0
 80017ee:	4619      	mov	r1, r3
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f001 f9e5 	bl	8002bc0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	ddc2      	ble.n	8001788 <shift_out+0x14>
    }
  }
 8001802:	bf00      	nop
 8001804:	bf00      	nop
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <send_command>:


  void send_command(uint8_t bt){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af02      	add	r7, sp, #8
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(port, STB_PIN, 0);
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <send_command+0x4c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <send_command+0x50>)
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	b291      	uxth	r1, r2
 8001820:	2200      	movs	r2, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f9cc 	bl	8002bc0 <HAL_GPIO_WritePin>
    shift_out(port, CLK_PIN,  DIO_PIN, false, bt);
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <send_command+0x4c>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <send_command+0x54>)
 800182e:	6819      	ldr	r1, [r3, #0]
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <send_command+0x58>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	f7ff ff9b 	bl	8001774 <shift_out>
    HAL_GPIO_WritePin(port, STB_PIN, 1);
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <send_command+0x4c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <send_command+0x50>)
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	b291      	uxth	r1, r2
 8001848:	2201      	movs	r2, #1
 800184a:	4618      	mov	r0, r3
 800184c:	f001 f9b8 	bl	8002bc0 <HAL_GPIO_WritePin>
  }
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000014 	.word	0x20000014
 800185c:	20000020 	.word	0x20000020
 8001860:	20000018 	.word	0x20000018
 8001864:	2000001c 	.word	0x2000001c

08001868 <send_args>:

  void send_args(uint8_t bt){
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af02      	add	r7, sp, #8
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    shift_out(port, CLK_PIN,  DIO_PIN, false, bt);
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <send_args+0x28>)
 8001874:	6818      	ldr	r0, [r3, #0]
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <send_args+0x2c>)
 8001878:	6819      	ldr	r1, [r3, #0]
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <send_args+0x30>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	f7ff ff76 	bl	8001774 <shift_out>
  }
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000014 	.word	0x20000014
 8001894:	20000018 	.word	0x20000018
 8001898:	2000001c 	.word	0x2000001c

0800189c <reset_TM>:

  void reset_TM(){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
    send_command(0x40);
 80018a2:	2040      	movs	r0, #64	; 0x40
 80018a4:	f7ff ffb2 	bl	800180c <send_command>
    HAL_GPIO_WritePin(port, STB_PIN, 0);
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <reset_TM+0x58>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <reset_TM+0x5c>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	b291      	uxth	r1, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f001 f983 	bl	8002bc0 <HAL_GPIO_WritePin>
    send_args(0xc0);
 80018ba:	20c0      	movs	r0, #192	; 0xc0
 80018bc:	f7ff ffd4 	bl	8001868 <send_args>
    for (uint8_t i = 0; i < 16; i++){
 80018c0:	2300      	movs	r3, #0
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	e005      	b.n	80018d2 <reset_TM+0x36>
         send_args(0x00);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ffce 	bl	8001868 <send_args>
    for (uint8_t i = 0; i < 16; i++){
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	3301      	adds	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	d9f6      	bls.n	80018c6 <reset_TM+0x2a>
       }
    HAL_GPIO_WritePin(port, STB_PIN, 1);
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <reset_TM+0x58>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <reset_TM+0x5c>)
 80018de:	6812      	ldr	r2, [r2, #0]
 80018e0:	b291      	uxth	r1, r2
 80018e2:	2201      	movs	r2, #1
 80018e4:	4618      	mov	r0, r3
 80018e6:	f001 f96b 	bl	8002bc0 <HAL_GPIO_WritePin>
  }
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000014 	.word	0x20000014
 80018f8:	20000020 	.word	0x20000020

080018fc <print_zero>:

  void print_zero(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
	  send_command(0x40);
 8001902:	2040      	movs	r0, #64	; 0x40
 8001904:	f7ff ff82 	bl	800180c <send_command>
	  HAL_GPIO_WritePin(port, STB_PIN, 0);
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <print_zero+0x54>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <print_zero+0x58>)
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	b291      	uxth	r1, r2
 8001912:	2200      	movs	r2, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f001 f953 	bl	8002bc0 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 8; i++)
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	e006      	b.n	800192e <print_zero+0x32>
	  {
		  send_args(SegmCodes[0]);
 8001920:	233f      	movs	r3, #63	; 0x3f
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ffa0 	bl	8001868 <send_args>
	  for(int i = 0; i < 8; i++)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3301      	adds	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b07      	cmp	r3, #7
 8001932:	ddf5      	ble.n	8001920 <print_zero+0x24>
	  }
	  HAL_GPIO_WritePin(port, STB_PIN, 1);
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <print_zero+0x54>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <print_zero+0x58>)
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	b291      	uxth	r1, r2
 800193e:	2201      	movs	r2, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f001 f93d 	bl	8002bc0 <HAL_GPIO_WritePin>
  }
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000014 	.word	0x20000014
 8001954:	20000020 	.word	0x20000020

08001958 <print_ones>:

  void print_ones(){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
	  send_command(0x40);
 800195e:	2040      	movs	r0, #64	; 0x40
 8001960:	f7ff ff54 	bl	800180c <send_command>
	  HAL_GPIO_WritePin(port, STB_PIN, 0);
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <print_ones+0x54>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <print_ones+0x58>)
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	b291      	uxth	r1, r2
 800196e:	2200      	movs	r2, #0
 8001970:	4618      	mov	r0, r3
 8001972:	f001 f925 	bl	8002bc0 <HAL_GPIO_WritePin>
	  for(int i = 0; i < 8; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	e006      	b.n	800198a <print_ones+0x32>
	  {
		  send_args(SegmCodes[1]);
 800197c:	2306      	movs	r3, #6
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff72 	bl	8001868 <send_args>
	  for(int i = 0; i < 8; i++)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b07      	cmp	r3, #7
 800198e:	ddf5      	ble.n	800197c <print_ones+0x24>
	  }
	  HAL_GPIO_WritePin(port, STB_PIN, 1);
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <print_ones+0x54>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a06      	ldr	r2, [pc, #24]	; (80019b0 <print_ones+0x58>)
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	b291      	uxth	r1, r2
 800199a:	2201      	movs	r2, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f001 f90f 	bl	8002bc0 <HAL_GPIO_WritePin>
  }
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000014 	.word	0x20000014
 80019b0:	20000020 	.word	0x20000020

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08c      	sub	sp, #48	; 0x30
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 fdbd 	bl	8002538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f929 	bl	8001c14 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019c2:	f000 f98f 	bl	8001ce4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f7ff fa75 	bl	8000eb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80019ca:	f7ff fba5 	bl	8001118 <MX_I2C1_Init>
  MX_I2S2_Init();
 80019ce:	f7ff fc9f 	bl	8001310 <MX_I2S2_Init>
  MX_I2S3_Init();
 80019d2:	f7ff fccb 	bl	800136c <MX_I2S3_Init>
  MX_SPI1_Init();
 80019d6:	f000 fa85 	bl	8001ee4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80019da:	f009 fb27 	bl	800b02c <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80019de:	f7ff fbc9 	bl	8001174 <MX_I2C3_Init>
  MX_TIM10_Init();
 80019e2:	f000 fcf9 	bl	80023d8 <MX_TIM10_Init>
  MX_TIM1_Init();
 80019e6:	f000 fc5b 	bl	80022a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019ea:	f000 fca9 	bl	8002340 <MX_TIM2_Init>
//  lcd1.hw_conf.dc_port = GPIOA;
//  lcd1.def_scr = lcd5110_def_scr;
//  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);

  //START DISPLAY
  HAL_TIM_Base_Start_IT(&htim2);
 80019ee:	487d      	ldr	r0, [pc, #500]	; (8001be4 <main+0x230>)
 80019f0:	f005 fda4 	bl	800753c <HAL_TIM_Base_Start_IT>
  send_command(0x8a);
 80019f4:	208a      	movs	r0, #138	; 0x8a
 80019f6:	f7ff ff09 	bl	800180c <send_command>
  reset_TM();
 80019fa:	f7ff ff4f 	bl	800189c <reset_TM>
  while (1)
  {
//	  char buffer[20];


	  if (state == WORKING)
 80019fe:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <main+0x234>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d174      	bne.n	8001af2 <main+0x13e>
	  {
	//	  sprintf(buffer, "TIME: %02d:%02d:%02d\n", time.hour, time.minutes, time.seconds);
	//	  LCD5110_print(buffer, BLACK, &lcd1);
		  Get_Time();
 8001a08:	f7ff fe64 	bl	80016d4 <Get_Time>
		  int time_units[] = {time.hour / 10, time.hour % 10, time.minutes / 10, time.minutes % 10}; //take time from rtc module
 8001a0c:	4b77      	ldr	r3, [pc, #476]	; (8001bec <main+0x238>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <main+0x23c>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <main+0x238>)
 8001a1e:	789a      	ldrb	r2, [r3, #2]
 8001a20:	4b73      	ldr	r3, [pc, #460]	; (8001bf0 <main+0x23c>)
 8001a22:	fba3 1302 	umull	r1, r3, r3, r2
 8001a26:	08d9      	lsrs	r1, r3, #3
 8001a28:	460b      	mov	r3, r1
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	4b6d      	ldr	r3, [pc, #436]	; (8001bec <main+0x238>)
 8001a38:	785b      	ldrb	r3, [r3, #1]
 8001a3a:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <main+0x23c>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <main+0x238>)
 8001a48:	785a      	ldrb	r2, [r3, #1]
 8001a4a:	4b69      	ldr	r3, [pc, #420]	; (8001bf0 <main+0x23c>)
 8001a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a50:	08d9      	lsrs	r1, r3, #3
 8001a52:	460b      	mov	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	61fb      	str	r3, [r7, #28]
		  for (int i = 0; i < 4; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a64:	e041      	b.n	8001aea <main+0x136>
		  {
			  decimal_to_binary(time_units[i], controls[i]);
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	3330      	adds	r3, #48	; 0x30
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	495f      	ldr	r1, [pc, #380]	; (8001bf4 <main+0x240>)
 8001a78:	440b      	add	r3, r1
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f7ff fd73 	bl	8001568 <decimal_to_binary>
			  for(int j = 0; j < 4; j++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a86:	e012      	b.n	8001aae <main+0xfa>
			  {
				  HAL_GPIO_WritePin(GPIOE, pins_controls[j], controls[i][j]);
 8001a88:	4a5b      	ldr	r2, [pc, #364]	; (8001bf8 <main+0x244>)
 8001a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a90:	4858      	ldr	r0, [pc, #352]	; (8001bf4 <main+0x240>)
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	009a      	lsls	r2, r3, #2
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	4413      	add	r3, r2
 8001a9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4856      	ldr	r0, [pc, #344]	; (8001bfc <main+0x248>)
 8001aa4:	f001 f88c 	bl	8002bc0 <HAL_GPIO_WritePin>
			  for(int j = 0; j < 4; j++)
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	3301      	adds	r3, #1
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	dde9      	ble.n	8001a88 <main+0xd4>
			  }
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 1);
 8001ab4:	4a52      	ldr	r2, [pc, #328]	; (8001c00 <main+0x24c>)
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4850      	ldr	r0, [pc, #320]	; (8001c04 <main+0x250>)
 8001ac2:	f001 f87d 	bl	8002bc0 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 fda8 	bl	800261c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 0);
 8001acc:	4a4c      	ldr	r2, [pc, #304]	; (8001c00 <main+0x24c>)
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	484a      	ldr	r0, [pc, #296]	; (8001c04 <main+0x250>)
 8001ada:	f001 f871 	bl	8002bc0 <HAL_GPIO_WritePin>
			  HAL_Delay(0.1);
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f000 fd9c 	bl	800261c <HAL_Delay>
		  for (int i = 0; i < 4; i++)
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	ddba      	ble.n	8001a66 <main+0xb2>
 8001af0:	e075      	b.n	8001bde <main+0x22a>
		  }

	  }
	  else
	  {
		  int time_units[] = {HOUR / 10, HOUR % 10, MINUTE / 10, MINUTE % 10}; //take time from setting
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <main+0x254>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <main+0x258>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1092      	asrs	r2, r2, #2
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <main+0x254>)
 8001b06:	6819      	ldr	r1, [r3, #0]
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <main+0x258>)
 8001b0a:	fb83 2301 	smull	r2, r3, r3, r1
 8001b0e:	109a      	asrs	r2, r3, #2
 8001b10:	17cb      	asrs	r3, r1, #31
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	1aca      	subs	r2, r1, r3
 8001b1e:	607a      	str	r2, [r7, #4]
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <main+0x25c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <main+0x258>)
 8001b26:	fb82 1203 	smull	r1, r2, r2, r3
 8001b2a:	1092      	asrs	r2, r2, #2
 8001b2c:	17db      	asrs	r3, r3, #31
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b37      	ldr	r3, [pc, #220]	; (8001c10 <main+0x25c>)
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <main+0x258>)
 8001b38:	fb83 2301 	smull	r2, r3, r3, r1
 8001b3c:	109a      	asrs	r2, r3, #2
 8001b3e:	17cb      	asrs	r3, r1, #31
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	1aca      	subs	r2, r1, r3
 8001b4c:	60fa      	str	r2, [r7, #12]
//		  LCD5110_print("SETTING\n", BLACK, &lcd1);
//		  sprintf(buffer, "HOUR: %02d\nMINUTE: %02d\n", HOUR, MINUTE);
//		  LCD5110_print(buffer, BLACK, &lcd1);
		  for (int i = 0; i < 4; i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
 8001b52:	e041      	b.n	8001bd8 <main+0x224>
		  	  {
			  decimal_to_binary(time_units[i], controls[i]);
 8001b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	3330      	adds	r3, #48	; 0x30
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f853 2c30 	ldr.w	r2, [r3, #-48]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <main+0x240>)
 8001b66:	440b      	add	r3, r1
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff fcfc 	bl	8001568 <decimal_to_binary>
			  for(int j = 0; j < 4; j++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	e012      	b.n	8001b9c <main+0x1e8>
			  	  {
				  HAL_GPIO_WritePin(GPIOE, pins_controls[j], controls[i][j]);
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <main+0x244>)
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001b7e:	481d      	ldr	r0, [pc, #116]	; (8001bf4 <main+0x240>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	009a      	lsls	r2, r3, #2
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	4413      	add	r3, r2
 8001b88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	481a      	ldr	r0, [pc, #104]	; (8001bfc <main+0x248>)
 8001b92:	f001 f815 	bl	8002bc0 <HAL_GPIO_WritePin>
			  for(int j = 0; j < 4; j++)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	dde9      	ble.n	8001b76 <main+0x1c2>
			  	  }
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 1);
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <main+0x24c>)
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001baa:	2201      	movs	r2, #1
 8001bac:	4619      	mov	r1, r3
 8001bae:	4815      	ldr	r0, [pc, #84]	; (8001c04 <main+0x250>)
 8001bb0:	f001 f806 	bl	8002bc0 <HAL_GPIO_WritePin>
			  HAL_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f000 fd31 	bl	800261c <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOD, pins_lamps[i], 0);
 8001bba:	4a11      	ldr	r2, [pc, #68]	; (8001c00 <main+0x24c>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480f      	ldr	r0, [pc, #60]	; (8001c04 <main+0x250>)
 8001bc8:	f000 fffa 	bl	8002bc0 <HAL_GPIO_WritePin>
			  HAL_Delay(0.1);
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f000 fd25 	bl	800261c <HAL_Delay>
		  for (int i = 0; i < 4; i++)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	ddba      	ble.n	8001b54 <main+0x1a0>
		  	  }
	  }
//	  LCD5110_refresh(&lcd1.hw_conf);
//	  LCD5110_clear_scr(&lcd1.hw_conf);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001bde:	f009 fa4b 	bl	800b078 <MX_USB_HOST_Process>
	  if (state == WORKING)
 8001be2:	e70c      	b.n	80019fe <main+0x4a>
 8001be4:	20000460 	.word	0x20000460
 8001be8:	20000011 	.word	0x20000011
 8001bec:	200003b4 	.word	0x200003b4
 8001bf0:	cccccccd 	.word	0xcccccccd
 8001bf4:	2000036c 	.word	0x2000036c
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	200003b0 	.word	0x200003b0
 8001c0c:	66666667 	.word	0x66666667
 8001c10:	200003ac 	.word	0x200003ac

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b094      	sub	sp, #80	; 0x50
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	2230      	movs	r2, #48	; 0x30
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00a faf0 	bl	800c208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <SystemClock_Config+0xc8>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <SystemClock_Config+0xc8>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <SystemClock_Config+0xc8>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c84:	2304      	movs	r3, #4
 8001c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001c88:	23c0      	movs	r3, #192	; 0xc0
 8001c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c90:	2308      	movs	r3, #8
 8001c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fda1 	bl	80067e0 <HAL_RCC_OscConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ca4:	f000 f918 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f005 f803 	bl	8006cd0 <HAL_RCC_ClockConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cd0:	f000 f902 	bl	8001ed8 <Error_Handler>
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	3750      	adds	r7, #80	; 0x50
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40007000 	.word	0x40007000

08001ce4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001cfe:	23c8      	movs	r3, #200	; 0xc8
 8001d00:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001d02:	2305      	movs	r3, #5
 8001d04:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f005 f9eb 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001d18:	f000 f8de 	bl	8001ed8 <Error_Handler>
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//*****************SETTING*************//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_9) && state_ex == true){
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d34:	d113      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0x3a>
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x44>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00f      	beq.n	8001d5e <HAL_GPIO_EXTI_Callback+0x3a>
		HAL_TIM_Base_Start_IT(&htim10);
 8001d3e:	480b      	ldr	r0, [pc, #44]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x48>)
 8001d40:	f005 fbfc 	bl	800753c <HAL_TIM_Base_Start_IT>
		state_ex = false;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x44>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
		MINUTE = time.minutes;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x50>)
 8001d52:	601a      	str	r2, [r3, #0]
		HOUR = time.hour;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001d56:	789b      	ldrb	r3, [r3, #2]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b07      	ldr	r3, [pc, #28]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x54>)
 8001d5c:	601a      	str	r2, [r3, #0]
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	200004a8 	.word	0x200004a8
 8001d70:	200003b4 	.word	0x200003b4
 8001d74:	200003ac 	.word	0x200003ac
 8001d78:	200003b0 	.word	0x200003b0

08001d7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	6078      	str	r0, [r7, #4]
	//PRINT 1 or 0 on TM1638
	if (htim == &htim2){
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a4a      	ldr	r2, [pc, #296]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d109      	bne.n	8001da0 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (state == WORKING)
 8001d8c:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d102      	bne.n	8001d9c <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			print_ones();
 8001d96:	f7ff fddf 	bl	8001958 <print_ones>
 8001d9a:	e001      	b.n	8001da0 <HAL_TIM_PeriodElapsedCallback+0x24>
		}
		else
		{
			print_zero();
 8001d9c:	f7ff fdae 	bl	80018fc <print_zero>
		}
	}
	//SET MINUTE AND HOUR
	if (htim == &htim10)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a45      	ldr	r2, [pc, #276]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d17f      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9) == GPIO_PIN_SET)
 8001da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dac:	4843      	ldr	r0, [pc, #268]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001dae:	f000 feef 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d133      	bne.n	8001e20 <HAL_TIM_PeriodElapsedCallback+0xa4>
			{
			 if (state == WORKING){
 8001db8:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d10d      	bne.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x62>
			 MINUTE = time.minutes;
 8001dc2:	4b3f      	ldr	r3, [pc, #252]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dc4:	785b      	ldrb	r3, [r3, #1]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001dca:	601a      	str	r2, [r3, #0]
			 HOUR = time.hour;
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dce:	789b      	ldrb	r3, [r3, #2]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001dd4:	601a      	str	r2, [r3, #0]
			 state = SETTING;
 8001dd6:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
				 HOUR = HOUR % 24;
				 }
			}
	}

}
 8001ddc:	e064      	b.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
				 Set_Time(00, MINUTE, HOUR, time.dayofweek, time.dayofmonth, time.month, time.year);
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	b2d8      	uxtb	r0, r3
 8001de4:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b2dc      	uxtb	r4, r3
 8001dea:	4b35      	ldr	r3, [pc, #212]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001dec:	78dd      	ldrb	r5, [r3, #3]
 8001dee:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001df0:	791b      	ldrb	r3, [r3, #4]
 8001df2:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001df4:	7952      	ldrb	r2, [r2, #5]
 8001df6:	4932      	ldr	r1, [pc, #200]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001df8:	7989      	ldrb	r1, [r1, #6]
 8001dfa:	9102      	str	r1, [sp, #8]
 8001dfc:	9201      	str	r2, [sp, #4]
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	462b      	mov	r3, r5
 8001e02:	4622      	mov	r2, r4
 8001e04:	4601      	mov	r1, r0
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fc14 	bl	8001634 <Set_Time>
				 state = WORKING;
 8001e0c:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
				 state_ex = true;
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
				 HAL_TIM_Base_Stop_IT(&htim10);
 8001e18:	4827      	ldr	r0, [pc, #156]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001e1a:	f005 fbf1 	bl	8007600 <HAL_TIM_Base_Stop_IT>
}
 8001e1e:	e043      	b.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
		else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET)
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	4825      	ldr	r0, [pc, #148]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e26:	f000 feb3 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d11a      	bne.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0xea>
			 if (state == SETTING)
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d136      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
				 MINUTE++;
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e42:	6013      	str	r3, [r2, #0]
				 MINUTE = MINUTE % 60;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001e4e:	4413      	add	r3, r2
 8001e50:	1159      	asrs	r1, r3, #5
 8001e52:	17d3      	asrs	r3, r2, #31
 8001e54:	1ac9      	subs	r1, r1, r3
 8001e56:	460b      	mov	r3, r1
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a5b      	subs	r3, r3, r1
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	1ad1      	subs	r1, r2, r3
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001e62:	6019      	str	r1, [r3, #0]
}
 8001e64:	e020      	b.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
		else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11) == GPIO_PIN_SET)
 8001e66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6a:	4814      	ldr	r0, [pc, #80]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e6c:	f000 fe90 	bl	8002b90 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d118      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
			 if (state == SETTING)
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d113      	bne.n	8001ea8 <HAL_TIM_PeriodElapsedCallback+0x12c>
				 HOUR++;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	3301      	adds	r3, #1
 8001e86:	4a10      	ldr	r2, [pc, #64]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e88:	6013      	str	r3, [r2, #0]
				 HOUR = HOUR % 24;
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001e90:	fb83 2301 	smull	r2, r3, r3, r1
 8001e94:	109a      	asrs	r2, r3, #2
 8001e96:	17cb      	asrs	r3, r1, #31
 8001e98:	1ad2      	subs	r2, r2, r3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	1aca      	subs	r2, r1, r3
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	20000460 	.word	0x20000460
 8001eb4:	20000011 	.word	0x20000011
 8001eb8:	200004a8 	.word	0x200004a8
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	200003b4 	.word	0x200003b4
 8001ec4:	200003ac 	.word	0x200003ac
 8001ec8:	200003b0 	.word	0x200003b0
 8001ecc:	20000010 	.word	0x20000010
 8001ed0:	88888889 	.word	0x88888889
 8001ed4:	2aaaaaab 	.word	0x2aaaaaab

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <MX_SPI1_Init+0x68>)
 8001eec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ef4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ef6:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f02:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f18:	2218      	movs	r2, #24
 8001f1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f30:	220a      	movs	r2, #10
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <MX_SPI1_Init+0x64>)
 8001f36:	f005 fa29 	bl	800738c <HAL_SPI_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f40:	f7ff ffca 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200003bc 	.word	0x200003bc
 8001f4c:	40013000 	.word	0x40013000

08001f50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08a      	sub	sp, #40	; 0x28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]
 8001f62:	609a      	str	r2, [r3, #8]
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <HAL_SPI_MspInit+0x84>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d12b      	bne.n	8001fca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	4a17      	ldr	r2, [pc, #92]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f80:	6453      	str	r3, [r2, #68]	; 0x44
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_SPI_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001faa:	23e0      	movs	r3, #224	; 0xe0
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4805      	ldr	r0, [pc, #20]	; (8001fdc <HAL_SPI_MspInit+0x8c>)
 8001fc6:	f000 fc5f 	bl	8002888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40013000 	.word	0x40013000
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a0f      	ldr	r2, [pc, #60]	; (800202c <HAL_MspInit+0x4c>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <HAL_MspInit+0x4c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	603b      	str	r3, [r7, #0]
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_MspInit+0x4c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_MspInit+0x4c>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	603b      	str	r3, [r7, #0]
 800201c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800201e:	2007      	movs	r0, #7
 8002020:	f000 fbf0 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002034:	e7fe      	b.n	8002034 <NMI_Handler+0x4>

08002036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203a:	e7fe      	b.n	800203a <HardFault_Handler+0x4>

0800203c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <MemManage_Handler+0x4>

08002042 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <BusFault_Handler+0x4>

08002048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <UsageFault_Handler+0x4>

0800204e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207c:	f000 faae 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}

08002084 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002088:	f44f 7000 	mov.w	r0, #512	; 0x200
 800208c:	f000 fdb2 	bl	8002bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800209a:	f005 fae0 	bl	800765e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <TIM1_UP_TIM10_IRQHandler+0x18>)
 80020a0:	f005 fadd 	bl	800765e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000418 	.word	0x20000418
 80020ac:	200004a8 	.word	0x200004a8

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	; (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f005 fad2 	bl	800765e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000460 	.word	0x20000460

080020c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80020c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020cc:	f000 fd92 	bl	8002bf4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80020d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020d4:	f000 fd8e 	bl	8002bf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <OTG_FS_IRQHandler+0x10>)
 80020e2:	f001 f87f 	bl	80031e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200008d0 	.word	0x200008d0

080020f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return 1;
 80020f4:	2301      	movs	r3, #1
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_kill>:

int _kill(int pid, int sig)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800210a:	f00a f899 	bl	800c240 <__errno>
 800210e:	4603      	mov	r3, r0
 8002110:	2216      	movs	r2, #22
 8002112:	601a      	str	r2, [r3, #0]
  return -1;
 8002114:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_exit>:

void _exit (int status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ffe7 	bl	8002100 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002132:	e7fe      	b.n	8002132 <_exit+0x12>

08002134 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e00a      	b.n	800215c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002146:	f3af 8000 	nop.w
 800214a:	4601      	mov	r1, r0
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	b2ca      	uxtb	r2, r1
 8002154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	3301      	adds	r3, #1
 800215a:	617b      	str	r3, [r7, #20]
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	dbf0      	blt.n	8002146 <_read+0x12>
  }

  return len;
 8002164:	687b      	ldr	r3, [r7, #4]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e009      	b.n	8002194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	60ba      	str	r2, [r7, #8]
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbf1      	blt.n	8002180 <_write+0x12>
  }
  return len;
 800219c:	687b      	ldr	r3, [r7, #4]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <_close>:

int _close(int file)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ce:	605a      	str	r2, [r3, #4]
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_isatty>:

int _isatty(int file)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021e6:	2301      	movs	r3, #1
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002218:	4a14      	ldr	r2, [pc, #80]	; (800226c <_sbrk+0x5c>)
 800221a:	4b15      	ldr	r3, [pc, #84]	; (8002270 <_sbrk+0x60>)
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002224:	4b13      	ldr	r3, [pc, #76]	; (8002274 <_sbrk+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <_sbrk+0x64>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <_sbrk+0x68>)
 8002230:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <_sbrk+0x64>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4413      	add	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d207      	bcs.n	8002250 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002240:	f009 fffe 	bl	800c240 <__errno>
 8002244:	4603      	mov	r3, r0
 8002246:	220c      	movs	r2, #12
 8002248:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800224a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224e:	e009      	b.n	8002264 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002256:	4b07      	ldr	r3, [pc, #28]	; (8002274 <_sbrk+0x64>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4a05      	ldr	r2, [pc, #20]	; (8002274 <_sbrk+0x64>)
 8002260:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002262:	68fb      	ldr	r3, [r7, #12]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20020000 	.word	0x20020000
 8002270:	00000400 	.word	0x00000400
 8002274:	20000414 	.word	0x20000414
 8002278:	20000e00 	.word	0x20000e00

0800227c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <SystemInit+0x20>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	4a05      	ldr	r2, [pc, #20]	; (800229c <SystemInit+0x20>)
 8002288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800228c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]
 80022b0:	609a      	str	r2, [r3, #8]
 80022b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <MX_TIM1_Init+0x98>)
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <MX_TIM1_Init+0x9c>)
 80022c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <MX_TIM1_Init+0x98>)
 80022c4:	225f      	movs	r2, #95	; 0x5f
 80022c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c8:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <MX_TIM1_Init+0x98>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <MX_TIM1_Init+0x98>)
 80022d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_TIM1_Init+0x98>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_TIM1_Init+0x98>)
 80022de:	2200      	movs	r2, #0
 80022e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_TIM1_Init+0x98>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e8:	4813      	ldr	r0, [pc, #76]	; (8002338 <MX_TIM1_Init+0x98>)
 80022ea:	f005 f8d8 	bl	800749e <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022f4:	f7ff fdf0 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	4619      	mov	r1, r3
 8002304:	480c      	ldr	r0, [pc, #48]	; (8002338 <MX_TIM1_Init+0x98>)
 8002306:	f005 fa9a 	bl	800783e <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002310:	f7ff fde2 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	4619      	mov	r1, r3
 8002320:	4805      	ldr	r0, [pc, #20]	; (8002338 <MX_TIM1_Init+0x98>)
 8002322:	f005 fca1 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800232c:	f7ff fdd4 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002330:	bf00      	nop
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000418 	.word	0x20000418
 800233c:	40010000 	.word	0x40010000

08002340 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002346:	f107 0308 	add.w	r3, r7, #8
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002354:	463b      	mov	r3, r7
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800235c:	4b1d      	ldr	r3, [pc, #116]	; (80023d4 <MX_TIM2_Init+0x94>)
 800235e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9599;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_TIM2_Init+0x94>)
 8002366:	f242 527f 	movw	r2, #9599	; 0x257f
 800236a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <MX_TIM2_Init+0x94>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_TIM2_Init+0x94>)
 8002374:	22fa      	movs	r2, #250	; 0xfa
 8002376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_TIM2_Init+0x94>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM2_Init+0x94>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002384:	4813      	ldr	r0, [pc, #76]	; (80023d4 <MX_TIM2_Init+0x94>)
 8002386:	f005 f88a 	bl	800749e <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002390:	f7ff fda2 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_TIM2_Init+0x94>)
 80023a2:	f005 fa4c 	bl	800783e <HAL_TIM_ConfigClockSource>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023ac:	f7ff fd94 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_TIM2_Init+0x94>)
 80023be:	f005 fc53 	bl	8007c68 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023c8:	f7ff fd86 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000460 	.word	0x20000460

080023d8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <MX_TIM10_Init+0x40>)
 80023de:	4a0f      	ldr	r2, [pc, #60]	; (800241c <MX_TIM10_Init+0x44>)
 80023e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9599;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <MX_TIM10_Init+0x40>)
 80023e4:	f242 527f 	movw	r2, #9599	; 0x257f
 80023e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_TIM10_Init+0x40>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1200;
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_TIM10_Init+0x40>)
 80023f2:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80023f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <MX_TIM10_Init+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_TIM10_Init+0x40>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002404:	4804      	ldr	r0, [pc, #16]	; (8002418 <MX_TIM10_Init+0x40>)
 8002406:	f005 f84a 	bl	800749e <HAL_TIM_Base_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002410:	f7ff fd62 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200004a8 	.word	0x200004a8
 800241c:	40014400 	.word	0x40014400

08002420 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_TIM_Base_MspInit+0xb8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d116      	bne.n	8002460 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b29      	ldr	r3, [pc, #164]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6453      	str	r3, [r2, #68]	; 0x44
 8002442:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2019      	movs	r0, #25
 8002454:	f000 f9e1 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002458:	2019      	movs	r0, #25
 800245a:	f000 f9fa 	bl	8002852 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800245e:	e036      	b.n	80024ce <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM2)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002468:	d116      	bne.n	8002498 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	201c      	movs	r0, #28
 800248c:	f000 f9c5 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002490:	201c      	movs	r0, #28
 8002492:	f000 f9de 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 8002496:	e01a      	b.n	80024ce <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM10)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_TIM_Base_MspInit+0xc0>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d115      	bne.n	80024ce <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 80024ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b0:	6453      	str	r3, [r2, #68]	; 0x44
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_TIM_Base_MspInit+0xbc>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	2019      	movs	r0, #25
 80024c4:	f000 f9a9 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024c8:	2019      	movs	r0, #25
 80024ca:	f000 f9c2 	bl	8002852 <HAL_NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40010000 	.word	0x40010000
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40014400 	.word	0x40014400

080024e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e8:	f7ff fec8 	bl	800227c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f009 fe9b 	bl	800c24c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002516:	f7ff fa4d 	bl	80019b4 <main>
  bx  lr    
 800251a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800251c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002528:	0800e384 	.word	0x0800e384
  ldr r2, =_sbss
 800252c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002530:	20000dfc 	.word	0x20000dfc

08002534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC_IRQHandler>
	...

08002538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800253c:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_Init+0x40>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_Init+0x40>)
 8002542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <HAL_Init+0x40>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_Init+0x40>)
 800254e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002554:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_Init+0x40>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a07      	ldr	r2, [pc, #28]	; (8002578 <HAL_Init+0x40>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002560:	2003      	movs	r0, #3
 8002562:	f000 f94f 	bl	8002804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002566:	2000      	movs	r0, #0
 8002568:	f000 f808 	bl	800257c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256c:	f7ff fd38 	bl	8001fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40023c00 	.word	0x40023c00

0800257c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_InitTick+0x54>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_InitTick+0x58>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002592:	fbb3 f3f1 	udiv	r3, r3, r1
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f967 	bl	800286e <HAL_SYSTICK_Config>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e00e      	b.n	80025c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b0f      	cmp	r3, #15
 80025ae:	d80a      	bhi.n	80025c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025b0:	2200      	movs	r2, #0
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b8:	f000 f92f 	bl	800281a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025bc:	4a06      	ldr	r2, [pc, #24]	; (80025d8 <HAL_InitTick+0x5c>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e000      	b.n	80025c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000024 	.word	0x20000024
 80025d4:	2000002c 	.word	0x2000002c
 80025d8:	20000028 	.word	0x20000028

080025dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	2000002c 	.word	0x2000002c
 8002600:	200004f0 	.word	0x200004f0

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	200004f0 	.word	0x200004f0

0800261c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff ffee 	bl	8002604 <HAL_GetTick>
 8002628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002634:	d005      	beq.n	8002642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_Delay+0x44>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4413      	add	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002642:	bf00      	nop
 8002644:	f7ff ffde 	bl	8002604 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	429a      	cmp	r2, r3
 8002652:	d8f7      	bhi.n	8002644 <HAL_Delay+0x28>
  {
  }
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000002c 	.word	0x2000002c

08002664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002680:	4013      	ands	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800268c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60d3      	str	r3, [r2, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <__NVIC_GetPriorityGrouping+0x18>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0307 	and.w	r3, r3, #7
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	db0b      	blt.n	80026f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <__NVIC_EnableIRQ+0x38>)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2001      	movs	r0, #1
 80026ea:	fa00 f202 	lsl.w	r2, r0, r2
 80026ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	e000e100 	.word	0xe000e100

08002704 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	db0a      	blt.n	800272e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <__NVIC_SetPriority+0x4c>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	0112      	lsls	r2, r2, #4
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	440b      	add	r3, r1
 8002728:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800272c:	e00a      	b.n	8002744 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4908      	ldr	r1, [pc, #32]	; (8002754 <__NVIC_SetPriority+0x50>)
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3b04      	subs	r3, #4
 800273c:	0112      	lsls	r2, r2, #4
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	440b      	add	r3, r1
 8002742:	761a      	strb	r2, [r3, #24]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000e100 	.word	0xe000e100
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002758:	b480      	push	{r7}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f1c3 0307 	rsb	r3, r3, #7
 8002772:	2b04      	cmp	r3, #4
 8002774:	bf28      	it	cs
 8002776:	2304      	movcs	r3, #4
 8002778:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3304      	adds	r3, #4
 800277e:	2b06      	cmp	r3, #6
 8002780:	d902      	bls.n	8002788 <NVIC_EncodePriority+0x30>
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3b03      	subs	r3, #3
 8002786:	e000      	b.n	800278a <NVIC_EncodePriority+0x32>
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800278c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	401a      	ands	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	43d9      	mvns	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	4313      	orrs	r3, r2
         );
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3724      	adds	r7, #36	; 0x24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d0:	d301      	bcc.n	80027d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d2:	2301      	movs	r3, #1
 80027d4:	e00f      	b.n	80027f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <SysTick_Config+0x40>)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027de:	210f      	movs	r1, #15
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e4:	f7ff ff8e 	bl	8002704 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <SysTick_Config+0x40>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ee:	4b04      	ldr	r3, [pc, #16]	; (8002800 <SysTick_Config+0x40>)
 80027f0:	2207      	movs	r2, #7
 80027f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000e010 	.word	0xe000e010

08002804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff29 	bl	8002664 <__NVIC_SetPriorityGrouping>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800282c:	f7ff ff3e 	bl	80026ac <__NVIC_GetPriorityGrouping>
 8002830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	6978      	ldr	r0, [r7, #20]
 8002838:	f7ff ff8e 	bl	8002758 <NVIC_EncodePriority>
 800283c:	4602      	mov	r2, r0
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff5d 	bl	8002704 <__NVIC_SetPriority>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b082      	sub	sp, #8
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff31 	bl	80026c8 <__NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffa2 	bl	80027c0 <SysTick_Config>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e159      	b.n	8002b58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a4:	2201      	movs	r2, #1
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8148 	bne.w	8002b52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d005      	beq.n	80028da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d130      	bne.n	800293c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 0201 	and.w	r2, r3, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b03      	cmp	r3, #3
 8002946:	d017      	beq.n	8002978 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d123      	bne.n	80029cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	08da      	lsrs	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3208      	adds	r2, #8
 800298c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	220f      	movs	r2, #15
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	08da      	lsrs	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3208      	adds	r2, #8
 80029c6:	69b9      	ldr	r1, [r7, #24]
 80029c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a2 	beq.w	8002b52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	4a56      	ldr	r2, [pc, #344]	; (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <HAL_GPIO_Init+0x2e8>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	4a52      	ldr	r2, [pc, #328]	; (8002b74 <HAL_GPIO_Init+0x2ec>)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3302      	adds	r3, #2
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	220f      	movs	r2, #15
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a49      	ldr	r2, [pc, #292]	; (8002b78 <HAL_GPIO_Init+0x2f0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d019      	beq.n	8002a8a <HAL_GPIO_Init+0x202>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <HAL_GPIO_Init+0x2f4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d013      	beq.n	8002a86 <HAL_GPIO_Init+0x1fe>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a47      	ldr	r2, [pc, #284]	; (8002b80 <HAL_GPIO_Init+0x2f8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00d      	beq.n	8002a82 <HAL_GPIO_Init+0x1fa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a46      	ldr	r2, [pc, #280]	; (8002b84 <HAL_GPIO_Init+0x2fc>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d007      	beq.n	8002a7e <HAL_GPIO_Init+0x1f6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a45      	ldr	r2, [pc, #276]	; (8002b88 <HAL_GPIO_Init+0x300>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_GPIO_Init+0x1f2>
 8002a76:	2304      	movs	r3, #4
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x204>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x2ec>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b38      	ldr	r3, [pc, #224]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a2f      	ldr	r2, [pc, #188]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afe:	4b23      	ldr	r3, [pc, #140]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b22:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_GPIO_Init+0x304>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f aea2 	bls.w	80028a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40013c00 	.word	0x40013c00

08002b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
 8002bac:	e001      	b.n	8002bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d006      	beq.n	8002c18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f886 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40013c00 	.word	0x40013c00

08002c24 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e059      	b.n	8002cea <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f008 fa49 	bl	800b0e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c64:	d102      	bne.n	8002c6c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f005 f8f0 	bl	8007e56 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7c1a      	ldrb	r2, [r3, #16]
 8002c7e:	f88d 2000 	strb.w	r2, [sp]
 8002c82:	3304      	adds	r3, #4
 8002c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c86:	f005 f871 	bl	8007d6c <USB_CoreInit>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e026      	b.n	8002cea <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f005 f8e8 	bl	8007e78 <USB_SetCurrentMode>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d005      	beq.n	8002cba <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e017      	b.n	8002cea <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7c1a      	ldrb	r2, [r3, #16]
 8002cc2:	f88d 2000 	strb.w	r2, [sp]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cca:	f005 fa8b 	bl	80081e4 <USB_HostInit>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e004      	b.n	8002cea <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cf2:	b590      	push	{r4, r7, lr}
 8002cf4:	b08b      	sub	sp, #44	; 0x2c
 8002cf6:	af04      	add	r7, sp, #16
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	4608      	mov	r0, r1
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	70fb      	strb	r3, [r7, #3]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70bb      	strb	r3, [r7, #2]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002d0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d0e:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_HC_Init+0x2c>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e09d      	b.n	8002e5a <HAL_HCD_HC_Init+0x168>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3319      	adds	r3, #25
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3314      	adds	r3, #20
 8002d4a:	787a      	ldrb	r2, [r7, #1]
 8002d4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3315      	adds	r3, #21
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3326      	adds	r3, #38	; 0x26
 8002d72:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	78bb      	ldrb	r3, [r7, #2]
 8002d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d80:	b2d8      	uxtb	r0, r3
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3316      	adds	r3, #22
 8002d90:	4602      	mov	r2, r0
 8002d92:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d94:	78fb      	ldrb	r3, [r7, #3]
 8002d96:	4619      	mov	r1, r3
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fbc7 	bl	800352c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	da0a      	bge.n	8002dbc <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3317      	adds	r3, #23
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
 8002dba:	e009      	b.n	8002dd0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3317      	adds	r3, #23
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 fb53 	bl	8008480 <USB_GetHostSpeed>
 8002dda:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002ddc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10b      	bne.n	8002dfc <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002de4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_HCD_HC_Init+0x10a>
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2bbc      	cmp	r3, #188	; 0xbc
 8002df6:	d901      	bls.n	8002dfc <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002df8:	23bc      	movs	r3, #188	; 0xbc
 8002dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002e10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	b298      	uxth	r0, r3
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3328      	adds	r3, #40	; 0x28
 8002e26:	4602      	mov	r2, r0
 8002e28:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	787c      	ldrb	r4, [r7, #1]
 8002e34:	78ba      	ldrb	r2, [r7, #2]
 8002e36:	78f9      	ldrb	r1, [r7, #3]
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4623      	mov	r3, r4
 8002e48:	f005 fb42 	bl	80084d0 <USB_HC_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}

08002e62 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_HCD_HC_Halt+0x1e>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e00f      	b.n	8002ea0 <HAL_HCD_HC_Halt+0x3e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fe88 	bl	8008ba6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	70fb      	strb	r3, [r7, #3]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70bb      	strb	r3, [r7, #2]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	3317      	adds	r3, #23
 8002ed2:	78ba      	ldrb	r2, [r7, #2]
 8002ed4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3326      	adds	r3, #38	; 0x26
 8002ee6:	787a      	ldrb	r2, [r7, #1]
 8002ee8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eea:	7c3b      	ldrb	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d114      	bne.n	8002f1a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	332a      	adds	r3, #42	; 0x2a
 8002f00:	2203      	movs	r2, #3
 8002f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3319      	adds	r3, #25
 8002f14:	7f3a      	ldrb	r2, [r7, #28]
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e009      	b.n	8002f2e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	332a      	adds	r3, #42	; 0x2a
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002f2e:	787b      	ldrb	r3, [r7, #1]
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	f200 8102 	bhi.w	800313a <HAL_HCD_HC_SubmitRequest+0x292>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08003125 	.word	0x08003125
 8002f44:	08003011 	.word	0x08003011
 8002f48:	0800309b 	.word	0x0800309b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f4c:	7c3b      	ldrb	r3, [r7, #16]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	f040 80f5 	bne.w	800313e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f54:	78bb      	ldrb	r3, [r7, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d12d      	bne.n	8002fb6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f5a:	8b3b      	ldrh	r3, [r7, #24]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d109      	bne.n	8002f74 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	333d      	adds	r3, #61	; 0x3d
 8002f70:	2201      	movs	r2, #1
 8002f72:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	333d      	adds	r3, #61	; 0x3d
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	332a      	adds	r3, #42	; 0x2a
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f9e:	e0ce      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	332a      	adds	r3, #42	; 0x2a
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	701a      	strb	r2, [r3, #0]
      break;
 8002fb4:	e0c3      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	331a      	adds	r3, #26
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	f040 80b8 	bne.w	800313e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	333c      	adds	r3, #60	; 0x3c
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	332a      	adds	r3, #42	; 0x2a
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
      break;
 8002ff8:	e0a1      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	332a      	adds	r3, #42	; 0x2a
 800300a:	2202      	movs	r2, #2
 800300c:	701a      	strb	r2, [r3, #0]
      break;
 800300e:	e096      	b.n	800313e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003010:	78bb      	ldrb	r3, [r7, #2]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d120      	bne.n	8003058 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	333d      	adds	r3, #61	; 0x3d
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	332a      	adds	r3, #42	; 0x2a
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003040:	e07e      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	332a      	adds	r3, #42	; 0x2a
 8003052:	2202      	movs	r2, #2
 8003054:	701a      	strb	r2, [r3, #0]
      break;
 8003056:	e073      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	333c      	adds	r3, #60	; 0x3c
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10a      	bne.n	8003084 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	332a      	adds	r3, #42	; 0x2a
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
      break;
 8003082:	e05d      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	332a      	adds	r3, #42	; 0x2a
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
      break;
 8003098:	e052      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800309a:	78bb      	ldrb	r3, [r7, #2]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d120      	bne.n	80030e2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	333d      	adds	r3, #61	; 0x3d
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	332a      	adds	r3, #42	; 0x2a
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030ca:	e039      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	332a      	adds	r3, #42	; 0x2a
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]
      break;
 80030e0:	e02e      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	333c      	adds	r3, #60	; 0x3c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	332a      	adds	r3, #42	; 0x2a
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
      break;
 800310c:	e018      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	332a      	adds	r3, #42	; 0x2a
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
      break;
 8003122:	e00d      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	332a      	adds	r3, #42	; 0x2a
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
      break;
 8003138:	e002      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800313e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	332c      	adds	r3, #44	; 0x2c
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	8b39      	ldrh	r1, [r7, #24]
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	3334      	adds	r3, #52	; 0x34
 8003166:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	; 0x4c
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3338      	adds	r3, #56	; 0x38
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	3315      	adds	r3, #21
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	334d      	adds	r3, #77	; 0x4d
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3310      	adds	r3, #16
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	1d19      	adds	r1, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	799b      	ldrb	r3, [r3, #6]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f005 fa92 	bl	80086fc <USB_HC_StartXfer>
 80031d8:	4603      	mov	r3, r0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 ffb2 	bl	8008164 <USB_GetMode>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	f040 80fb 	bne.w	80033fe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 ff75 	bl	80080fc <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80f1 	beq.w	80033fc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f004 ff6c 	bl	80080fc <USB_ReadInterrupts>
 8003224:	4603      	mov	r3, r0
 8003226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800322a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322e:	d104      	bne.n	800323a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f004 ff5c 	bl	80080fc <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800324a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324e:	d104      	bne.n	800325a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f004 ff4c 	bl	80080fc <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800326a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326e:	d104      	bne.n	800327a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 ff3c 	bl	80080fc <USB_ReadInterrupts>
 8003284:	4603      	mov	r3, r0
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d103      	bne.n	8003296 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2202      	movs	r2, #2
 8003294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 ff2e 	bl	80080fc <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032aa:	d120      	bne.n	80032ee <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032c6:	2110      	movs	r1, #16
 80032c8:	6938      	ldr	r0, [r7, #16]
 80032ca:	f004 fe21 	bl	8007f10 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032ce:	6938      	ldr	r0, [r7, #16]
 80032d0:	f004 fe50 	bl	8007f74 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7a5b      	ldrb	r3, [r3, #9]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d105      	bne.n	80032e8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f005 f82c 	bl	8008340 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f007 ff7b 	bl	800b1e4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 ff02 	bl	80080fc <USB_ReadInterrupts>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003302:	d102      	bne.n	800330a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f001 fd33 	bl	8004d70 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fef4 	bl	80080fc <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d106      	bne.n	800332c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f007 ff44 	bl	800b1ac <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2208      	movs	r2, #8
 800332a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f004 fee3 	bl	80080fc <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800333c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003340:	d139      	bne.n	80033b6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f005 fc1c 	bl	8008b84 <USB_HC_ReadInterrupt>
 800334c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
 8003352:	e025      	b.n	80033a0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	2b00      	cmp	r3, #0
 8003366:	d018      	beq.n	800339a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800337a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337e:	d106      	bne.n	800338e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f905 	bl	8003596 <HCD_HC_IN_IRQHandler>
 800338c:	e005      	b.n	800339a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 ff67 	bl	8004268 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	3301      	adds	r3, #1
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	795b      	ldrb	r3, [r3, #5]
 80033a4:	461a      	mov	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d3d3      	bcc.n	8003354 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fe9e 	bl	80080fc <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d101      	bne.n	80033ce <HAL_HCD_IRQHandler+0x1ea>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <HAL_HCD_IRQHandler+0x1ec>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d014      	beq.n	80033fe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0210 	bic.w	r2, r2, #16
 80033e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f001 fbe4 	bl	8004bb2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0210 	orr.w	r2, r2, #16
 80033f8:	619a      	str	r2, [r3, #24]
 80033fa:	e000      	b.n	80033fe <HAL_HCD_IRQHandler+0x21a>
      return;
 80033fc:	bf00      	nop
    }
  }
}
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_HCD_Start+0x16>
 8003416:	2302      	movs	r3, #2
 8003418:	e013      	b.n	8003442 <HAL_HCD_Start+0x3e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f004 fff0 	bl	800840e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f004 fcfe 	bl	8007e34 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_HCD_Stop+0x16>
 800345c:	2302      	movs	r3, #2
 800345e:	e00d      	b.n	800347c <HAL_HCD_Stop+0x32>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f005 fcba 	bl	8008de6 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f004 ff92 	bl	80083ba <USB_ResetPort>
 8003496:	4603      	mov	r3, r0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	334c      	adds	r3, #76	; 0x4c
 80034bc:	781b      	ldrb	r3, [r3, #0]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	460b      	mov	r3, r1
 80034d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3338      	adds	r3, #56	; 0x38
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 ffd4 	bl	80084ae <USB_GetCurrentFrame>
 8003506:	4603      	mov	r3, r0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f004 ffaf 	bl	8008480 <USB_GetHostSpeed>
 8003522:	4603      	mov	r3, r0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	331a      	adds	r3, #26
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	331b      	adds	r3, #27
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3325      	adds	r3, #37	; 0x25
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3324      	adds	r3, #36	; 0x24
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f004 fdb4 	bl	8008122 <USB_ReadChInterrupts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11a      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	2304      	movs	r3, #4
 80035d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	334d      	adds	r3, #77	; 0x4d
 80035e6:	2207      	movs	r2, #7
 80035e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f005 fad7 	bl	8008ba6 <USB_HC_Halt>
 80035f8:	e09e      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	4611      	mov	r1, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f004 fd8d 	bl	8008122 <USB_ReadChInterrupts>
 8003608:	4603      	mov	r3, r0
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003612:	d11b      	bne.n	800364c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	461a      	mov	r2, r3
 8003622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003626:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	334d      	adds	r3, #77	; 0x4d
 8003638:	2208      	movs	r2, #8
 800363a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	78fa      	ldrb	r2, [r7, #3]
 8003642:	4611      	mov	r1, r2
 8003644:	4618      	mov	r0, r3
 8003646:	f005 faae 	bl	8008ba6 <USB_HC_Halt>
 800364a:	e075      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f004 fd64 	bl	8008122 <USB_ReadChInterrupts>
 800365a:	4603      	mov	r3, r0
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b08      	cmp	r3, #8
 8003662:	d11a      	bne.n	800369a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2308      	movs	r3, #8
 8003674:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	; 0x4d
 8003686:	2206      	movs	r2, #6
 8003688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f005 fa87 	bl	8008ba6 <USB_HC_Halt>
 8003698:	e04e      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 fd3d 	bl	8008122 <USB_ReadChInterrupts>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d11b      	bne.n	80036ec <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	; 0x4d
 80036d8:	2209      	movs	r2, #9
 80036da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f005 fa5e 	bl	8008ba6 <USB_HC_Halt>
 80036ea:	e025      	b.n	8003738 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	4611      	mov	r1, r2
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 fd14 	bl	8008122 <USB_ReadChInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b80      	cmp	r3, #128	; 0x80
 8003702:	d119      	bne.n	8003738 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	334d      	adds	r3, #77	; 0x4d
 8003726:	2207      	movs	r2, #7
 8003728:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f005 fa37 	bl	8008ba6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f004 fcee 	bl	8008122 <USB_ReadChInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003750:	d112      	bne.n	8003778 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f005 fa23 	bl	8008ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003772:	6093      	str	r3, [r2, #8]
 8003774:	f000 bd75 	b.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fcce 	bl	8008122 <USB_ReadChInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	f040 8128 	bne.w	80039e2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379e:	461a      	mov	r2, r3
 80037a0:	2320      	movs	r3, #32
 80037a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	331b      	adds	r3, #27
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d119      	bne.n	80037ee <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	331b      	adds	r3, #27
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ec:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	799b      	ldrb	r3, [r3, #6]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3330      	adds	r3, #48	; 0x30
 8003806:	6819      	ldr	r1, [r3, #0]
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	1ac9      	subs	r1, r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4403      	add	r3, r0
 800382a:	3338      	adds	r3, #56	; 0x38
 800382c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	334d      	adds	r3, #77	; 0x4d
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3344      	adds	r3, #68	; 0x44
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	2301      	movs	r3, #1
 8003866:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	3326      	adds	r3, #38	; 0x26
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3326      	adds	r3, #38	; 0x26
 800388e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003890:	2b02      	cmp	r3, #2
 8003892:	d110      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	4611      	mov	r1, r2
 800389c:	4618      	mov	r0, r3
 800389e:	f005 f982 	bl	8008ba6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ae:	461a      	mov	r2, r3
 80038b0:	2310      	movs	r3, #16
 80038b2:	6093      	str	r3, [r2, #8]
 80038b4:	e03d      	b.n	8003932 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	1a9b      	subs	r3, r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	440b      	add	r3, r1
 80038c4:	3326      	adds	r3, #38	; 0x26
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d00a      	beq.n	80038e2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3326      	adds	r3, #38	; 0x26
 80038dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d127      	bne.n	8003932 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003900:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	334c      	adds	r3, #76	; 0x4c
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f007 fc67 	bl	800b200 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	799b      	ldrb	r3, [r3, #6]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d13b      	bne.n	80039b2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3338      	adds	r3, #56	; 0x38
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4403      	add	r3, r0
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	440b      	add	r3, r1
 8003960:	1e59      	subs	r1, r3, #1
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4403      	add	r3, r0
 8003970:	3328      	adds	r3, #40	; 0x28
 8003972:	881b      	ldrh	r3, [r3, #0]
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8470 	beq.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	333c      	adds	r3, #60	; 0x3c
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	f083 0301 	eor.w	r3, r3, #1
 800399a:	b2d8      	uxtb	r0, r3
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	333c      	adds	r3, #60	; 0x3c
 80039aa:	4602      	mov	r2, r0
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	f000 bc58 	b.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80039b2:	78fa      	ldrb	r2, [r7, #3]
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	4613      	mov	r3, r2
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	1a9b      	subs	r3, r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	333c      	adds	r3, #60	; 0x3c
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2d8      	uxtb	r0, r3
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	333c      	adds	r3, #60	; 0x3c
 80039da:	4602      	mov	r2, r0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	f000 bc40 	b.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 fb99 	bl	8008122 <USB_ReadChInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d131      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a06:	461a      	mov	r2, r3
 8003a08:	2320      	movs	r3, #32
 8003a0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	331a      	adds	r3, #26
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 841f 	bne.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	331b      	adds	r3, #27
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334d      	adds	r3, #77	; 0x4d
 8003a48:	2203      	movs	r2, #3
 8003a4a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f005 f8a6 	bl	8008ba6 <USB_HC_Halt>
 8003a5a:	f000 bc02 	b.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	4611      	mov	r1, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	f004 fb5b 	bl	8008122 <USB_ReadChInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	f040 8305 	bne.w	8004082 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a78:	78fb      	ldrb	r3, [r7, #3]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	2302      	movs	r3, #2
 8003a88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	; 0x4d
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d114      	bne.n	8003aca <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	334d      	adds	r3, #77	; 0x4d
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334c      	adds	r3, #76	; 0x4c
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
 8003ac8:	e2cc      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334d      	adds	r3, #77	; 0x4d
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d114      	bne.n	8003b0a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	334d      	adds	r3, #77	; 0x4d
 8003af0:	2202      	movs	r2, #2
 8003af2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334c      	adds	r3, #76	; 0x4c
 8003b04:	2205      	movs	r2, #5
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	e2ac      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334d      	adds	r3, #77	; 0x4d
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b07      	cmp	r3, #7
 8003b1e:	d00b      	beq.n	8003b38 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334d      	adds	r3, #77	; 0x4d
 8003b30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b32:	2b09      	cmp	r3, #9
 8003b34:	f040 80a6 	bne.w	8003c84 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334d      	adds	r3, #77	; 0x4d
 8003b48:	2202      	movs	r2, #2
 8003b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3344      	adds	r3, #68	; 0x44
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1c59      	adds	r1, r3, #1
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4403      	add	r3, r0
 8003b6c:	3344      	adds	r3, #68	; 0x44
 8003b6e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3344      	adds	r3, #68	; 0x44
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d943      	bls.n	8003c0e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3344      	adds	r3, #68	; 0x44
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	331a      	adds	r3, #26
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d123      	bne.n	8003bf8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	331b      	adds	r3, #27
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	331c      	adds	r3, #28
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	78fa      	ldrb	r2, [r7, #3]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334c      	adds	r3, #76	; 0x4c
 8003c08:	2204      	movs	r2, #4
 8003c0a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c0c:	e229      	b.n	8004062 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	334c      	adds	r3, #76	; 0x4c
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3326      	adds	r3, #38	; 0x26
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00b      	beq.n	8003c50 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3326      	adds	r3, #38	; 0x26
 8003c48:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	f040 8209 	bne.w	8004062 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c66:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c6e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c82:	e1ee      	b.n	8004062 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	4613      	mov	r3, r2
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	1a9b      	subs	r3, r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	440b      	add	r3, r1
 8003c92:	334d      	adds	r3, #77	; 0x4d
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	f040 80c8 	bne.w	8003e2c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	334d      	adds	r3, #77	; 0x4d
 8003cac:	2202      	movs	r2, #2
 8003cae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	331b      	adds	r3, #27
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f040 81ce 	bne.w	8004064 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cc8:	78fa      	ldrb	r2, [r7, #3]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3326      	adds	r3, #38	; 0x26
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d16b      	bne.n	8003db6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	1a9b      	subs	r3, r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	3348      	adds	r3, #72	; 0x48
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	1c59      	adds	r1, r3, #1
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4403      	add	r3, r0
 8003cfe:	3348      	adds	r3, #72	; 0x48
 8003d00:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d943      	bls.n	8003da0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003d18:	78fa      	ldrb	r2, [r7, #3]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	3348      	adds	r3, #72	; 0x48
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003d2c:	78fa      	ldrb	r2, [r7, #3]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	1a9b      	subs	r3, r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	331b      	adds	r3, #27
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3344      	adds	r3, #68	; 0x44
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d809      	bhi.n	8003d6a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	331c      	adds	r3, #28
 8003d66:	2201      	movs	r2, #1
 8003d68:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d88:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	011b      	lsls	r3, r3, #4
 8003d92:	1a9b      	subs	r3, r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	334c      	adds	r3, #76	; 0x4c
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	e014      	b.n	8003dca <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334c      	adds	r3, #76	; 0x4c
 8003db0:	2202      	movs	r2, #2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	e009      	b.n	8003dca <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	334c      	adds	r3, #76	; 0x4c
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3326      	adds	r3, #38	; 0x26
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00b      	beq.n	8003df8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3326      	adds	r3, #38	; 0x26
 8003df0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	f040 8136 	bne.w	8004064 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e0e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e16:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e24:	461a      	mov	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	e11b      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334d      	adds	r3, #77	; 0x4d
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	f040 8081 	bne.w	8003f46 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	; 0x4d
 8003e54:	2202      	movs	r2, #2
 8003e56:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	331b      	adds	r3, #27
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	f040 80fa 	bne.w	8004064 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e70:	78fa      	ldrb	r2, [r7, #3]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	334c      	adds	r3, #76	; 0x4c
 8003e80:	2202      	movs	r2, #2
 8003e82:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	0151      	lsls	r1, r2, #5
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	440a      	add	r2, r1
 8003eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ede:	f023 0320 	bic.w	r3, r3, #32
 8003ee2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	3326      	adds	r3, #38	; 0x26
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	3326      	adds	r3, #38	; 0x26
 8003f0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f040 80a9 	bne.w	8004064 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	e08e      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	334d      	adds	r3, #77	; 0x4d
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d143      	bne.n	8003fe4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f5c:	78fa      	ldrb	r2, [r7, #3]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	334d      	adds	r3, #77	; 0x4d
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	334c      	adds	r3, #76	; 0x4c
 8003f80:	2202      	movs	r2, #2
 8003f82:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3326      	adds	r3, #38	; 0x26
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3326      	adds	r3, #38	; 0x26
 8003faa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d159      	bne.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fc6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fce:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fdc:	461a      	mov	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e03f      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	334d      	adds	r3, #77	; 0x4d
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d126      	bne.n	8004048 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334d      	adds	r3, #77	; 0x4d
 800400a:	2202      	movs	r2, #2
 800400c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	3344      	adds	r3, #68	; 0x44
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c59      	adds	r1, r3, #1
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4613      	mov	r3, r2
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4403      	add	r3, r0
 800402e:	3344      	adds	r3, #68	; 0x44
 8004030:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	334c      	adds	r3, #76	; 0x4c
 8004042:	2204      	movs	r2, #4
 8004044:	701a      	strb	r2, [r3, #0]
 8004046:	e00d      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	334d      	adds	r3, #77	; 0x4d
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	f000 8100 	beq.w	8004260 <HCD_HC_IN_IRQHandler+0xcca>
 8004060:	e000      	b.n	8004064 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004062:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	334c      	adds	r3, #76	; 0x4c
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	4619      	mov	r1, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f007 f8c0 	bl	800b200 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004080:	e0ef      	b.n	8004262 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f004 f849 	bl	8008122 <USB_ReadChInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d12f      	bne.n	80040fa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a6:	461a      	mov	r2, r3
 80040a8:	2340      	movs	r3, #64	; 0x40
 80040aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	334d      	adds	r3, #77	; 0x4d
 80040bc:	2205      	movs	r2, #5
 80040be:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	331a      	adds	r3, #26
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3344      	adds	r3, #68	; 0x44
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f004 fd57 	bl	8008ba6 <USB_HC_Halt>
 80040f8:	e0b3      	b.n	8004262 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f004 f80d 	bl	8008122 <USB_ReadChInterrupts>
 8004108:	4603      	mov	r3, r0
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	f040 80a7 	bne.w	8004262 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	3326      	adds	r3, #38	; 0x26
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d11b      	bne.n	8004162 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3344      	adds	r3, #68	; 0x44
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	334d      	adds	r3, #77	; 0x4d
 800414e:	2204      	movs	r2, #4
 8004150:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	4611      	mov	r1, r2
 800415a:	4618      	mov	r0, r3
 800415c:	f004 fd23 	bl	8008ba6 <USB_HC_Halt>
 8004160:	e03f      	b.n	80041e2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3326      	adds	r3, #38	; 0x26
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	3326      	adds	r3, #38	; 0x26
 8004188:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800418a:	2b02      	cmp	r3, #2
 800418c:	d129      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	3344      	adds	r3, #68	; 0x44
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	799b      	ldrb	r3, [r3, #6]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HCD_HC_IN_IRQHandler+0xc2a>
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	331b      	adds	r3, #27
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d110      	bne.n	80041e2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	334d      	adds	r3, #77	; 0x4d
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f004 fce2 	bl	8008ba6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	331b      	adds	r3, #27
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d129      	bne.n	800424c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041f8:	78fa      	ldrb	r2, [r7, #3]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	331b      	adds	r3, #27
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	440a      	add	r2, r1
 8004222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	4413      	add	r3, r2
 8004234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	0151      	lsls	r1, r2, #5
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	440a      	add	r2, r1
 8004242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004246:	f043 0320 	orr.w	r3, r3, #32
 800424a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	4413      	add	r3, r2
 8004254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004258:	461a      	mov	r2, r3
 800425a:	2310      	movs	r3, #16
 800425c:	6093      	str	r3, [r2, #8]
 800425e:	e000      	b.n	8004262 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004260:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f003 ff4b 	bl	8008122 <USB_ReadChInterrupts>
 800428c:	4603      	mov	r3, r0
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d11b      	bne.n	80042ce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042a2:	461a      	mov	r2, r3
 80042a4:	2304      	movs	r3, #4
 80042a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	334d      	adds	r3, #77	; 0x4d
 80042b8:	2207      	movs	r2, #7
 80042ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fc6e 	bl	8008ba6 <USB_HC_Halt>
 80042ca:	f000 bc6f 	b.w	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	78fa      	ldrb	r2, [r7, #3]
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f003 ff23 	bl	8008122 <USB_ReadChInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	f003 0320 	and.w	r3, r3, #32
 80042e2:	2b20      	cmp	r3, #32
 80042e4:	f040 8082 	bne.w	80043ec <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f4:	461a      	mov	r2, r3
 80042f6:	2320      	movs	r3, #32
 80042f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	3319      	adds	r3, #25
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d124      	bne.n	800435a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	1a9b      	subs	r3, r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3319      	adds	r3, #25
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334c      	adds	r3, #76	; 0x4c
 8004334:	2202      	movs	r2, #2
 8004336:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334d      	adds	r3, #77	; 0x4d
 8004348:	2203      	movs	r2, #3
 800434a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	78fa      	ldrb	r2, [r7, #3]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f004 fc26 	bl	8008ba6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	331a      	adds	r3, #26
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 841d 	bne.w	8004bac <HCD_HC_OUT_IRQHandler+0x944>
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	331b      	adds	r3, #27
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f040 8411 	bne.w	8004bac <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3326      	adds	r3, #38	; 0x26
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d009      	beq.n	80043b4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	331b      	adds	r3, #27
 80043b0:	2201      	movs	r2, #1
 80043b2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	334d      	adds	r3, #77	; 0x4d
 80043c4:	2203      	movs	r2, #3
 80043c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	4611      	mov	r1, r2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f004 fbe8 	bl	8008ba6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	3344      	adds	r3, #68	; 0x44
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e3df      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f003 fe94 	bl	8008122 <USB_ReadChInterrupts>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004404:	d111      	bne.n	800442a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004418:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	4611      	mov	r1, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f004 fbbf 	bl	8008ba6 <USB_HC_Halt>
 8004428:	e3c0      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	78fa      	ldrb	r2, [r7, #3]
 8004430:	4611      	mov	r1, r2
 8004432:	4618      	mov	r0, r3
 8004434:	f003 fe75 	bl	8008122 <USB_ReadChInterrupts>
 8004438:	4603      	mov	r3, r0
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b01      	cmp	r3, #1
 8004440:	d168      	bne.n	8004514 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3344      	adds	r3, #68	; 0x44
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fe5f 	bl	8008122 <USB_ReadChInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d112      	bne.n	8004494 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	4613      	mov	r3, r2
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	1a9b      	subs	r3, r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	3319      	adds	r3, #25
 800447e:	2201      	movs	r2, #1
 8004480:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	2340      	movs	r3, #64	; 0x40
 8004492:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	331b      	adds	r3, #27
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d019      	beq.n	80044de <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	1a9b      	subs	r3, r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	440b      	add	r3, r1
 80044b8:	331b      	adds	r3, #27
 80044ba:	2200      	movs	r2, #0
 80044bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80044be:	78fb      	ldrb	r3, [r7, #3]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	78fa      	ldrb	r2, [r7, #3]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044dc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ea:	461a      	mov	r2, r3
 80044ec:	2301      	movs	r3, #1
 80044ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	334d      	adds	r3, #77	; 0x4d
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	4611      	mov	r1, r2
 800450c:	4618      	mov	r0, r3
 800450e:	f004 fb4a 	bl	8008ba6 <USB_HC_Halt>
 8004512:	e34b      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fe00 	bl	8008122 <USB_ReadChInterrupts>
 8004522:	4603      	mov	r3, r0
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d139      	bne.n	80045a0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	334d      	adds	r3, #77	; 0x4d
 800453c:	2205      	movs	r2, #5
 800453e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	331a      	adds	r3, #26
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	1a9b      	subs	r3, r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3319      	adds	r3, #25
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	3344      	adds	r3, #68	; 0x44
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f004 fb0d 	bl	8008ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4413      	add	r3, r2
 8004594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004598:	461a      	mov	r2, r3
 800459a:	2340      	movs	r3, #64	; 0x40
 800459c:	6093      	str	r3, [r2, #8]
 800459e:	e305      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	4611      	mov	r1, r2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f003 fdba 	bl	8008122 <USB_ReadChInterrupts>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d11a      	bne.n	80045ee <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c4:	461a      	mov	r2, r3
 80045c6:	2308      	movs	r3, #8
 80045c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	; 0x4d
 80045da:	2206      	movs	r2, #6
 80045dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	4611      	mov	r1, r2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f004 fadd 	bl	8008ba6 <USB_HC_Halt>
 80045ec:	e2de      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 fd93 	bl	8008122 <USB_ReadChInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	d144      	bne.n	8004690 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004606:	78fa      	ldrb	r2, [r7, #3]
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4613      	mov	r3, r2
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	440b      	add	r3, r1
 8004614:	3344      	adds	r3, #68	; 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800461a:	78fa      	ldrb	r2, [r7, #3]
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	334d      	adds	r3, #77	; 0x4d
 800462a:	2204      	movs	r2, #4
 800462c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800462e:	78fa      	ldrb	r2, [r7, #3]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	1a9b      	subs	r3, r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	3319      	adds	r3, #25
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d114      	bne.n	800466e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	3318      	adds	r3, #24
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3319      	adds	r3, #25
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f004 fa95 	bl	8008ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4413      	add	r3, r2
 8004684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004688:	461a      	mov	r2, r3
 800468a:	2310      	movs	r3, #16
 800468c:	6093      	str	r3, [r2, #8]
 800468e:	e28d      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f003 fd42 	bl	8008122 <USB_ReadChInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d169      	bne.n	800477c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	799b      	ldrb	r3, [r3, #6]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d111      	bne.n	80046d4 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	334d      	adds	r3, #77	; 0x4d
 80046c0:	2207      	movs	r2, #7
 80046c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f004 fa6a 	bl	8008ba6 <USB_HC_Halt>
 80046d2:	e049      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	011b      	lsls	r3, r3, #4
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3344      	adds	r3, #68	; 0x44
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1c59      	adds	r1, r3, #1
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	1a9b      	subs	r3, r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4403      	add	r3, r0
 80046f4:	3344      	adds	r3, #68	; 0x44
 80046f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3344      	adds	r3, #68	; 0x44
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d922      	bls.n	8004754 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3344      	adds	r3, #68	; 0x44
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334c      	adds	r3, #76	; 0x4c
 8004732:	2204      	movs	r2, #4
 8004734:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334c      	adds	r3, #76	; 0x4c
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f006 fd57 	bl	800b200 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004752:	e009      	b.n	8004768 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	334c      	adds	r3, #76	; 0x4c
 8004764:	2202      	movs	r2, #2
 8004766:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4413      	add	r3, r2
 8004770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004774:	461a      	mov	r2, r3
 8004776:	2380      	movs	r3, #128	; 0x80
 8004778:	6093      	str	r3, [r2, #8]
 800477a:	e217      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f003 fccc 	bl	8008122 <USB_ReadChInterrupts>
 800478a:	4603      	mov	r3, r0
 800478c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d11b      	bne.n	80047ce <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	334d      	adds	r3, #77	; 0x4d
 80047a6:	2209      	movs	r2, #9
 80047a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4611      	mov	r1, r2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f004 f9f7 	bl	8008ba6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c4:	461a      	mov	r2, r3
 80047c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047ca:	6093      	str	r3, [r2, #8]
 80047cc:	e1ee      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 fca3 	bl	8008122 <USB_ReadChInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	f040 81df 	bne.w	8004ba6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f4:	461a      	mov	r2, r3
 80047f6:	2302      	movs	r3, #2
 80047f8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047fa:	78fa      	ldrb	r2, [r7, #3]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	334d      	adds	r3, #77	; 0x4d
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b01      	cmp	r3, #1
 800480e:	f040 8093 	bne.w	8004938 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004812:	78fa      	ldrb	r2, [r7, #3]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	334d      	adds	r3, #77	; 0x4d
 8004822:	2202      	movs	r2, #2
 8004824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	334c      	adds	r3, #76	; 0x4c
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3326      	adds	r3, #38	; 0x26
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b02      	cmp	r3, #2
 800484e:	d00b      	beq.n	8004868 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	3326      	adds	r3, #38	; 0x26
 8004860:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004862:	2b03      	cmp	r3, #3
 8004864:	f040 8190 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	799b      	ldrb	r3, [r3, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d115      	bne.n	800489c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	333d      	adds	r3, #61	; 0x3d
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	f083 0301 	eor.w	r3, r3, #1
 8004888:	b2d8      	uxtb	r0, r3
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	1a9b      	subs	r3, r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	333d      	adds	r3, #61	; 0x3d
 8004898:	4602      	mov	r2, r0
 800489a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	799b      	ldrb	r3, [r3, #6]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 8171 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3334      	adds	r3, #52	; 0x34
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8165 	beq.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3334      	adds	r3, #52	; 0x34
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4403      	add	r3, r0
 80048de:	3328      	adds	r3, #40	; 0x28
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	440b      	add	r3, r1
 80048e4:	1e59      	subs	r1, r3, #1
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4403      	add	r3, r0
 80048f4:	3328      	adds	r3, #40	; 0x28
 80048f6:	881b      	ldrh	r3, [r3, #0]
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 0301 	and.w	r3, r3, #1
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 813f 	beq.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	333d      	adds	r3, #61	; 0x3d
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	f083 0301 	eor.w	r3, r3, #1
 8004922:	b2d8      	uxtb	r0, r3
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	333d      	adds	r3, #61	; 0x3d
 8004932:	4602      	mov	r2, r0
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e127      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004938:	78fa      	ldrb	r2, [r7, #3]
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	1a9b      	subs	r3, r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	334d      	adds	r3, #77	; 0x4d
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b03      	cmp	r3, #3
 800494c:	d120      	bne.n	8004990 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494e:	78fa      	ldrb	r2, [r7, #3]
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	4613      	mov	r3, r2
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	1a9b      	subs	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	440b      	add	r3, r1
 800495c:	334d      	adds	r3, #77	; 0x4d
 800495e:	2202      	movs	r2, #2
 8004960:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004962:	78fa      	ldrb	r2, [r7, #3]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	331b      	adds	r3, #27
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 8107 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	1a9b      	subs	r3, r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	334c      	adds	r3, #76	; 0x4c
 800498a:	2202      	movs	r2, #2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	e0fb      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004990:	78fa      	ldrb	r2, [r7, #3]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	334d      	adds	r3, #77	; 0x4d
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d13a      	bne.n	8004a1c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	334d      	adds	r3, #77	; 0x4d
 80049b6:	2202      	movs	r2, #2
 80049b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	334c      	adds	r3, #76	; 0x4c
 80049ca:	2202      	movs	r2, #2
 80049cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	331b      	adds	r3, #27
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 80d1 	bne.w	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	331b      	adds	r3, #27
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	78fa      	ldrb	r2, [r7, #3]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	6053      	str	r3, [r2, #4]
 8004a1a:	e0b5      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a1c:	78fa      	ldrb	r2, [r7, #3]
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	334d      	adds	r3, #77	; 0x4d
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d114      	bne.n	8004a5c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334d      	adds	r3, #77	; 0x4d
 8004a42:	2202      	movs	r2, #2
 8004a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	1a9b      	subs	r3, r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	334c      	adds	r3, #76	; 0x4c
 8004a56:	2202      	movs	r2, #2
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e095      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	334d      	adds	r3, #77	; 0x4d
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d114      	bne.n	8004a9c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	334d      	adds	r3, #77	; 0x4d
 8004a82:	2202      	movs	r2, #2
 8004a84:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a86:	78fa      	ldrb	r2, [r7, #3]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	334c      	adds	r3, #76	; 0x4c
 8004a96:	2205      	movs	r2, #5
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	e075      	b.n	8004b88 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	334d      	adds	r3, #77	; 0x4d
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b07      	cmp	r3, #7
 8004ab0:	d00a      	beq.n	8004ac8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	334d      	adds	r3, #77	; 0x4d
 8004ac2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ac4:	2b09      	cmp	r3, #9
 8004ac6:	d170      	bne.n	8004baa <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ac8:	78fa      	ldrb	r2, [r7, #3]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	334d      	adds	r3, #77	; 0x4d
 8004ad8:	2202      	movs	r2, #2
 8004ada:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3344      	adds	r3, #68	; 0x44
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4613      	mov	r3, r2
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4403      	add	r3, r0
 8004afc:	3344      	adds	r3, #68	; 0x44
 8004afe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	3344      	adds	r3, #68	; 0x44
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d914      	bls.n	8004b40 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	3344      	adds	r3, #68	; 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334c      	adds	r3, #76	; 0x4c
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b3e:	e022      	b.n	8004b86 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	334c      	adds	r3, #76	; 0x4c
 8004b50:	2202      	movs	r2, #2
 8004b52:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b6a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b74:	78fb      	ldrb	r3, [r7, #3]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b80:	461a      	mov	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b86:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334c      	adds	r3, #76	; 0x4c
 8004b98:	781a      	ldrb	r2, [r3, #0]
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f006 fb2e 	bl	800b200 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba4:	e002      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004baa:	bf00      	nop
  }
}
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b08a      	sub	sp, #40	; 0x28
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	0c5b      	lsrs	r3, r3, #17
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d004      	beq.n	8004bf8 <HCD_RXQLVL_IRQHandler+0x46>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	f000 80b6 	beq.w	8004d62 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bf6:	e0b7      	b.n	8004d68 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80b3 	beq.w	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	332c      	adds	r3, #44	; 0x2c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a7 	beq.w	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3338      	adds	r3, #56	; 0x38
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	18d1      	adds	r1, r2, r3
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4403      	add	r3, r0
 8004c3c:	3334      	adds	r3, #52	; 0x34
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4299      	cmp	r1, r3
 8004c42:	f200 8083 	bhi.w	8004d4c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	332c      	adds	r3, #44	; 0x2c
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	b292      	uxth	r2, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	f003 f9f3 	bl	800804c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	332c      	adds	r3, #44	; 0x2c
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	18d1      	adds	r1, r2, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	332c      	adds	r3, #44	; 0x2c
 8004c8c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	3338      	adds	r3, #56	; 0x38
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	18d1      	adds	r1, r2, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4403      	add	r3, r0
 8004cb2:	3338      	adds	r3, #56	; 0x38
 8004cb4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	0cdb      	lsrs	r3, r3, #19
 8004cc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	1a9b      	subs	r3, r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	3328      	adds	r3, #40	; 0x28
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d13f      	bne.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d03c      	beq.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d02:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	333c      	adds	r3, #60	; 0x3c
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f083 0301 	eor.w	r3, r3, #1
 8004d34:	b2d8      	uxtb	r0, r3
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	333c      	adds	r3, #60	; 0x3c
 8004d46:	4602      	mov	r2, r0
 8004d48:	701a      	strb	r2, [r3, #0]
      break;
 8004d4a:	e00c      	b.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	334c      	adds	r3, #76	; 0x4c
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	701a      	strb	r2, [r3, #0]
      break;
 8004d60:	e001      	b.n	8004d66 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d66:	bf00      	nop
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d9c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d10b      	bne.n	8004dc0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d102      	bne.n	8004db8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f006 fa08 	bl	800b1c8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d132      	bne.n	8004e30 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f043 0308 	orr.w	r3, r3, #8
 8004dd0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d126      	bne.n	8004e2a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7a5b      	ldrb	r3, [r3, #9]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d113      	bne.n	8004e0c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004dea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dee:	d106      	bne.n	8004dfe <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2102      	movs	r1, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f003 faa2 	bl	8008340 <USB_InitFSLSPClkSel>
 8004dfc:	e011      	b.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2101      	movs	r1, #1
 8004e04:	4618      	mov	r0, r3
 8004e06:	f003 fa9b 	bl	8008340 <USB_InitFSLSPClkSel>
 8004e0a:	e00a      	b.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	79db      	ldrb	r3, [r3, #7]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e20:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f006 f9fa 	bl	800b21c <HAL_HCD_PortEnabled_Callback>
 8004e28:	e002      	b.n	8004e30 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f006 fa04 	bl	800b238 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d103      	bne.n	8004e42 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0320 	orr.w	r3, r3, #32
 8004e40:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6013      	str	r3, [r2, #0]
}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e12b      	b.n	80050c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d106      	bne.n	8004e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc f9a6 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2224      	movs	r2, #36	; 0x24
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ebc:	f002 f900 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 8004ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4a81      	ldr	r2, [pc, #516]	; (80050cc <HAL_I2C_Init+0x274>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d807      	bhi.n	8004edc <HAL_I2C_Init+0x84>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4a80      	ldr	r2, [pc, #512]	; (80050d0 <HAL_I2C_Init+0x278>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	bf94      	ite	ls
 8004ed4:	2301      	movls	r3, #1
 8004ed6:	2300      	movhi	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e006      	b.n	8004eea <HAL_I2C_Init+0x92>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a7d      	ldr	r2, [pc, #500]	; (80050d4 <HAL_I2C_Init+0x27c>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	bf94      	ite	ls
 8004ee4:	2301      	movls	r3, #1
 8004ee6:	2300      	movhi	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e0e7      	b.n	80050c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a78      	ldr	r2, [pc, #480]	; (80050d8 <HAL_I2C_Init+0x280>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0c9b      	lsrs	r3, r3, #18
 8004efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	4a6a      	ldr	r2, [pc, #424]	; (80050cc <HAL_I2C_Init+0x274>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d802      	bhi.n	8004f2c <HAL_I2C_Init+0xd4>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	3301      	adds	r3, #1
 8004f2a:	e009      	b.n	8004f40 <HAL_I2C_Init+0xe8>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	4a69      	ldr	r2, [pc, #420]	; (80050dc <HAL_I2C_Init+0x284>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	099b      	lsrs	r3, r3, #6
 8004f3e:	3301      	adds	r3, #1
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	495c      	ldr	r1, [pc, #368]	; (80050cc <HAL_I2C_Init+0x274>)
 8004f5c:	428b      	cmp	r3, r1
 8004f5e:	d819      	bhi.n	8004f94 <HAL_I2C_Init+0x13c>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e59      	subs	r1, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f74:	400b      	ands	r3, r1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <HAL_I2C_Init+0x138>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1e59      	subs	r1, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8e:	e051      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004f90:	2304      	movs	r3, #4
 8004f92:	e04f      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d111      	bne.n	8004fc0 <HAL_I2C_Init+0x168>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	1e58      	subs	r0, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	440b      	add	r3, r1
 8004faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	bf0c      	ite	eq
 8004fb8:	2301      	moveq	r3, #1
 8004fba:	2300      	movne	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e012      	b.n	8004fe6 <HAL_I2C_Init+0x18e>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1e58      	subs	r0, r3, #1
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	0099      	lsls	r1, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <HAL_I2C_Init+0x196>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e022      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10e      	bne.n	8005014 <HAL_I2C_Init+0x1bc>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1e58      	subs	r0, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	440b      	add	r3, r1
 8005004:	fbb0 f3f3 	udiv	r3, r0, r3
 8005008:	3301      	adds	r3, #1
 800500a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005012:	e00f      	b.n	8005034 <HAL_I2C_Init+0x1dc>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1e58      	subs	r0, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6859      	ldr	r1, [r3, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	0099      	lsls	r1, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	fbb0 f3f3 	udiv	r3, r0, r3
 800502a:	3301      	adds	r3, #1
 800502c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	6809      	ldr	r1, [r1, #0]
 8005038:	4313      	orrs	r3, r2
 800503a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005062:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6911      	ldr	r1, [r2, #16]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	4311      	orrs	r1, r2
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	430b      	orrs	r3, r1
 8005076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2220      	movs	r2, #32
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	000186a0 	.word	0x000186a0
 80050d0:	001e847f 	.word	0x001e847f
 80050d4:	003d08ff 	.word	0x003d08ff
 80050d8:	431bde83 	.word	0x431bde83
 80050dc:	10624dd3 	.word	0x10624dd3

080050e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	817b      	strh	r3, [r7, #10]
 80050f2:	460b      	mov	r3, r1
 80050f4:	813b      	strh	r3, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050fa:	f7fd fa83 	bl	8002604 <HAL_GetTick>
 80050fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b20      	cmp	r3, #32
 800510a:	f040 80d9 	bne.w	80052c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	2319      	movs	r3, #25
 8005114:	2201      	movs	r2, #1
 8005116:	496d      	ldr	r1, [pc, #436]	; (80052cc <HAL_I2C_Mem_Write+0x1ec>)
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 fc8b 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005124:	2302      	movs	r3, #2
 8005126:	e0cc      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_I2C_Mem_Write+0x56>
 8005132:	2302      	movs	r3, #2
 8005134:	e0c5      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b01      	cmp	r3, #1
 800514a:	d007      	beq.n	800515c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2221      	movs	r2, #33	; 0x21
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2240      	movs	r2, #64	; 0x40
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800518c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a4d      	ldr	r2, [pc, #308]	; (80052d0 <HAL_I2C_Mem_Write+0x1f0>)
 800519c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800519e:	88f8      	ldrh	r0, [r7, #6]
 80051a0:	893a      	ldrh	r2, [r7, #8]
 80051a2:	8979      	ldrh	r1, [r7, #10]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	4603      	mov	r3, r0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fac2 	bl	8005738 <I2C_RequestMemoryWrite>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d052      	beq.n	8005260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e081      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 fd50 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00d      	beq.n	80051ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d107      	bne.n	80051e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e06b      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	781a      	ldrb	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005204:	3b01      	subs	r3, #1
 8005206:	b29a      	uxth	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005210:	b29b      	uxth	r3, r3
 8005212:	3b01      	subs	r3, #1
 8005214:	b29a      	uxth	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b04      	cmp	r3, #4
 8005226:	d11b      	bne.n	8005260 <HAL_I2C_Mem_Write+0x180>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800522c:	2b00      	cmp	r3, #0
 800522e:	d017      	beq.n	8005260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	781a      	ldrb	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1aa      	bne.n	80051be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fd43 	bl	8005cf8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	2b04      	cmp	r3, #4
 800527e:	d107      	bne.n	8005290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800528e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e016      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	00100002 	.word	0x00100002
 80052d0:	ffff0000 	.word	0xffff0000

080052d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08c      	sub	sp, #48	; 0x30
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052ee:	f7fd f989 	bl	8002604 <HAL_GetTick>
 80052f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	f040 8214 	bne.w	800572a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	2319      	movs	r3, #25
 8005308:	2201      	movs	r2, #1
 800530a:	497b      	ldr	r1, [pc, #492]	; (80054f8 <HAL_I2C_Mem_Read+0x224>)
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fb91 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
 800531a:	e207      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_I2C_Mem_Read+0x56>
 8005326:	2302      	movs	r3, #2
 8005328:	e200      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d007      	beq.n	8005350 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2222      	movs	r2, #34	; 0x22
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2240      	movs	r2, #64	; 0x40
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4a5b      	ldr	r2, [pc, #364]	; (80054fc <HAL_I2C_Mem_Read+0x228>)
 8005390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005392:	88f8      	ldrh	r0, [r7, #6]
 8005394:	893a      	ldrh	r2, [r7, #8]
 8005396:	8979      	ldrh	r1, [r7, #10]
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	9301      	str	r3, [sp, #4]
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	4603      	mov	r3, r0
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fa5e 	bl	8005864 <I2C_RequestMemoryRead>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e1bc      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d113      	bne.n	80053e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e190      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d11b      	bne.n	8005422 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e170      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	2b02      	cmp	r3, #2
 8005428:	d11b      	bne.n	8005462 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	e150      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005478:	e144      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547e:	2b03      	cmp	r3, #3
 8005480:	f200 80f1 	bhi.w	8005666 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005488:	2b01      	cmp	r3, #1
 800548a:	d123      	bne.n	80054d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 fc79 	bl	8005d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e145      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	1c5a      	adds	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054d2:	e117      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d14e      	bne.n	800557a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	2200      	movs	r2, #0
 80054e4:	4906      	ldr	r1, [pc, #24]	; (8005500 <HAL_I2C_Mem_Read+0x22c>)
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 faa4 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d008      	beq.n	8005504 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e11a      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
 80054f6:	bf00      	nop
 80054f8:	00100002 	.word	0x00100002
 80054fc:	ffff0000 	.word	0xffff0000
 8005500:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005512:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005530:	3b01      	subs	r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553c:	b29b      	uxth	r3, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	b29a      	uxth	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005578:	e0c4      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005580:	2200      	movs	r2, #0
 8005582:	496c      	ldr	r1, [pc, #432]	; (8005734 <HAL_I2C_Mem_Read+0x460>)
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 fa55 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0cb      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c0:	3b01      	subs	r3, #1
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	2200      	movs	r2, #0
 80055de:	4955      	ldr	r1, [pc, #340]	; (8005734 <HAL_I2C_Mem_Read+0x460>)
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 fa27 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e09d      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691a      	ldr	r2, [r3, #16]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565a:	b29b      	uxth	r3, r3
 800565c:	3b01      	subs	r3, #1
 800565e:	b29a      	uxth	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005664:	e04e      	b.n	8005704 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb8c 	bl	8005d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e058      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d124      	bne.n	8005704 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d107      	bne.n	80056d2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	f47f aeb6 	bne.w	800547a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	e000      	b.n	800572c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800572a:	2302      	movs	r3, #2
  }
}
 800572c:	4618      	mov	r0, r3
 800572e:	3728      	adds	r7, #40	; 0x28
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	00010004 	.word	0x00010004

08005738 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005760:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	2200      	movs	r2, #0
 800576a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f960 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005788:	d103      	bne.n	8005792 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e05f      	b.n	8005856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	492d      	ldr	r1, [pc, #180]	; (8005860 <I2C_RequestMemoryWrite+0x128>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f9bb 	bl	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e04c      	b.n	8005856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	617b      	str	r3, [r7, #20]
 80057d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	6a39      	ldr	r1, [r7, #32]
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fa46 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00d      	beq.n	80057fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	d107      	bne.n	80057fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e02b      	b.n	8005856 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d105      	bne.n	8005810 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005804:	893b      	ldrh	r3, [r7, #8]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	611a      	str	r2, [r3, #16]
 800580e:	e021      	b.n	8005854 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005810:	893b      	ldrh	r3, [r7, #8]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b29b      	uxth	r3, r3
 8005816:	b2da      	uxtb	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	6a39      	ldr	r1, [r7, #32]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fa20 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b04      	cmp	r3, #4
 8005834:	d107      	bne.n	8005846 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005844:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e005      	b.n	8005856 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800584a:	893b      	ldrh	r3, [r7, #8]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	00010002 	.word	0x00010002

08005864 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4603      	mov	r3, r0
 8005874:	817b      	strh	r3, [r7, #10]
 8005876:	460b      	mov	r3, r1
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800588c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800589c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f8c2 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00d      	beq.n	80058d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c4:	d103      	bne.n	80058ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e0aa      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	6a3a      	ldr	r2, [r7, #32]
 80058e6:	4952      	ldr	r1, [pc, #328]	; (8005a30 <I2C_RequestMemoryRead+0x1cc>)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 f91d 	bl	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e097      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	617b      	str	r3, [r7, #20]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	617b      	str	r3, [r7, #20]
 800590c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	6a39      	ldr	r1, [r7, #32]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f9a8 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00d      	beq.n	800593a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b04      	cmp	r3, #4
 8005924:	d107      	bne.n	8005936 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005934:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e076      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d105      	bne.n	800594c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005940:	893b      	ldrh	r3, [r7, #8]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	e021      	b.n	8005990 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	b29b      	uxth	r3, r3
 8005952:	b2da      	uxtb	r2, r3
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800595a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595c:	6a39      	ldr	r1, [r7, #32]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 f982 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00d      	beq.n	8005986 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	2b04      	cmp	r3, #4
 8005970:	d107      	bne.n	8005982 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005980:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e050      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005986:	893b      	ldrh	r3, [r7, #8]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	6a39      	ldr	r1, [r7, #32]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f967 	bl	8005c68 <I2C_WaitOnTXEFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d107      	bne.n	80059b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e035      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f82b 	bl	8005a34 <I2C_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059f2:	d103      	bne.n	80059fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e013      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a00:	897b      	ldrh	r3, [r7, #10]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f043 0301 	orr.w	r3, r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <I2C_RequestMemoryRead+0x1cc>)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f886 	bl	8005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	00010002 	.word	0x00010002

08005a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a44:	e048      	b.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4c:	d044      	beq.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fc fdd9 	bl	8002604 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d139      	bne.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d10d      	bne.n	8005a8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	43da      	mvns	r2, r3
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	e00c      	b.n	8005aa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	43da      	mvns	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf0c      	ite	eq
 8005a9c:	2301      	moveq	r3, #1
 8005a9e:	2300      	movne	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d116      	bne.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e023      	b.n	8005b20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	0c1b      	lsrs	r3, r3, #16
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10d      	bne.n	8005afe <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	43da      	mvns	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	4013      	ands	r3, r2
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bf0c      	ite	eq
 8005af4:	2301      	moveq	r3, #1
 8005af6:	2300      	movne	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	e00c      	b.n	8005b18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	43da      	mvns	r2, r3
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	bf0c      	ite	eq
 8005b10:	2301      	moveq	r3, #1
 8005b12:	2300      	movne	r3, #0
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d093      	beq.n	8005a46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b36:	e071      	b.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b46:	d123      	bne.n	8005b90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7c:	f043 0204 	orr.w	r2, r3, #4
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e067      	b.n	8005c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b96:	d041      	beq.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b98:	f7fc fd34 	bl	8002604 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d302      	bcc.n	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d136      	bne.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0c1b      	lsrs	r3, r3, #16
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10c      	bne.n	8005bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	bf14      	ite	ne
 8005bca:	2301      	movne	r3, #1
 8005bcc:	2300      	moveq	r3, #0
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e00b      	b.n	8005bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	43da      	mvns	r2, r3
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	bf14      	ite	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	2300      	moveq	r3, #0
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e021      	b.n	8005c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	0c1b      	lsrs	r3, r3, #16
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d10c      	bne.n	8005c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	43da      	mvns	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e00b      	b.n	8005c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf14      	ite	ne
 8005c52:	2301      	movne	r3, #1
 8005c54:	2300      	moveq	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af6d 	bne.w	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c74:	e034      	b.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f8e3 	bl	8005e42 <I2C_IsAcknowledgeFailed>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e034      	b.n	8005cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c8c:	d028      	beq.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c8e:	f7fc fcb9 	bl	8002604 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d302      	bcc.n	8005ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d016      	beq.n	8005ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d1c3      	bne.n	8005c76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d04:	e034      	b.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f89b 	bl	8005e42 <I2C_IsAcknowledgeFailed>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e034      	b.n	8005d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1c:	d028      	beq.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fc fc71 	bl	8002604 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11d      	bne.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d016      	beq.n	8005d70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e007      	b.n	8005d80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d1c3      	bne.n	8005d06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d94:	e049      	b.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d119      	bne.n	8005dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0210 	mvn.w	r2, #16
 8005dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e030      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dd8:	f7fc fc14 	bl	8002604 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d302      	bcc.n	8005dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11d      	bne.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d016      	beq.n	8005e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e007      	b.n	8005e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d1ae      	bne.n	8005d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d11b      	bne.n	8005e92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f043 0204 	orr.w	r2, r3, #4
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e128      	b.n	8006104 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d109      	bne.n	8005ed2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a90      	ldr	r2, [pc, #576]	; (800610c <HAL_I2S_Init+0x26c>)
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7fb fa7d 	bl	80013cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005ee8:	f023 030f 	bic.w	r3, r3, #15
 8005eec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d060      	beq.n	8005fc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f06:	2310      	movs	r3, #16
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e001      	b.n	8005f10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d802      	bhi.n	8005f1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f001 f9d2 	bl	80072c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f24:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f2e:	d125      	bne.n	8005f7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d010      	beq.n	8005f5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f42:	4613      	mov	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f54:	3305      	adds	r3, #5
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	e01f      	b.n	8005f9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	3305      	adds	r3, #5
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	e00e      	b.n	8005f9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f96:	3305      	adds	r3, #5
 8005f98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4a5c      	ldr	r2, [pc, #368]	; (8006110 <HAL_I2S_Init+0x270>)
 8005f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa2:	08db      	lsrs	r3, r3, #3
 8005fa4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e003      	b.n	8005fc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d902      	bls.n	8005fd4 <HAL_I2S_Init+0x134>
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2bff      	cmp	r3, #255	; 0xff
 8005fd2:	d907      	bls.n	8005fe4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	f043 0210 	orr.w	r2, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e08f      	b.n	8006104 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	ea42 0103 	orr.w	r1, r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006002:	f023 030f 	bic.w	r3, r3, #15
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6851      	ldr	r1, [r2, #4]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6892      	ldr	r2, [r2, #8]
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68d2      	ldr	r2, [r2, #12]
 8006014:	4311      	orrs	r1, r2
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6992      	ldr	r2, [r2, #24]
 800601a:	430a      	orrs	r2, r1
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006026:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a1b      	ldr	r3, [r3, #32]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d161      	bne.n	80060f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a38      	ldr	r2, [pc, #224]	; (8006114 <HAL_I2S_Init+0x274>)
 8006034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a37      	ldr	r2, [pc, #220]	; (8006118 <HAL_I2S_Init+0x278>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d101      	bne.n	8006044 <HAL_I2S_Init+0x1a4>
 8006040:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_I2S_Init+0x27c>)
 8006042:	e001      	b.n	8006048 <HAL_I2S_Init+0x1a8>
 8006044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	4932      	ldr	r1, [pc, #200]	; (8006118 <HAL_I2S_Init+0x278>)
 8006050:	428a      	cmp	r2, r1
 8006052:	d101      	bne.n	8006058 <HAL_I2S_Init+0x1b8>
 8006054:	4a31      	ldr	r2, [pc, #196]	; (800611c <HAL_I2S_Init+0x27c>)
 8006056:	e001      	b.n	800605c <HAL_I2S_Init+0x1bc>
 8006058:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800605c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006060:	f023 030f 	bic.w	r3, r3, #15
 8006064:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a2b      	ldr	r2, [pc, #172]	; (8006118 <HAL_I2S_Init+0x278>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d101      	bne.n	8006074 <HAL_I2S_Init+0x1d4>
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <HAL_I2S_Init+0x27c>)
 8006072:	e001      	b.n	8006078 <HAL_I2S_Init+0x1d8>
 8006074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006078:	2202      	movs	r2, #2
 800607a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a25      	ldr	r2, [pc, #148]	; (8006118 <HAL_I2S_Init+0x278>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d101      	bne.n	800608a <HAL_I2S_Init+0x1ea>
 8006086:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_I2S_Init+0x27c>)
 8006088:	e001      	b.n	800608e <HAL_I2S_Init+0x1ee>
 800608a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800608e:	69db      	ldr	r3, [r3, #28]
 8006090:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609a:	d003      	beq.n	80060a4 <HAL_I2S_Init+0x204>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80060a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a8:	613b      	str	r3, [r7, #16]
 80060aa:	e001      	b.n	80060b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060ba:	4313      	orrs	r3, r2
 80060bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a0d      	ldr	r2, [pc, #52]	; (8006118 <HAL_I2S_Init+0x278>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d101      	bne.n	80060ec <HAL_I2S_Init+0x24c>
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <HAL_I2S_Init+0x27c>)
 80060ea:	e001      	b.n	80060f0 <HAL_I2S_Init+0x250>
 80060ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060f0:	897a      	ldrh	r2, [r7, #10]
 80060f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	08006217 	.word	0x08006217
 8006110:	cccccccd 	.word	0xcccccccd
 8006114:	0800632d 	.word	0x0800632d
 8006118:	40003800 	.word	0x40003800
 800611c:	40003400 	.word	0x40003400

08006120 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10e      	bne.n	80061b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ffb8 	bl	8006120 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061b0:	bf00      	nop
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	b292      	uxth	r2, r2
 80061cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	1c9a      	adds	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10e      	bne.n	800620e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80061fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff93 	bl	8006134 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b04      	cmp	r3, #4
 8006230:	d13a      	bne.n	80062a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b01      	cmp	r3, #1
 800623a:	d109      	bne.n	8006250 <I2S_IRQHandler+0x3a>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d102      	bne.n	8006250 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ffb4 	bl	80061b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d126      	bne.n	80062a8 <I2S_IRQHandler+0x92>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b20      	cmp	r3, #32
 8006266:	d11f      	bne.n	80062a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006276:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	613b      	str	r3, [r7, #16]
 800628c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	f043 0202 	orr.w	r2, r3, #2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff ff50 	bl	8006148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d136      	bne.n	8006322 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d109      	bne.n	80062d2 <I2S_IRQHandler+0xbc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d102      	bne.n	80062d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff ff45 	bl	800615c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d122      	bne.n	8006322 <I2S_IRQHandler+0x10c>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0320 	and.w	r3, r3, #32
 80062e6:	2b20      	cmp	r3, #32
 80062e8:	d11b      	bne.n	8006322 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	f043 0204 	orr.w	r2, r3, #4
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff ff13 	bl	8006148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006322:	bf00      	nop
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a92      	ldr	r2, [pc, #584]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d101      	bne.n	800634a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006346:	4b92      	ldr	r3, [pc, #584]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006348:	e001      	b.n	800634e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800634a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a8b      	ldr	r2, [pc, #556]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d101      	bne.n	8006368 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006364:	4b8a      	ldr	r3, [pc, #552]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006366:	e001      	b.n	800636c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006378:	d004      	beq.n	8006384 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 8099 	bne.w	80064b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d107      	bne.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f925 	bl	80065e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d107      	bne.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f9c8 	bl	8006748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d13a      	bne.n	8006438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d035      	beq.n	8006438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6e      	ldr	r2, [pc, #440]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d101      	bne.n	80063da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80063d6:	4b6e      	ldr	r3, [pc, #440]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063d8:	e001      	b.n	80063de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80063da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4969      	ldr	r1, [pc, #420]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063e6:	428b      	cmp	r3, r1
 80063e8:	d101      	bne.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80063ea:	4b69      	ldr	r3, [pc, #420]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063ec:	e001      	b.n	80063f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80063ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006406:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642a:	f043 0202 	orr.w	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff fe88 	bl	8006148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b08      	cmp	r3, #8
 8006440:	f040 80c3 	bne.w	80065ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80bd 	beq.w	80065ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800645e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a49      	ldr	r2, [pc, #292]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800646a:	4b49      	ldr	r3, [pc, #292]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800646c:	e001      	b.n	8006472 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800646e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4944      	ldr	r1, [pc, #272]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800647a:	428b      	cmp	r3, r1
 800647c:	d101      	bne.n	8006482 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800647e:	4b44      	ldr	r3, [pc, #272]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006480:	e001      	b.n	8006486 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800648a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800648c:	2300      	movs	r3, #0
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a6:	f043 0204 	orr.w	r2, r3, #4
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe4a 	bl	8006148 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064b4:	e089      	b.n	80065ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d107      	bne.n	80064d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f8be 	bl	800664c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d107      	bne.n	80064ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f8fd 	bl	80066e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d12f      	bne.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02a      	beq.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800650c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006518:	4b1d      	ldr	r3, [pc, #116]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800651a:	e001      	b.n	8006520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800651c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4919      	ldr	r1, [pc, #100]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006528:	428b      	cmp	r3, r1
 800652a:	d101      	bne.n	8006530 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800652c:	4b18      	ldr	r3, [pc, #96]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800652e:	e001      	b.n	8006534 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006538:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f043 0202 	orr.w	r2, r3, #2
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fdfa 	bl	8006148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b08      	cmp	r3, #8
 800655c:	d136      	bne.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d031      	beq.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a07      	ldr	r2, [pc, #28]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006574:	e001      	b.n	800657a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4902      	ldr	r1, [pc, #8]	; (800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006582:	428b      	cmp	r3, r1
 8006584:	d106      	bne.n	8006594 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006586:	4b02      	ldr	r3, [pc, #8]	; (8006590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006588:	e006      	b.n	8006598 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800658a:	bf00      	nop
 800658c:	40003800 	.word	0x40003800
 8006590:	40003400 	.word	0x40003400
 8006594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800659c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fdc0 	bl	8006148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065c8:	e000      	b.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80065ca:	bf00      	nop
}
 80065cc:	bf00      	nop
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80065dc:	bf00      	nop
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	1c99      	adds	r1, r3, #2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6251      	str	r1, [r2, #36]	; 0x24
 80065fa:	881a      	ldrh	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d113      	bne.n	8006642 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006628:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d106      	bne.n	8006642 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff ffc9 	bl	80065d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	1c99      	adds	r1, r3, #2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6251      	str	r1, [r2, #36]	; 0x24
 800665e:	8819      	ldrh	r1, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <I2SEx_TxISR_I2SExt+0x90>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d101      	bne.n	800666e <I2SEx_TxISR_I2SExt+0x22>
 800666a:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <I2SEx_TxISR_I2SExt+0x94>)
 800666c:	e001      	b.n	8006672 <I2SEx_TxISR_I2SExt+0x26>
 800666e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006672:	460a      	mov	r2, r1
 8006674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d121      	bne.n	80066d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a12      	ldr	r2, [pc, #72]	; (80066dc <I2SEx_TxISR_I2SExt+0x90>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d101      	bne.n	800669c <I2SEx_TxISR_I2SExt+0x50>
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <I2SEx_TxISR_I2SExt+0x94>)
 800669a:	e001      	b.n	80066a0 <I2SEx_TxISR_I2SExt+0x54>
 800669c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	490d      	ldr	r1, [pc, #52]	; (80066dc <I2SEx_TxISR_I2SExt+0x90>)
 80066a8:	428b      	cmp	r3, r1
 80066aa:	d101      	bne.n	80066b0 <I2SEx_TxISR_I2SExt+0x64>
 80066ac:	4b0c      	ldr	r3, [pc, #48]	; (80066e0 <I2SEx_TxISR_I2SExt+0x94>)
 80066ae:	e001      	b.n	80066b4 <I2SEx_TxISR_I2SExt+0x68>
 80066b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff ff81 	bl	80065d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40003800 	.word	0x40003800
 80066e0:	40003400 	.word	0x40003400

080066e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68d8      	ldr	r0, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	1c99      	adds	r1, r3, #2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80066fc:	b282      	uxth	r2, r0
 80066fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006712:	b29b      	uxth	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d113      	bne.n	8006740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ff4a 	bl	80065d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <I2SEx_RxISR_I2SExt+0x90>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <I2SEx_RxISR_I2SExt+0x16>
 800675a:	4b20      	ldr	r3, [pc, #128]	; (80067dc <I2SEx_RxISR_I2SExt+0x94>)
 800675c:	e001      	b.n	8006762 <I2SEx_RxISR_I2SExt+0x1a>
 800675e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006762:	68d8      	ldr	r0, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	1c99      	adds	r1, r3, #2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800676e:	b282      	uxth	r2, r0
 8006770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d121      	bne.n	80067ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a12      	ldr	r2, [pc, #72]	; (80067d8 <I2SEx_RxISR_I2SExt+0x90>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d101      	bne.n	8006798 <I2SEx_RxISR_I2SExt+0x50>
 8006794:	4b11      	ldr	r3, [pc, #68]	; (80067dc <I2SEx_RxISR_I2SExt+0x94>)
 8006796:	e001      	b.n	800679c <I2SEx_RxISR_I2SExt+0x54>
 8006798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	490d      	ldr	r1, [pc, #52]	; (80067d8 <I2SEx_RxISR_I2SExt+0x90>)
 80067a4:	428b      	cmp	r3, r1
 80067a6:	d101      	bne.n	80067ac <I2SEx_RxISR_I2SExt+0x64>
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <I2SEx_RxISR_I2SExt+0x94>)
 80067aa:	e001      	b.n	80067b0 <I2SEx_RxISR_I2SExt+0x68>
 80067ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d106      	bne.n	80067ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ff03 	bl	80065d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80067ce:	bf00      	nop
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	40003800 	.word	0x40003800
 80067dc:	40003400 	.word	0x40003400

080067e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e267      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d075      	beq.n	80068ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067fe:	4b88      	ldr	r3, [pc, #544]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 030c 	and.w	r3, r3, #12
 8006806:	2b04      	cmp	r3, #4
 8006808:	d00c      	beq.n	8006824 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680a:	4b85      	ldr	r3, [pc, #532]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006812:	2b08      	cmp	r3, #8
 8006814:	d112      	bne.n	800683c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006816:	4b82      	ldr	r3, [pc, #520]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800681e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006822:	d10b      	bne.n	800683c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006824:	4b7e      	ldr	r3, [pc, #504]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d05b      	beq.n	80068e8 <HAL_RCC_OscConfig+0x108>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d157      	bne.n	80068e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e242      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d106      	bne.n	8006854 <HAL_RCC_OscConfig+0x74>
 8006846:	4b76      	ldr	r3, [pc, #472]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a75      	ldr	r2, [pc, #468]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800684c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006850:	6013      	str	r3, [r2, #0]
 8006852:	e01d      	b.n	8006890 <HAL_RCC_OscConfig+0xb0>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0x98>
 800685e:	4b70      	ldr	r3, [pc, #448]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a6f      	ldr	r2, [pc, #444]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	4b6d      	ldr	r3, [pc, #436]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a6c      	ldr	r2, [pc, #432]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e00b      	b.n	8006890 <HAL_RCC_OscConfig+0xb0>
 8006878:	4b69      	ldr	r3, [pc, #420]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a68      	ldr	r2, [pc, #416]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800687e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	4b66      	ldr	r3, [pc, #408]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a65      	ldr	r2, [pc, #404]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800688a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800688e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d013      	beq.n	80068c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006898:	f7fb feb4 	bl	8002604 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	e008      	b.n	80068b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a0:	f7fb feb0 	bl	8002604 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b64      	cmp	r3, #100	; 0x64
 80068ac:	d901      	bls.n	80068b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	e207      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b2:	4b5b      	ldr	r3, [pc, #364]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0f0      	beq.n	80068a0 <HAL_RCC_OscConfig+0xc0>
 80068be:	e014      	b.n	80068ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c0:	f7fb fea0 	bl	8002604 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068c8:	f7fb fe9c 	bl	8002604 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b64      	cmp	r3, #100	; 0x64
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e1f3      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068da:	4b51      	ldr	r3, [pc, #324]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0xe8>
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d063      	beq.n	80069be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f003 030c 	and.w	r3, r3, #12
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006902:	4b47      	ldr	r3, [pc, #284]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800690a:	2b08      	cmp	r3, #8
 800690c:	d11c      	bne.n	8006948 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800690e:	4b44      	ldr	r3, [pc, #272]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d116      	bne.n	8006948 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691a:	4b41      	ldr	r3, [pc, #260]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <HAL_RCC_OscConfig+0x152>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d001      	beq.n	8006932 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e1c7      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006932:	4b3b      	ldr	r3, [pc, #236]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4937      	ldr	r1, [pc, #220]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006946:	e03a      	b.n	80069be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006950:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006956:	f7fb fe55 	bl	8002604 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800695e:	f7fb fe51 	bl	8002604 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e1a8      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006970:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800697c:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4925      	ldr	r1, [pc, #148]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 800698c:	4313      	orrs	r3, r2
 800698e:	600b      	str	r3, [r1, #0]
 8006990:	e015      	b.n	80069be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006992:	4b24      	ldr	r3, [pc, #144]	; (8006a24 <HAL_RCC_OscConfig+0x244>)
 8006994:	2200      	movs	r2, #0
 8006996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006998:	f7fb fe34 	bl	8002604 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699e:	e008      	b.n	80069b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069a0:	f7fb fe30 	bl	8002604 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d901      	bls.n	80069b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e187      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1f0      	bne.n	80069a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d036      	beq.n	8006a38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d2:	4b15      	ldr	r3, [pc, #84]	; (8006a28 <HAL_RCC_OscConfig+0x248>)
 80069d4:	2201      	movs	r2, #1
 80069d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fb fe14 	bl	8002604 <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fb fe10 	bl	8002604 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e167      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f2:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <HAL_RCC_OscConfig+0x240>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x200>
 80069fe:	e01b      	b.n	8006a38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a00:	4b09      	ldr	r3, [pc, #36]	; (8006a28 <HAL_RCC_OscConfig+0x248>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a06:	f7fb fdfd 	bl	8002604 <HAL_GetTick>
 8006a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a0c:	e00e      	b.n	8006a2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a0e:	f7fb fdf9 	bl	8002604 <HAL_GetTick>
 8006a12:	4602      	mov	r2, r0
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d907      	bls.n	8006a2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e150      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	42470000 	.word	0x42470000
 8006a28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a2c:	4b88      	ldr	r3, [pc, #544]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1ea      	bne.n	8006a0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8097 	beq.w	8006b74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a46:	2300      	movs	r3, #0
 8006a48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a4a:	4b81      	ldr	r3, [pc, #516]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	2300      	movs	r3, #0
 8006a58:	60bb      	str	r3, [r7, #8]
 8006a5a:	4b7d      	ldr	r3, [pc, #500]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	4a7c      	ldr	r2, [pc, #496]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6413      	str	r3, [r2, #64]	; 0x40
 8006a66:	4b7a      	ldr	r3, [pc, #488]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	60bb      	str	r3, [r7, #8]
 8006a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a76:	4b77      	ldr	r3, [pc, #476]	; (8006c54 <HAL_RCC_OscConfig+0x474>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d118      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a82:	4b74      	ldr	r3, [pc, #464]	; (8006c54 <HAL_RCC_OscConfig+0x474>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a73      	ldr	r2, [pc, #460]	; (8006c54 <HAL_RCC_OscConfig+0x474>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fb fdb9 	bl	8002604 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a96:	f7fb fdb5 	bl	8002604 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e10c      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa8:	4b6a      	ldr	r3, [pc, #424]	; (8006c54 <HAL_RCC_OscConfig+0x474>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d106      	bne.n	8006aca <HAL_RCC_OscConfig+0x2ea>
 8006abc:	4b64      	ldr	r3, [pc, #400]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac0:	4a63      	ldr	r2, [pc, #396]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006ac2:	f043 0301 	orr.w	r3, r3, #1
 8006ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac8:	e01c      	b.n	8006b04 <HAL_RCC_OscConfig+0x324>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x30c>
 8006ad2:	4b5f      	ldr	r3, [pc, #380]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	4a5e      	ldr	r2, [pc, #376]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	f043 0304 	orr.w	r3, r3, #4
 8006adc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ade:	4b5c      	ldr	r3, [pc, #368]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4a5b      	ldr	r2, [pc, #364]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0x324>
 8006aec:	4b58      	ldr	r3, [pc, #352]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	4a57      	ldr	r2, [pc, #348]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	; 0x70
 8006af8:	4b55      	ldr	r3, [pc, #340]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	4a54      	ldr	r2, [pc, #336]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006afe:	f023 0304 	bic.w	r3, r3, #4
 8006b02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d015      	beq.n	8006b38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fb fd7a 	bl	8002604 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fb fd76 	bl	8002604 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e0cb      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2a:	4b49      	ldr	r3, [pc, #292]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0ee      	beq.n	8006b14 <HAL_RCC_OscConfig+0x334>
 8006b36:	e014      	b.n	8006b62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b38:	f7fb fd64 	bl	8002604 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b3e:	e00a      	b.n	8006b56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b40:	f7fb fd60 	bl	8002604 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e0b5      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b56:	4b3e      	ldr	r3, [pc, #248]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ee      	bne.n	8006b40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b68:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	4a38      	ldr	r2, [pc, #224]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006b6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80a1 	beq.w	8006cc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d05c      	beq.n	8006c44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d141      	bne.n	8006c16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b31      	ldr	r3, [pc, #196]	; (8006c58 <HAL_RCC_OscConfig+0x478>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b98:	f7fb fd34 	bl	8002604 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba0:	f7fb fd30 	bl	8002604 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e087      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bb2:	4b27      	ldr	r3, [pc, #156]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69da      	ldr	r2, [r3, #28]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	019b      	lsls	r3, r3, #6
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	061b      	lsls	r3, r3, #24
 8006be2:	491b      	ldr	r1, [pc, #108]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <HAL_RCC_OscConfig+0x478>)
 8006bea:	2201      	movs	r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bee:	f7fb fd09 	bl	8002604 <HAL_GetTick>
 8006bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf6:	f7fb fd05 	bl	8002604 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e05c      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c08:	4b11      	ldr	r3, [pc, #68]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x416>
 8006c14:	e054      	b.n	8006cc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c16:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <HAL_RCC_OscConfig+0x478>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1c:	f7fb fcf2 	bl	8002604 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c24:	f7fb fcee 	bl	8002604 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e045      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <HAL_RCC_OscConfig+0x470>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x444>
 8006c42:	e03d      	b.n	8006cc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d107      	bne.n	8006c5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e038      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
 8006c50:	40023800 	.word	0x40023800
 8006c54:	40007000 	.word	0x40007000
 8006c58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <HAL_RCC_OscConfig+0x4ec>)
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d028      	beq.n	8006cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d121      	bne.n	8006cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d11a      	bne.n	8006cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d111      	bne.n	8006cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca2:	085b      	lsrs	r3, r3, #1
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d107      	bne.n	8006cbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40023800 	.word	0x40023800

08006cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0cc      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce4:	4b68      	ldr	r3, [pc, #416]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d90c      	bls.n	8006d0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf2:	4b65      	ldr	r3, [pc, #404]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cfa:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d001      	beq.n	8006d0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0b8      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d020      	beq.n	8006d5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0304 	and.w	r3, r3, #4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	4a58      	ldr	r2, [pc, #352]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d3c:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4a52      	ldr	r2, [pc, #328]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d48:	4b50      	ldr	r3, [pc, #320]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	494d      	ldr	r1, [pc, #308]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d044      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	4b47      	ldr	r3, [pc, #284]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d119      	bne.n	8006dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e07f      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d003      	beq.n	8006d8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	d107      	bne.n	8006d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d8e:	4b3f      	ldr	r3, [pc, #252]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e06f      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9e:	4b3b      	ldr	r3, [pc, #236]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e067      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dae:	4b37      	ldr	r3, [pc, #220]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f023 0203 	bic.w	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4934      	ldr	r1, [pc, #208]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dc0:	f7fb fc20 	bl	8002604 <HAL_GetTick>
 8006dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc6:	e00a      	b.n	8006dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc8:	f7fb fc1c 	bl	8002604 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e04f      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dde:	4b2b      	ldr	r3, [pc, #172]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 020c 	and.w	r2, r3, #12
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d1eb      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d20c      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfe:	4b22      	ldr	r3, [pc, #136]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e06:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <HAL_RCC_ClockConfig+0x1b8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	683a      	ldr	r2, [r7, #0]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d001      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e032      	b.n	8006e7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0304 	and.w	r3, r3, #4
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	4916      	ldr	r1, [pc, #88]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0308 	and.w	r3, r3, #8
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	490e      	ldr	r1, [pc, #56]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e56:	f000 f821 	bl	8006e9c <HAL_RCC_GetSysClockFreq>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <HAL_RCC_ClockConfig+0x1bc>)
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	f003 030f 	and.w	r3, r3, #15
 8006e66:	490a      	ldr	r1, [pc, #40]	; (8006e90 <HAL_RCC_ClockConfig+0x1c0>)
 8006e68:	5ccb      	ldrb	r3, [r1, r3]
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_RCC_ClockConfig+0x1c4>)
 8006e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_RCC_ClockConfig+0x1c8>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fb fb80 	bl	800257c <HAL_InitTick>

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	40023c00 	.word	0x40023c00
 8006e8c:	40023800 	.word	0x40023800
 8006e90:	0800dfec 	.word	0x0800dfec
 8006e94:	20000024 	.word	0x20000024
 8006e98:	20000028 	.word	0x20000028

08006e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea0:	b094      	sub	sp, #80	; 0x50
 8006ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eac:	2300      	movs	r3, #0
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eb4:	4b79      	ldr	r3, [pc, #484]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 030c 	and.w	r3, r3, #12
 8006ebc:	2b08      	cmp	r3, #8
 8006ebe:	d00d      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x40>
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	f200 80e1 	bhi.w	8007088 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d003      	beq.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006ece:	e0db      	b.n	8007088 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ed0:	4b73      	ldr	r3, [pc, #460]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ed2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ed4:	e0db      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ed6:	4b73      	ldr	r3, [pc, #460]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006ed8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eda:	e0d8      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006edc:	4b6f      	ldr	r3, [pc, #444]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ee4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ee6:	4b6d      	ldr	r3, [pc, #436]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d063      	beq.n	8006fba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ef2:	4b6a      	ldr	r3, [pc, #424]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	2200      	movs	r2, #0
 8006efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006efc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30
 8006f06:	2300      	movs	r3, #0
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	f04f 0000 	mov.w	r0, #0
 8006f16:	f04f 0100 	mov.w	r1, #0
 8006f1a:	0159      	lsls	r1, r3, #5
 8006f1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f20:	0150      	lsls	r0, r2, #5
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4621      	mov	r1, r4
 8006f28:	1a51      	subs	r1, r2, r1
 8006f2a:	6139      	str	r1, [r7, #16]
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f32:	617b      	str	r3, [r7, #20]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f40:	4659      	mov	r1, fp
 8006f42:	018b      	lsls	r3, r1, #6
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	018a      	lsls	r2, r1, #6
 8006f4e:	4651      	mov	r1, sl
 8006f50:	ebb2 0801 	subs.w	r8, r2, r1
 8006f54:	4659      	mov	r1, fp
 8006f56:	eb63 0901 	sbc.w	r9, r3, r1
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f6e:	4690      	mov	r8, r2
 8006f70:	4699      	mov	r9, r3
 8006f72:	4623      	mov	r3, r4
 8006f74:	eb18 0303 	adds.w	r3, r8, r3
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	462b      	mov	r3, r5
 8006f7c:	eb49 0303 	adc.w	r3, r9, r3
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	f04f 0200 	mov.w	r2, #0
 8006f86:	f04f 0300 	mov.w	r3, #0
 8006f8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f8e:	4629      	mov	r1, r5
 8006f90:	024b      	lsls	r3, r1, #9
 8006f92:	4621      	mov	r1, r4
 8006f94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f98:	4621      	mov	r1, r4
 8006f9a:	024a      	lsls	r2, r1, #9
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fac:	f7f9 fe04 	bl	8000bb8 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb8:	e058      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fba:	4b38      	ldr	r3, [pc, #224]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fca:	623b      	str	r3, [r7, #32]
 8006fcc:	2300      	movs	r3, #0
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fd4:	4642      	mov	r2, r8
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	f04f 0000 	mov.w	r0, #0
 8006fdc:	f04f 0100 	mov.w	r1, #0
 8006fe0:	0159      	lsls	r1, r3, #5
 8006fe2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fe6:	0150      	lsls	r0, r2, #5
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4641      	mov	r1, r8
 8006fee:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007004:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007008:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800700c:	ebb2 040a 	subs.w	r4, r2, sl
 8007010:	eb63 050b 	sbc.w	r5, r3, fp
 8007014:	f04f 0200 	mov.w	r2, #0
 8007018:	f04f 0300 	mov.w	r3, #0
 800701c:	00eb      	lsls	r3, r5, #3
 800701e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007022:	00e2      	lsls	r2, r4, #3
 8007024:	4614      	mov	r4, r2
 8007026:	461d      	mov	r5, r3
 8007028:	4643      	mov	r3, r8
 800702a:	18e3      	adds	r3, r4, r3
 800702c:	603b      	str	r3, [r7, #0]
 800702e:	464b      	mov	r3, r9
 8007030:	eb45 0303 	adc.w	r3, r5, r3
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	f04f 0200 	mov.w	r2, #0
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007042:	4629      	mov	r1, r5
 8007044:	028b      	lsls	r3, r1, #10
 8007046:	4621      	mov	r1, r4
 8007048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800704c:	4621      	mov	r1, r4
 800704e:	028a      	lsls	r2, r1, #10
 8007050:	4610      	mov	r0, r2
 8007052:	4619      	mov	r1, r3
 8007054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007056:	2200      	movs	r2, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	61fa      	str	r2, [r7, #28]
 800705c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007060:	f7f9 fdaa 	bl	8000bb8 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800706c:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_GetSysClockFreq+0x200>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	0c1b      	lsrs	r3, r3, #16
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	3301      	adds	r3, #1
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800707c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007086:	e002      	b.n	800708e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800708a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800708c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800708e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007090:	4618      	mov	r0, r3
 8007092:	3750      	adds	r7, #80	; 0x50
 8007094:	46bd      	mov	sp, r7
 8007096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709a:	bf00      	nop
 800709c:	40023800 	.word	0x40023800
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	007a1200 	.word	0x007a1200

080070a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000024 	.word	0x20000024

080070c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070c4:	f7ff fff0 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	0a9b      	lsrs	r3, r3, #10
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4903      	ldr	r1, [pc, #12]	; (80070e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	0800dffc 	.word	0x0800dffc

080070e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800710c:	2b00      	cmp	r3, #0
 800710e:	d038      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007110:	4b68      	ldr	r3, [pc, #416]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007112:	2200      	movs	r2, #0
 8007114:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007116:	f7fb fa75 	bl	8002604 <HAL_GetTick>
 800711a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800711c:	e008      	b.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800711e:	f7fb fa71 	bl	8002604 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e0bd      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007130:	4b61      	ldr	r3, [pc, #388]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1f0      	bne.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	019b      	lsls	r3, r3, #6
 8007146:	431a      	orrs	r2, r3
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	071b      	lsls	r3, r3, #28
 800714e:	495a      	ldr	r1, [pc, #360]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007156:	4b57      	ldr	r3, [pc, #348]	; (80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007158:	2201      	movs	r2, #1
 800715a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800715c:	f7fb fa52 	bl	8002604 <HAL_GetTick>
 8007160:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007164:	f7fb fa4e 	bl	8002604 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e09a      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007176:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 8083 	beq.w	8007296 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	4b48      	ldr	r3, [pc, #288]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007198:	4a47      	ldr	r2, [pc, #284]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800719e:	6413      	str	r3, [r2, #64]	; 0x40
 80071a0:	4b45      	ldr	r3, [pc, #276]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ac:	4b43      	ldr	r3, [pc, #268]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a42      	ldr	r2, [pc, #264]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071b8:	f7fb fa24 	bl	8002604 <HAL_GetTick>
 80071bc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071c0:	f7fb fa20 	bl	8002604 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e06c      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071d2:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0f0      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071de:	4b36      	ldr	r3, [pc, #216]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071e6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d02f      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d028      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80071fc:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007204:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007206:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800720c:	4b2c      	ldr	r3, [pc, #176]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007212:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007218:	4b27      	ldr	r3, [pc, #156]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d114      	bne.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007224:	f7fb f9ee 	bl	8002604 <HAL_GetTick>
 8007228:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800722a:	e00a      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800722c:	f7fb f9ea 	bl	8002604 <HAL_GetTick>
 8007230:	4602      	mov	r2, r0
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	f241 3288 	movw	r2, #5000	; 0x1388
 800723a:	4293      	cmp	r3, r2
 800723c:	d901      	bls.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e034      	b.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007242:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0ee      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800725a:	d10d      	bne.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800725c:	4b16      	ldr	r3, [pc, #88]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800726c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007270:	4911      	ldr	r1, [pc, #68]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007272:	4313      	orrs	r3, r2
 8007274:	608b      	str	r3, [r1, #8]
 8007276:	e005      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007278:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	4a0e      	ldr	r2, [pc, #56]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007282:	6093      	str	r3, [r2, #8]
 8007284:	4b0c      	ldr	r3, [pc, #48]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007290:	4909      	ldr	r1, [pc, #36]	; (80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007292:	4313      	orrs	r3, r2
 8007294:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7d1a      	ldrb	r2, [r3, #20]
 80072a6:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80072a8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	42470068 	.word	0x42470068
 80072b8:	40023800 	.word	0x40023800
 80072bc:	40007000 	.word	0x40007000
 80072c0:	42470e40 	.word	0x42470e40
 80072c4:	424711e0 	.word	0x424711e0

080072c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d141      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072e6:	4b25      	ldr	r3, [pc, #148]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d006      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072fc:	d131      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80072fe:	4b20      	ldr	r3, [pc, #128]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007300:	617b      	str	r3, [r7, #20]
          break;
 8007302:	e031      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007304:	4b1d      	ldr	r3, [pc, #116]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007310:	d109      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007312:	4b1a      	ldr	r3, [pc, #104]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800731c:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	613b      	str	r3, [r7, #16]
 8007324:	e008      	b.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800732c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007330:	4a15      	ldr	r2, [pc, #84]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8007332:	fbb2 f3f3 	udiv	r3, r2, r3
 8007336:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800733a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800733e:	099b      	lsrs	r3, r3, #6
 8007340:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800734e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007352:	0f1b      	lsrs	r3, r3, #28
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	fbb2 f3f3 	udiv	r3, r2, r3
 800735e:	617b      	str	r3, [r7, #20]
          break;
 8007360:	e002      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]
          break;
 8007366:	bf00      	nop
        }
      }
      break;
 8007368:	e000      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 800736a:	bf00      	nop
    }
  }
  return frequency;
 800736c:	697b      	ldr	r3, [r7, #20]
}
 800736e:	4618      	mov	r0, r3
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40023800 	.word	0x40023800
 8007380:	00bb8000 	.word	0x00bb8000
 8007384:	007a1200 	.word	0x007a1200
 8007388:	00f42400 	.word	0x00f42400

0800738c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e07b      	b.n	8007496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ae:	d009      	beq.n	80073c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
 80073b6:	e005      	b.n	80073c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fa fdb6 	bl	8001f50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0104 	and.w	r1, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	f003 0210 	and.w	r2, r3, #16
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e041      	b.n	8007534 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d106      	bne.n	80074ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fa ffab 	bl	8002420 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3304      	adds	r3, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 fa9d 	bl	8007a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d001      	beq.n	8007554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e044      	b.n	80075de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0201 	orr.w	r2, r2, #1
 800756a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <HAL_TIM_Base_Start_IT+0xb0>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d018      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757e:	d013      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1a      	ldr	r2, [pc, #104]	; (80075f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x6c>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a19      	ldr	r2, [pc, #100]	; (80075f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x6c>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a17      	ldr	r2, [pc, #92]	; (80075f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_TIM_Base_Start_IT+0x6c>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a16      	ldr	r2, [pc, #88]	; (80075fc <HAL_TIM_Base_Start_IT+0xc0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d111      	bne.n	80075cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0307 	and.w	r3, r3, #7
 80075b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d010      	beq.n	80075dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	e007      	b.n	80075dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3714      	adds	r7, #20
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	40010000 	.word	0x40010000
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800
 80075f8:	40000c00 	.word	0x40000c00
 80075fc:	40014000 	.word	0x40014000

08007600 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a1a      	ldr	r2, [r3, #32]
 800761e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007622:	4013      	ands	r3, r2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <HAL_TIM_Base_Stop_IT+0x48>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	f240 4344 	movw	r3, #1092	; 0x444
 8007632:	4013      	ands	r3, r2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d107      	bne.n	8007648 <HAL_TIM_Base_Stop_IT+0x48>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0201 	bic.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f003 0302 	and.w	r3, r3, #2
 800767c:	2b00      	cmp	r3, #0
 800767e:	d020      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d01b      	beq.n	80076c2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f06f 0202 	mvn.w	r2, #2
 8007692:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 f999 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
 80076ae:	e005      	b.n	80076bc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f98b 	bl	80079cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f99c 	bl	80079f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f003 0304 	and.w	r3, r3, #4
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d020      	beq.n	800770e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d01b      	beq.n	800770e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f06f 0204 	mvn.w	r2, #4
 80076de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f973 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
 80076fa:	e005      	b.n	8007708 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f965 	bl	80079cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f976 	bl	80079f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f003 0308 	and.w	r3, r3, #8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d020      	beq.n	800775a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01b      	beq.n	800775a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f06f 0208 	mvn.w	r2, #8
 800772a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2204      	movs	r2, #4
 8007730:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d003      	beq.n	8007748 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f94d 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
 8007746:	e005      	b.n	8007754 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f93f 	bl	80079cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f950 	bl	80079f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f003 0310 	and.w	r3, r3, #16
 8007760:	2b00      	cmp	r3, #0
 8007762:	d020      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	d01b      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f06f 0210 	mvn.w	r2, #16
 8007776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2208      	movs	r2, #8
 800777c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007788:	2b00      	cmp	r3, #0
 800778a:	d003      	beq.n	8007794 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f927 	bl	80079e0 <HAL_TIM_IC_CaptureCallback>
 8007792:	e005      	b.n	80077a0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f919 	bl	80079cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f92a 	bl	80079f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f003 0301 	and.w	r3, r3, #1
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00c      	beq.n	80077ca <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d007      	beq.n	80077ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f06f 0201 	mvn.w	r2, #1
 80077c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7fa fad9 	bl	8001d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d007      	beq.n	80077ee <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fab5 	bl	8007d58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00c      	beq.n	8007812 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800780a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f8fb 	bl	8007a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00c      	beq.n	8007836 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f06f 0220 	mvn.w	r2, #32
 800782e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa87 	bl	8007d44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_TIM_ConfigClockSource+0x1c>
 8007856:	2302      	movs	r3, #2
 8007858:	e0b4      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x186>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007878:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007880:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007892:	d03e      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0xd4>
 8007894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007898:	f200 8087 	bhi.w	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 800789c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a0:	f000 8086 	beq.w	80079b0 <HAL_TIM_ConfigClockSource+0x172>
 80078a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a8:	d87f      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078aa:	2b70      	cmp	r3, #112	; 0x70
 80078ac:	d01a      	beq.n	80078e4 <HAL_TIM_ConfigClockSource+0xa6>
 80078ae:	2b70      	cmp	r3, #112	; 0x70
 80078b0:	d87b      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078b2:	2b60      	cmp	r3, #96	; 0x60
 80078b4:	d050      	beq.n	8007958 <HAL_TIM_ConfigClockSource+0x11a>
 80078b6:	2b60      	cmp	r3, #96	; 0x60
 80078b8:	d877      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078ba:	2b50      	cmp	r3, #80	; 0x50
 80078bc:	d03c      	beq.n	8007938 <HAL_TIM_ConfigClockSource+0xfa>
 80078be:	2b50      	cmp	r3, #80	; 0x50
 80078c0:	d873      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d058      	beq.n	8007978 <HAL_TIM_ConfigClockSource+0x13a>
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d86f      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078ca:	2b30      	cmp	r3, #48	; 0x30
 80078cc:	d064      	beq.n	8007998 <HAL_TIM_ConfigClockSource+0x15a>
 80078ce:	2b30      	cmp	r3, #48	; 0x30
 80078d0:	d86b      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d060      	beq.n	8007998 <HAL_TIM_ConfigClockSource+0x15a>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d867      	bhi.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d05c      	beq.n	8007998 <HAL_TIM_ConfigClockSource+0x15a>
 80078de:	2b10      	cmp	r3, #16
 80078e0:	d05a      	beq.n	8007998 <HAL_TIM_ConfigClockSource+0x15a>
 80078e2:	e062      	b.n	80079aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078f4:	f000 f998 	bl	8007c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007906:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	609a      	str	r2, [r3, #8]
      break;
 8007910:	e04f      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007922:	f000 f981 	bl	8007c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007934:	609a      	str	r2, [r3, #8]
      break;
 8007936:	e03c      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007944:	461a      	mov	r2, r3
 8007946:	f000 f8f5 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2150      	movs	r1, #80	; 0x50
 8007950:	4618      	mov	r0, r3
 8007952:	f000 f94e 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 8007956:	e02c      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007964:	461a      	mov	r2, r3
 8007966:	f000 f914 	bl	8007b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2160      	movs	r1, #96	; 0x60
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f93e 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 8007976:	e01c      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007984:	461a      	mov	r2, r3
 8007986:	f000 f8d5 	bl	8007b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2140      	movs	r1, #64	; 0x40
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f92e 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 8007996:	e00c      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4619      	mov	r1, r3
 80079a2:	4610      	mov	r0, r2
 80079a4:	f000 f925 	bl	8007bf2 <TIM_ITRx_SetConfig>
      break;
 80079a8:	e003      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
      break;
 80079ae:	e000      	b.n	80079b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d4:	bf00      	nop
 80079d6:	370c      	adds	r7, #12
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a3a      	ldr	r2, [pc, #232]	; (8007b18 <TIM_Base_SetConfig+0xfc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d00f      	beq.n	8007a54 <TIM_Base_SetConfig+0x38>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3a:	d00b      	beq.n	8007a54 <TIM_Base_SetConfig+0x38>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a37      	ldr	r2, [pc, #220]	; (8007b1c <TIM_Base_SetConfig+0x100>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d007      	beq.n	8007a54 <TIM_Base_SetConfig+0x38>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a36      	ldr	r2, [pc, #216]	; (8007b20 <TIM_Base_SetConfig+0x104>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d003      	beq.n	8007a54 <TIM_Base_SetConfig+0x38>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a35      	ldr	r2, [pc, #212]	; (8007b24 <TIM_Base_SetConfig+0x108>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d108      	bne.n	8007a66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a2b      	ldr	r2, [pc, #172]	; (8007b18 <TIM_Base_SetConfig+0xfc>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d01b      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a74:	d017      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <TIM_Base_SetConfig+0x100>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a27      	ldr	r2, [pc, #156]	; (8007b20 <TIM_Base_SetConfig+0x104>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00f      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a26      	ldr	r2, [pc, #152]	; (8007b24 <TIM_Base_SetConfig+0x108>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00b      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a25      	ldr	r2, [pc, #148]	; (8007b28 <TIM_Base_SetConfig+0x10c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a24      	ldr	r2, [pc, #144]	; (8007b2c <TIM_Base_SetConfig+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_Base_SetConfig+0x8a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a23      	ldr	r2, [pc, #140]	; (8007b30 <TIM_Base_SetConfig+0x114>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a0e      	ldr	r2, [pc, #56]	; (8007b18 <TIM_Base_SetConfig+0xfc>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d103      	bne.n	8007aec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691a      	ldr	r2, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d105      	bne.n	8007b0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f023 0201 	bic.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	611a      	str	r2, [r3, #16]
  }
}
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40014000 	.word	0x40014000
 8007b2c:	40014400 	.word	0x40014400
 8007b30:	40014800 	.word	0x40014800

08007b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 030a 	bic.w	r3, r3, #10
 8007b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f023 0210 	bic.w	r2, r3, #16
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	031b      	lsls	r3, r3, #12
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	621a      	str	r2, [r3, #32]
}
 8007be6:	bf00      	nop
 8007be8:	371c      	adds	r7, #28
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	f043 0307 	orr.w	r3, r3, #7
 8007c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	021a      	lsls	r2, r3, #8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	609a      	str	r2, [r3, #8]
}
 8007c5c:	bf00      	nop
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	e050      	b.n	8007d22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1c      	ldr	r2, [pc, #112]	; (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d018      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ccc:	d013      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a18      	ldr	r2, [pc, #96]	; (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a15      	ldr	r2, [pc, #84]	; (8007d3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d004      	beq.n	8007cf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d10c      	bne.n	8007d10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40000c00 	.word	0x40000c00
 8007d40:	40014000 	.word	0x40014000

08007d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	f107 001c 	add.w	r0, r7, #28
 8007d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d123      	bne.n	8007dce <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007dae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d105      	bne.n	8007dc2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9dc 	bl	8008180 <USB_CoreReset>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73fb      	strb	r3, [r7, #15]
 8007dcc:	e01b      	b.n	8007e06 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9d0 	bl	8008180 <USB_CoreReset>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007de4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d106      	bne.n	8007dfa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
 8007df8:	e005      	b.n	8007e06 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007e06:	7fbb      	ldrb	r3, [r7, #30]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d10b      	bne.n	8007e24 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f043 0206 	orr.w	r2, r3, #6
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f043 0220 	orr.w	r2, r3, #32
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e30:	b004      	add	sp, #16
 8007e32:	4770      	bx	lr

08007e34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f043 0201 	orr.w	r2, r3, #1
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e56:	b480      	push	{r7}
 8007e58:	b083      	sub	sp, #12
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d115      	bne.n	8007ec6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ea6:	200a      	movs	r0, #10
 8007ea8:	f7fa fbb8 	bl	800261c <HAL_Delay>
      ms += 10U;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	330a      	adds	r3, #10
 8007eb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f956 	bl	8008164 <USB_GetMode>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d01e      	beq.n	8007efc <USB_SetCurrentMode+0x84>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2bc7      	cmp	r3, #199	; 0xc7
 8007ec2:	d9f0      	bls.n	8007ea6 <USB_SetCurrentMode+0x2e>
 8007ec4:	e01a      	b.n	8007efc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ec6:	78fb      	ldrb	r3, [r7, #3]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d115      	bne.n	8007ef8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ed8:	200a      	movs	r0, #10
 8007eda:	f7fa fb9f 	bl	800261c <HAL_Delay>
      ms += 10U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	330a      	adds	r3, #10
 8007ee2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f93d 	bl	8008164 <USB_GetMode>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <USB_SetCurrentMode+0x84>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2bc7      	cmp	r3, #199	; 0xc7
 8007ef4:	d9f0      	bls.n	8007ed8 <USB_SetCurrentMode+0x60>
 8007ef6:	e001      	b.n	8007efc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e005      	b.n	8007f08 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2bc8      	cmp	r3, #200	; 0xc8
 8007f00:	d101      	bne.n	8007f06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3301      	adds	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f2a:	d901      	bls.n	8007f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e01b      	b.n	8007f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	daf2      	bge.n	8007f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	019b      	lsls	r3, r3, #6
 8007f40:	f043 0220 	orr.w	r2, r3, #32
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f54:	d901      	bls.n	8007f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e006      	b.n	8007f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0320 	and.w	r3, r3, #32
 8007f62:	2b20      	cmp	r3, #32
 8007f64:	d0f0      	beq.n	8007f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007f8c:	d901      	bls.n	8007f92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e018      	b.n	8007fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	daf2      	bge.n	8007f80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2210      	movs	r2, #16
 8007fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007fb0:	d901      	bls.n	8007fb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e006      	b.n	8007fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0310 	and.w	r3, r3, #16
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d0f0      	beq.n	8007fa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b089      	sub	sp, #36	; 0x24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	4611      	mov	r1, r2
 8007fdc:	461a      	mov	r2, r3
 8007fde:	460b      	mov	r3, r1
 8007fe0:	71fb      	strb	r3, [r7, #7]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007fee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d123      	bne.n	800803e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ff6:	88bb      	ldrh	r3, [r7, #4]
 8007ff8:	3303      	adds	r3, #3
 8007ffa:	089b      	lsrs	r3, r3, #2
 8007ffc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
 8008002:	e018      	b.n	8008036 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	031a      	lsls	r2, r3, #12
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	4413      	add	r3, r2
 800800c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008010:	461a      	mov	r2, r3
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	3301      	adds	r3, #1
 8008022:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	3301      	adds	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	3301      	adds	r3, #1
 800802e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	3301      	adds	r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	429a      	cmp	r2, r3
 800803c:	d3e2      	bcc.n	8008004 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3724      	adds	r7, #36	; 0x24
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800804c:	b480      	push	{r7}
 800804e:	b08b      	sub	sp, #44	; 0x2c
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	4613      	mov	r3, r2
 8008058:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008062:	88fb      	ldrh	r3, [r7, #6]
 8008064:	089b      	lsrs	r3, r3, #2
 8008066:	b29b      	uxth	r3, r3
 8008068:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008072:	2300      	movs	r3, #0
 8008074:	623b      	str	r3, [r7, #32]
 8008076:	e014      	b.n	80080a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008082:	601a      	str	r2, [r3, #0]
    pDest++;
 8008084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008086:	3301      	adds	r3, #1
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	3301      	adds	r3, #1
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	3301      	adds	r3, #1
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	3301      	adds	r3, #1
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	3301      	adds	r3, #1
 80080a0:	623b      	str	r3, [r7, #32]
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3e6      	bcc.n	8008078 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080aa:	8bfb      	ldrh	r3, [r7, #30]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01e      	beq.n	80080ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080ba:	461a      	mov	r2, r3
 80080bc:	f107 0310 	add.w	r3, r7, #16
 80080c0:	6812      	ldr	r2, [r2, #0]
 80080c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	701a      	strb	r2, [r3, #0]
      i++;
 80080d6:	6a3b      	ldr	r3, [r7, #32]
 80080d8:	3301      	adds	r3, #1
 80080da:	623b      	str	r3, [r7, #32]
      pDest++;
 80080dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080de:	3301      	adds	r3, #1
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80080e2:	8bfb      	ldrh	r3, [r7, #30]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80080e8:	8bfb      	ldrh	r3, [r7, #30]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1ea      	bne.n	80080c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	372c      	adds	r7, #44	; 0x2c
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4013      	ands	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008114:	68fb      	ldr	r3, [r7, #12]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	4013      	ands	r3, r2
 8008154:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008156:	68bb      	ldr	r3, [r7, #8]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3714      	adds	r7, #20
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0301 	and.w	r3, r3, #1
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008198:	d901      	bls.n	800819e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e01b      	b.n	80081d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	daf2      	bge.n	800818c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f043 0201 	orr.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80081c2:	d901      	bls.n	80081c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e006      	b.n	80081d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d0f0      	beq.n	80081b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
	...

080081e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081e4:	b084      	sub	sp, #16
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b086      	sub	sp, #24
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80081f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008204:	461a      	mov	r2, r3
 8008206:	2300      	movs	r3, #0
 8008208:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d119      	bne.n	800826e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800823a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10a      	bne.n	8008258 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008250:	f043 0304 	orr.w	r3, r3, #4
 8008254:	6013      	str	r3, [r2, #0]
 8008256:	e014      	b.n	8008282 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008266:	f023 0304 	bic.w	r3, r3, #4
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e009      	b.n	8008282 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800827c:	f023 0304 	bic.w	r3, r3, #4
 8008280:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008282:	2110      	movs	r1, #16
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff fe43 	bl	8007f10 <USB_FlushTxFifo>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff fe6d 	bl	8007f74 <USB_FlushRxFifo>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80082a4:	2300      	movs	r3, #0
 80082a6:	613b      	str	r3, [r7, #16]
 80082a8:	e015      	b.n	80082d6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082b6:	461a      	mov	r2, r3
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082bc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ca:	461a      	mov	r2, r3
 80082cc:	2300      	movs	r3, #0
 80082ce:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	3301      	adds	r3, #1
 80082d4:	613b      	str	r3, [r7, #16]
 80082d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80082da:	461a      	mov	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4293      	cmp	r3, r2
 80082e0:	d3e3      	bcc.n	80082aa <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ee:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2280      	movs	r2, #128	; 0x80
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a0e      	ldr	r2, [pc, #56]	; (8008334 <USB_HostInit+0x150>)
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <USB_HostInit+0x154>)
 8008300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008308:	2b00      	cmp	r3, #0
 800830a:	d105      	bne.n	8008318 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	f043 0210 	orr.w	r2, r3, #16
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699a      	ldr	r2, [r3, #24]
 800831c:	4b07      	ldr	r3, [pc, #28]	; (800833c <USB_HostInit+0x158>)
 800831e:	4313      	orrs	r3, r2
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008330:	b004      	add	sp, #16
 8008332:	4770      	bx	lr
 8008334:	00600080 	.word	0x00600080
 8008338:	004000e0 	.word	0x004000e0
 800833c:	a3200008 	.word	0xa3200008

08008340 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	78fb      	ldrb	r3, [r7, #3]
 800836e:	f003 0303 	and.w	r3, r3, #3
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008378:	4313      	orrs	r3, r2
 800837a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d107      	bne.n	8008392 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008388:	461a      	mov	r2, r3
 800838a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800838e:	6053      	str	r3, [r2, #4]
 8008390:	e00c      	b.n	80083ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d107      	bne.n	80083a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800839e:	461a      	mov	r2, r3
 80083a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80083a4:	6053      	str	r3, [r2, #4]
 80083a6:	e001      	b.n	80083ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80083da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80083ea:	2064      	movs	r0, #100	; 0x64
 80083ec:	f7fa f916 	bl	800261c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80083f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80083fe:	200a      	movs	r0, #10
 8008400:	f7fa f90c 	bl	800261c <HAL_Delay>

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800840e:	b480      	push	{r7}
 8008410:	b085      	sub	sp, #20
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008432:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800843a:	2b00      	cmp	r3, #0
 800843c:	d109      	bne.n	8008452 <USB_DriveVbus+0x44>
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d106      	bne.n	8008452 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	68fa      	ldr	r2, [r7, #12]
 8008448:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800844c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008450:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845c:	d109      	bne.n	8008472 <USB_DriveVbus+0x64>
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d106      	bne.n	8008472 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800846c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008470:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3714      	adds	r7, #20
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800848c:	2300      	movs	r3, #0
 800848e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	0c5b      	lsrs	r3, r3, #17
 800849e:	f003 0303 	and.w	r3, r3, #3
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	b29b      	uxth	r3, r3
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	461a      	mov	r2, r3
 80084de:	4603      	mov	r3, r0
 80084e0:	70fb      	strb	r3, [r7, #3]
 80084e2:	460b      	mov	r3, r1
 80084e4:	70bb      	strb	r3, [r7, #2]
 80084e6:	4613      	mov	r3, r2
 80084e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80084f2:	78fb      	ldrb	r3, [r7, #3]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	461a      	mov	r2, r3
 8008500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008504:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008506:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800850a:	2b03      	cmp	r3, #3
 800850c:	d867      	bhi.n	80085de <USB_HC_Init+0x10e>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <USB_HC_Init+0x44>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008525 	.word	0x08008525
 8008518:	080085a1 	.word	0x080085a1
 800851c:	08008525 	.word	0x08008525
 8008520:	08008563 	.word	0x08008563
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4413      	add	r3, r2
 800852c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008530:	461a      	mov	r2, r3
 8008532:	f240 439d 	movw	r3, #1181	; 0x49d
 8008536:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008538:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800853c:	2b00      	cmp	r3, #0
 800853e:	da51      	bge.n	80085e4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	78fa      	ldrb	r2, [r7, #3]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	440a      	add	r2, r1
 8008556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800855a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008560:	e040      	b.n	80085e4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008562:	78fb      	ldrb	r3, [r7, #3]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	461a      	mov	r2, r3
 8008570:	f240 639d 	movw	r3, #1693	; 0x69d
 8008574:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008576:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800857a:	2b00      	cmp	r3, #0
 800857c:	da34      	bge.n	80085e8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	4413      	add	r3, r2
 8008586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	0151      	lsls	r1, r2, #5
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	440a      	add	r2, r1
 8008594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800859c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800859e:	e023      	b.n	80085e8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80085a0:	78fb      	ldrb	r3, [r7, #3]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085ac:	461a      	mov	r2, r3
 80085ae:	f240 2325 	movw	r3, #549	; 0x225
 80085b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80085b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	da17      	bge.n	80085ec <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085d6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80085da:	60d3      	str	r3, [r2, #12]
      }
      break;
 80085dc:	e006      	b.n	80085ec <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	77fb      	strb	r3, [r7, #31]
      break;
 80085e2:	e004      	b.n	80085ee <USB_HC_Init+0x11e>
      break;
 80085e4:	bf00      	nop
 80085e6:	e002      	b.n	80085ee <USB_HC_Init+0x11e>
      break;
 80085e8:	bf00      	nop
 80085ea:	e000      	b.n	80085ee <USB_HC_Init+0x11e>
      break;
 80085ec:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80085ee:	78fb      	ldrb	r3, [r7, #3]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fa:	461a      	mov	r2, r3
 80085fc:	2300      	movs	r3, #0
 80085fe:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	440a      	add	r2, r1
 8008616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800861a:	f043 0302 	orr.w	r3, r3, #2
 800861e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008626:	699a      	ldr	r2, [r3, #24]
 8008628:	78fb      	ldrb	r3, [r7, #3]
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	2101      	movs	r1, #1
 8008630:	fa01 f303 	lsl.w	r3, r1, r3
 8008634:	6939      	ldr	r1, [r7, #16]
 8008636:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800863a:	4313      	orrs	r3, r2
 800863c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800864a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800864e:	2b00      	cmp	r3, #0
 8008650:	da03      	bge.n	800865a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	e001      	b.n	800865e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7ff ff0e 	bl	8008480 <USB_GetHostSpeed>
 8008664:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800866a:	2b02      	cmp	r3, #2
 800866c:	d106      	bne.n	800867c <USB_HC_Init+0x1ac>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d003      	beq.n	800867c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	e001      	b.n	8008680 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008680:	787b      	ldrb	r3, [r7, #1]
 8008682:	059b      	lsls	r3, r3, #22
 8008684:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008688:	78bb      	ldrb	r3, [r7, #2]
 800868a:	02db      	lsls	r3, r3, #11
 800868c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008690:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008692:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008696:	049b      	lsls	r3, r3, #18
 8008698:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800869c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800869e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80086a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80086a4:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086ae:	78fa      	ldrb	r2, [r7, #3]
 80086b0:	0151      	lsls	r1, r2, #5
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	440a      	add	r2, r1
 80086b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80086ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80086be:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80086c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d003      	beq.n	80086d0 <USB_HC_Init+0x200>
 80086c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d10f      	bne.n	80086f0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	78fa      	ldrb	r2, [r7, #3]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80086f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop

080086fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b08c      	sub	sp, #48	; 0x30
 8008700:	af02      	add	r7, sp, #8
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	4613      	mov	r3, r2
 8008708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008718:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	799b      	ldrb	r3, [r3, #6]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d158      	bne.n	80087d4 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008722:	2301      	movs	r3, #1
 8008724:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	78db      	ldrb	r3, [r3, #3]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800872e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	8a92      	ldrh	r2, [r2, #20]
 8008734:	fb03 f202 	mul.w	r2, r3, r2
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61da      	str	r2, [r3, #28]
 800873c:	e079      	b.n	8008832 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	7c9b      	ldrb	r3, [r3, #18]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d130      	bne.n	80087a8 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	2bbc      	cmp	r3, #188	; 0xbc
 800874c:	d918      	bls.n	8008780 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	8a9b      	ldrh	r3, [r3, #20]
 8008752:	461a      	mov	r2, r3
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d003      	beq.n	8008770 <USB_HC_StartXfer+0x74>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d103      	bne.n	8008778 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2202      	movs	r2, #2
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	e05c      	b.n	8008832 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2201      	movs	r2, #1
 800877c:	60da      	str	r2, [r3, #12]
 800877e:	e058      	b.n	8008832 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6a1a      	ldr	r2, [r3, #32]
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d007      	beq.n	80087a0 <USB_HC_StartXfer+0xa4>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d003      	beq.n	80087a0 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	2204      	movs	r2, #4
 800879c:	60da      	str	r2, [r3, #12]
 800879e:	e048      	b.n	8008832 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2203      	movs	r2, #3
 80087a4:	60da      	str	r2, [r3, #12]
 80087a6:	e044      	b.n	8008832 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10d      	bne.n	80087ca <USB_HC_StartXfer+0xce>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	8a92      	ldrh	r2, [r2, #20]
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d907      	bls.n	80087ca <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087bc:	68ba      	ldr	r2, [r7, #8]
 80087be:	8a92      	ldrh	r2, [r2, #20]
 80087c0:	fb03 f202 	mul.w	r2, r3, r2
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	61da      	str	r2, [r3, #28]
 80087c8:	e033      	b.n	8008832 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	61da      	str	r2, [r3, #28]
 80087d2:	e02e      	b.n	8008832 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d018      	beq.n	800880e <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	8a92      	ldrh	r2, [r2, #20]
 80087e4:	4413      	add	r3, r2
 80087e6:	3b01      	subs	r3, #1
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	8a92      	ldrh	r2, [r2, #20]
 80087ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80087f0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80087f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087f4:	8b7b      	ldrh	r3, [r7, #26]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d90b      	bls.n	8008812 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80087fa:	8b7b      	ldrh	r3, [r7, #26]
 80087fc:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80087fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	8a92      	ldrh	r2, [r2, #20]
 8008804:	fb03 f202 	mul.w	r2, r3, r2
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	61da      	str	r2, [r3, #28]
 800880c:	e001      	b.n	8008812 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 800880e:	2301      	movs	r3, #1
 8008810:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	78db      	ldrb	r3, [r3, #3]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d007      	beq.n	800882a <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800881a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	8a92      	ldrh	r2, [r2, #20]
 8008820:	fb03 f202 	mul.w	r2, r3, r2
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	61da      	str	r2, [r3, #28]
 8008828:	e003      	b.n	8008832 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800883a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800883c:	04d9      	lsls	r1, r3, #19
 800883e:	4ba4      	ldr	r3, [pc, #656]	; (8008ad0 <USB_HC_StartXfer+0x3d4>)
 8008840:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008842:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	7d9b      	ldrb	r3, [r3, #22]
 8008848:	075b      	lsls	r3, r3, #29
 800884a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800884e:	69f9      	ldr	r1, [r7, #28]
 8008850:	0148      	lsls	r0, r1, #5
 8008852:	6a39      	ldr	r1, [r7, #32]
 8008854:	4401      	add	r1, r0
 8008856:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800885a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800885c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d009      	beq.n	8008878 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6999      	ldr	r1, [r3, #24]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	4413      	add	r3, r2
 8008870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008874:	460a      	mov	r2, r1
 8008876:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf0c      	ite	eq
 8008888:	2301      	moveq	r3, #1
 800888a:	2300      	movne	r3, #0
 800888c:	b2db      	uxtb	r3, r3
 800888e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	6a3b      	ldr	r3, [r7, #32]
 8008896:	4413      	add	r3, r2
 8008898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	0151      	lsls	r1, r2, #5
 80088a2:	6a3a      	ldr	r2, [r7, #32]
 80088a4:	440a      	add	r2, r1
 80088a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088ae:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	7e7b      	ldrb	r3, [r7, #25]
 80088c0:	075b      	lsls	r3, r3, #29
 80088c2:	69f9      	ldr	r1, [r7, #28]
 80088c4:	0148      	lsls	r0, r1, #5
 80088c6:	6a39      	ldr	r1, [r7, #32]
 80088c8:	4401      	add	r1, r0
 80088ca:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80088ce:	4313      	orrs	r3, r2
 80088d0:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	799b      	ldrb	r3, [r3, #6]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	f040 80c4 	bne.w	8008a64 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	7c5b      	ldrb	r3, [r3, #17]
 80088e0:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80088e6:	4313      	orrs	r3, r2
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	0151      	lsls	r1, r2, #5
 80088ec:	6a3a      	ldr	r2, [r7, #32]
 80088ee:	440a      	add	r2, r1
 80088f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80088f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80088f8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	4413      	add	r3, r2
 8008902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	0151      	lsls	r1, r2, #5
 800890c:	6a3a      	ldr	r2, [r7, #32]
 800890e:	440a      	add	r2, r1
 8008910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008914:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008918:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	79db      	ldrb	r3, [r3, #7]
 800891e:	2b01      	cmp	r3, #1
 8008920:	d123      	bne.n	800896a <USB_HC_StartXfer+0x26e>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	78db      	ldrb	r3, [r3, #3]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d11f      	bne.n	800896a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	015a      	lsls	r2, r3, #5
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	4413      	add	r3, r2
 8008932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	69fa      	ldr	r2, [r7, #28]
 800893a:	0151      	lsls	r1, r2, #5
 800893c:	6a3a      	ldr	r2, [r7, #32]
 800893e:	440a      	add	r2, r1
 8008940:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008948:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	6a3b      	ldr	r3, [r7, #32]
 8008950:	4413      	add	r3, r2
 8008952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	69fa      	ldr	r2, [r7, #28]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	6a3a      	ldr	r2, [r7, #32]
 800895e:	440a      	add	r2, r1
 8008960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008968:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	7c9b      	ldrb	r3, [r3, #18]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d003      	beq.n	800897a <USB_HC_StartXfer+0x27e>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7c9b      	ldrb	r3, [r3, #18]
 8008976:	2b03      	cmp	r3, #3
 8008978:	d117      	bne.n	80089aa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800897e:	2b01      	cmp	r3, #1
 8008980:	d113      	bne.n	80089aa <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	78db      	ldrb	r3, [r3, #3]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d10f      	bne.n	80089aa <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	0151      	lsls	r1, r2, #5
 800899c:	6a3a      	ldr	r2, [r7, #32]
 800899e:	440a      	add	r2, r1
 80089a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089a8:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	7c9b      	ldrb	r3, [r3, #18]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d163      	bne.n	8008a7a <USB_HC_StartXfer+0x37e>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	78db      	ldrb	r3, [r3, #3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d15f      	bne.n	8008a7a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	3b01      	subs	r3, #1
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d859      	bhi.n	8008a78 <USB_HC_StartXfer+0x37c>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <USB_HC_StartXfer+0x2d0>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089dd 	.word	0x080089dd
 80089d0:	080089ff 	.word	0x080089ff
 80089d4:	08008a21 	.word	0x08008a21
 80089d8:	08008a43 	.word	0x08008a43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	69fa      	ldr	r2, [r7, #28]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	6a3a      	ldr	r2, [r7, #32]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089fa:	6053      	str	r3, [r2, #4]
          break;
 80089fc:	e03d      	b.n	8008a7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	69fa      	ldr	r2, [r7, #28]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	6a3a      	ldr	r2, [r7, #32]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a18:	f043 030e 	orr.w	r3, r3, #14
 8008a1c:	6053      	str	r3, [r2, #4]
          break;
 8008a1e:	e02c      	b.n	8008a7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	69fa      	ldr	r2, [r7, #28]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	6a3a      	ldr	r2, [r7, #32]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a3e:	6053      	str	r3, [r2, #4]
          break;
 8008a40:	e01b      	b.n	8008a7a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	69fa      	ldr	r2, [r7, #28]
 8008a52:	0151      	lsls	r1, r2, #5
 8008a54:	6a3a      	ldr	r2, [r7, #32]
 8008a56:	440a      	add	r2, r1
 8008a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a60:	6053      	str	r3, [r2, #4]
          break;
 8008a62:	e00a      	b.n	8008a7a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a70:	461a      	mov	r2, r3
 8008a72:	2300      	movs	r3, #0
 8008a74:	6053      	str	r3, [r2, #4]
 8008a76:	e000      	b.n	8008a7a <USB_HC_StartXfer+0x37e>
          break;
 8008a78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	015a      	lsls	r2, r3, #5
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	4413      	add	r3, r2
 8008a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	78db      	ldrb	r3, [r3, #3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d004      	beq.n	8008aa4 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	e003      	b.n	8008aac <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aaa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ab2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e055      	b.n	8008b7c <USB_HC_StartXfer+0x480>
 8008ad0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	78db      	ldrb	r3, [r3, #3]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d14e      	bne.n	8008b7a <USB_HC_StartXfer+0x47e>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d04a      	beq.n	8008b7a <USB_HC_StartXfer+0x47e>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	79db      	ldrb	r3, [r3, #7]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d146      	bne.n	8008b7a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	7c9b      	ldrb	r3, [r3, #18]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d831      	bhi.n	8008b58 <USB_HC_StartXfer+0x45c>
 8008af4:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <USB_HC_StartXfer+0x400>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b31 	.word	0x08008b31
 8008b04:	08008b0d 	.word	0x08008b0d
 8008b08:	08008b31 	.word	0x08008b31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	3303      	adds	r3, #3
 8008b12:	089b      	lsrs	r3, r3, #2
 8008b14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008b16:	8afa      	ldrh	r2, [r7, #22]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d91c      	bls.n	8008b5c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	f043 0220 	orr.w	r2, r3, #32
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b2e:	e015      	b.n	8008b5c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	3303      	adds	r3, #3
 8008b36:	089b      	lsrs	r3, r3, #2
 8008b38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008b3a:	8afa      	ldrh	r2, [r7, #22]
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d90a      	bls.n	8008b60 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	619a      	str	r2, [r3, #24]
        }
        break;
 8008b56:	e003      	b.n	8008b60 <USB_HC_StartXfer+0x464>

      default:
        break;
 8008b58:	bf00      	nop
 8008b5a:	e002      	b.n	8008b62 <USB_HC_StartXfer+0x466>
        break;
 8008b5c:	bf00      	nop
 8008b5e:	e000      	b.n	8008b62 <USB_HC_StartXfer+0x466>
        break;
 8008b60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6999      	ldr	r1, [r3, #24]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	785a      	ldrb	r2, [r3, #1]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	2000      	movs	r0, #0
 8008b72:	9000      	str	r0, [sp, #0]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fa2b 	bl	8007fd0 <USB_WritePacket>
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3728      	adds	r7, #40	; 0x28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	b29b      	uxth	r3, r3
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b089      	sub	sp, #36	; 0x24
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008bb6:	78fb      	ldrb	r3, [r7, #3]
 8008bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	015a      	lsls	r2, r3, #5
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	0c9b      	lsrs	r3, r3, #18
 8008bce:	f003 0303 	and.w	r3, r3, #3
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	015a      	lsls	r2, r3, #5
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	4413      	add	r3, r2
 8008bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	0fdb      	lsrs	r3, r3, #31
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	0fdb      	lsrs	r3, r3, #31
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d10d      	bne.n	8008c28 <USB_HC_Halt+0x82>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <USB_HC_Halt+0x82>
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d002      	beq.n	8008c24 <USB_HC_Halt+0x7e>
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d101      	bne.n	8008c28 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008c24:	2300      	movs	r3, #0
 8008c26:	e0d8      	b.n	8008dda <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <USB_HC_Halt+0x8e>
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d173      	bne.n	8008d1c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	015a      	lsls	r2, r3, #5
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	0151      	lsls	r1, r2, #5
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	440a      	add	r2, r1
 8008c4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 0320 	and.w	r3, r3, #32
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d14a      	bne.n	8008cf6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d133      	bne.n	8008cd4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	69fa      	ldr	r2, [r7, #28]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	0151      	lsls	r1, r2, #5
 8008c9e:	69fa      	ldr	r2, [r7, #28]
 8008ca0:	440a      	add	r2, r1
 8008ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008caa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cb8:	d82e      	bhi.n	8008d18 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd0:	d0ec      	beq.n	8008cac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cd2:	e081      	b.n	8008dd8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	0151      	lsls	r1, r2, #5
 8008ce6:	69fa      	ldr	r2, [r7, #28]
 8008ce8:	440a      	add	r2, r1
 8008cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cf2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008cf4:	e070      	b.n	8008dd8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	015a      	lsls	r2, r3, #5
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	69fa      	ldr	r2, [r7, #28]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d14:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d16:	e05f      	b.n	8008dd8 <USB_HC_Halt+0x232>
            break;
 8008d18:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008d1a:	e05d      	b.n	8008dd8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	0151      	lsls	r1, r2, #5
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	440a      	add	r2, r1
 8008d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d3a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d133      	bne.n	8008db4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	69fa      	ldr	r2, [r7, #28]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d6a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	0151      	lsls	r1, r2, #5
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	440a      	add	r2, r1
 8008d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d8a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d98:	d81d      	bhi.n	8008dd6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	015a      	lsls	r2, r3, #5
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	4413      	add	r3, r2
 8008da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008db0:	d0ec      	beq.n	8008d8c <USB_HC_Halt+0x1e6>
 8008db2:	e011      	b.n	8008dd8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	e000      	b.n	8008dd8 <USB_HC_Halt+0x232>
          break;
 8008dd6:	bf00      	nop
    }
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3724      	adds	r7, #36	; 0x24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b088      	sub	sp, #32
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff f82b 	bl	8007e56 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e00:	2110      	movs	r1, #16
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff f884 	bl	8007f10 <USB_FlushTxFifo>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7ff f8ae 	bl	8007f74 <USB_FlushRxFifo>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
 8008e26:	e01f      	b.n	8008e68 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e3e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e46:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e4e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	3301      	adds	r3, #1
 8008e66:	61bb      	str	r3, [r7, #24]
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	2b0f      	cmp	r3, #15
 8008e6c:	d9dc      	bls.n	8008e28 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	e034      	b.n	8008ede <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e8a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e92:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e9a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008eba:	d80c      	bhi.n	8008ed6 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ed2:	d0ec      	beq.n	8008eae <USB_StopHost+0xc8>
 8008ed4:	e000      	b.n	8008ed8 <USB_StopHost+0xf2>
        break;
 8008ed6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	3301      	adds	r3, #1
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b0f      	cmp	r3, #15
 8008ee2:	d9c7      	bls.n	8008e74 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eea:	461a      	mov	r2, r3
 8008eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ef0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ef8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fe ff9a 	bl	8007e34 <USB_EnableGlobalInt>

  return ret;
 8008f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3720      	adds	r7, #32
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008f0a:	b590      	push	{r4, r7, lr}
 8008f0c:	b089      	sub	sp, #36	; 0x24
 8008f0e:	af04      	add	r7, sp, #16
 8008f10:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008f12:	2301      	movs	r3, #1
 8008f14:	2202      	movs	r2, #2
 8008f16:	2102      	movs	r1, #2
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fc86 	bl	800982a <USBH_FindInterface>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f22:	7bfb      	ldrb	r3, [r7, #15]
 8008f24:	2bff      	cmp	r3, #255	; 0xff
 8008f26:	d002      	beq.n	8008f2e <USBH_CDC_InterfaceInit+0x24>
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d901      	bls.n	8008f32 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	e13d      	b.n	80091ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	4619      	mov	r1, r3
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fc5b 	bl	80097f2 <USBH_SelectInterface>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008f40:	7bbb      	ldrb	r3, [r7, #14]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008f46:	2302      	movs	r3, #2
 8008f48:	e131      	b.n	80091ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008f50:	2050      	movs	r0, #80	; 0x50
 8008f52:	f002 fe4b 	bl	800bbec <malloc>
 8008f56:	4603      	mov	r3, r0
 8008f58:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e11f      	b.n	80091ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008f6e:	2250      	movs	r2, #80	; 0x50
 8008f70:	2100      	movs	r1, #0
 8008f72:	68b8      	ldr	r0, [r7, #8]
 8008f74:	f003 f948 	bl	800c208 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	211a      	movs	r1, #26
 8008f7e:	fb01 f303 	mul.w	r3, r1, r3
 8008f82:	4413      	add	r3, r2
 8008f84:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	b25b      	sxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	da15      	bge.n	8008fbc <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	211a      	movs	r1, #26
 8008f96:	fb01 f303 	mul.w	r3, r1, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fa0:	781a      	ldrb	r2, [r3, #0]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fa6:	7bfb      	ldrb	r3, [r7, #15]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	211a      	movs	r1, #26
 8008fac:	fb01 f303 	mul.w	r3, r1, r3
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008fb6:	881a      	ldrh	r2, [r3, #0]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 ffcf 	bl	800af66 <USBH_AllocPipe>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	7819      	ldrb	r1, [r3, #0]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	7858      	ldrb	r0, [r3, #1]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	8952      	ldrh	r2, [r2, #10]
 8008fe8:	9202      	str	r2, [sp, #8]
 8008fea:	2203      	movs	r2, #3
 8008fec:	9201      	str	r2, [sp, #4]
 8008fee:	9300      	str	r3, [sp, #0]
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f001 ff87 	bl	800af08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f002 fa96 	bl	800b534 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	210a      	movs	r1, #10
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fc0b 	bl	800982a <USBH_FindInterface>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	2bff      	cmp	r3, #255	; 0xff
 800901c:	d002      	beq.n	8009024 <USBH_CDC_InterfaceInit+0x11a>
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d901      	bls.n	8009028 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009024:	2302      	movs	r3, #2
 8009026:	e0c2      	b.n	80091ae <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	211a      	movs	r1, #26
 800902e:	fb01 f303 	mul.w	r3, r1, r3
 8009032:	4413      	add	r3, r2
 8009034:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b25b      	sxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	da16      	bge.n	800906e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	211a      	movs	r1, #26
 8009046:	fb01 f303 	mul.w	r3, r1, r3
 800904a:	4413      	add	r3, r2
 800904c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009050:	781a      	ldrb	r2, [r3, #0]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	211a      	movs	r1, #26
 800905c:	fb01 f303 	mul.w	r3, r1, r3
 8009060:	4413      	add	r3, r2
 8009062:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009066:	881a      	ldrh	r2, [r3, #0]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	835a      	strh	r2, [r3, #26]
 800906c:	e015      	b.n	800909a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	211a      	movs	r1, #26
 8009074:	fb01 f303 	mul.w	r3, r1, r3
 8009078:	4413      	add	r3, r2
 800907a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800907e:	781a      	ldrb	r2, [r3, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	211a      	movs	r1, #26
 800908a:	fb01 f303 	mul.w	r3, r1, r3
 800908e:	4413      	add	r3, r2
 8009090:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009094:	881a      	ldrh	r2, [r3, #0]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	211a      	movs	r1, #26
 80090a0:	fb01 f303 	mul.w	r3, r1, r3
 80090a4:	4413      	add	r3, r2
 80090a6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	b25b      	sxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da16      	bge.n	80090e0 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	211a      	movs	r1, #26
 80090b8:	fb01 f303 	mul.w	r3, r1, r3
 80090bc:	4413      	add	r3, r2
 80090be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090c2:	781a      	ldrb	r2, [r3, #0]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	211a      	movs	r1, #26
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80090d8:	881a      	ldrh	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	835a      	strh	r2, [r3, #26]
 80090de:	e015      	b.n	800910c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	211a      	movs	r1, #26
 80090e6:	fb01 f303 	mul.w	r3, r1, r3
 80090ea:	4413      	add	r3, r2
 80090ec:	f203 3356 	addw	r3, r3, #854	; 0x356
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	211a      	movs	r1, #26
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	4413      	add	r3, r2
 8009102:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009106:	881a      	ldrh	r2, [r3, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	7b9b      	ldrb	r3, [r3, #14]
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f001 ff27 	bl	800af66 <USBH_AllocPipe>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	7bdb      	ldrb	r3, [r3, #15]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 ff1d 	bl	800af66 <USBH_AllocPipe>
 800912c:	4603      	mov	r3, r0
 800912e:	461a      	mov	r2, r3
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	7b59      	ldrb	r1, [r3, #13]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	7b98      	ldrb	r0, [r3, #14]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	8b12      	ldrh	r2, [r2, #24]
 800914c:	9202      	str	r2, [sp, #8]
 800914e:	2202      	movs	r2, #2
 8009150:	9201      	str	r2, [sp, #4]
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4623      	mov	r3, r4
 8009156:	4602      	mov	r2, r0
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 fed5 	bl	800af08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	7b19      	ldrb	r1, [r3, #12]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	7bd8      	ldrb	r0, [r3, #15]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	8b52      	ldrh	r2, [r2, #26]
 8009176:	9202      	str	r2, [sp, #8]
 8009178:	2202      	movs	r2, #2
 800917a:	9201      	str	r2, [sp, #4]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	4623      	mov	r3, r4
 8009180:	4602      	mov	r2, r0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fec0 	bl	800af08 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	7b5b      	ldrb	r3, [r3, #13]
 8009194:	2200      	movs	r2, #0
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f002 f9cb 	bl	800b534 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	7b1b      	ldrb	r3, [r3, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f002 f9c4 	bl	800b534 <USBH_LL_SetToggle>

  return USBH_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3714      	adds	r7, #20
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd90      	pop	{r4, r7, pc}

080091b6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00e      	beq.n	80091ee <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 feb5 	bl	800af46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fee0 	bl	800afa8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	7b1b      	ldrb	r3, [r3, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00e      	beq.n	8009214 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	7b1b      	ldrb	r3, [r3, #12]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f001 fea2 	bl	800af46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	7b1b      	ldrb	r3, [r3, #12]
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fecd 	bl	800afa8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	7b5b      	ldrb	r3, [r3, #13]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00e      	beq.n	800923a <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	7b5b      	ldrb	r3, [r3, #13]
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f001 fe8f 	bl	800af46 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	7b5b      	ldrb	r3, [r3, #13]
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f001 feba 	bl	800afa8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00b      	beq.n	800925e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	4618      	mov	r0, r3
 8009250:	f002 fcd4 	bl	800bbfc <free>
    phost->pActiveClass->pData = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800925a:	2200      	movs	r2, #0
 800925c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3340      	adds	r3, #64	; 0x40
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f8b2 	bl	80093ea <GetLineCoding>
 8009286:	4603      	mov	r3, r0
 8009288:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800928a:	7afb      	ldrb	r3, [r7, #11]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d105      	bne.n	800929c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009296:	2102      	movs	r1, #2
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800929c:	7afb      	ldrb	r3, [r7, #11]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80092b0:	2301      	movs	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d877      	bhi.n	80093bc <USBH_CDC_Process+0x114>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <USBH_CDC_Process+0x2c>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	080092e9 	.word	0x080092e9
 80092d8:	080092ef 	.word	0x080092ef
 80092dc:	0800931f 	.word	0x0800931f
 80092e0:	08009393 	.word	0x08009393
 80092e4:	080093a1 	.word	0x080093a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	73fb      	strb	r3, [r7, #15]
      break;
 80092ec:	e06d      	b.n	80093ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f897 	bl	8009428 <SetLineCoding>
 80092fa:	4603      	mov	r3, r0
 80092fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800930c:	e058      	b.n	80093c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800930e:	7bbb      	ldrb	r3, [r7, #14]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d055      	beq.n	80093c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2204      	movs	r2, #4
 8009318:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800931c:	e050      	b.n	80093c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	3340      	adds	r3, #64	; 0x40
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f860 	bl	80093ea <GetLineCoding>
 800932a:	4603      	mov	r3, r0
 800932c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d126      	bne.n	8009382 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009346:	791b      	ldrb	r3, [r3, #4]
 8009348:	429a      	cmp	r2, r3
 800934a:	d13b      	bne.n	80093c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009356:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009358:	429a      	cmp	r2, r3
 800935a:	d133      	bne.n	80093c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009366:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009368:	429a      	cmp	r2, r3
 800936a:	d12b      	bne.n	80093c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009374:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009376:	429a      	cmp	r2, r3
 8009378:	d124      	bne.n	80093c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f958 	bl	8009630 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009380:	e020      	b.n	80093c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009382:	7bbb      	ldrb	r3, [r7, #14]
 8009384:	2b01      	cmp	r3, #1
 8009386:	d01d      	beq.n	80093c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2204      	movs	r2, #4
 800938c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009390:	e018      	b.n	80093c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f867 	bl	8009466 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f8da 	bl	8009552 <CDC_ProcessReception>
      break;
 800939e:	e014      	b.n	80093ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80093a0:	2100      	movs	r1, #0
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 f822 	bl	800a3ec <USBH_ClrFeature>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80093ba:	e005      	b.n	80093c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80093bc:	bf00      	nop
 80093be:	e004      	b.n	80093ca <USBH_CDC_Process+0x122>
      break;
 80093c0:	bf00      	nop
 80093c2:	e002      	b.n	80093ca <USBH_CDC_Process+0x122>
      break;
 80093c4:	bf00      	nop
 80093c6:	e000      	b.n	80093ca <USBH_CDC_Process+0x122>
      break;
 80093c8:	bf00      	nop

  }

  return status;
 80093ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	370c      	adds	r7, #12
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b082      	sub	sp, #8
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
 80093f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	22a1      	movs	r2, #161	; 0xa1
 80093f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2221      	movs	r2, #33	; 0x21
 80093fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2207      	movs	r2, #7
 8009410:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2207      	movs	r2, #7
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fb23 	bl	800aa64 <USBH_CtlReq>
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2221      	movs	r2, #33	; 0x21
 8009436:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2207      	movs	r2, #7
 800944e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2207      	movs	r2, #7
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 fb04 	bl	800aa64 <USBH_CtlReq>
 800945c:	4603      	mov	r3, r0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b086      	sub	sp, #24
 800946a:	af02      	add	r7, sp, #8
 800946c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009478:	2300      	movs	r3, #0
 800947a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009482:	2b01      	cmp	r3, #1
 8009484:	d002      	beq.n	800948c <CDC_ProcessTransmission+0x26>
 8009486:	2b02      	cmp	r3, #2
 8009488:	d023      	beq.n	80094d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800948a:	e05e      	b.n	800954a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	8b12      	ldrh	r2, [r2, #24]
 8009494:	4293      	cmp	r3, r2
 8009496:	d90b      	bls.n	80094b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	69d9      	ldr	r1, [r3, #28]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8b1a      	ldrh	r2, [r3, #24]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	7b5b      	ldrb	r3, [r3, #13]
 80094a4:	2001      	movs	r0, #1
 80094a6:	9000      	str	r0, [sp, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fcea 	bl	800ae82 <USBH_BulkSendData>
 80094ae:	e00b      	b.n	80094c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	7b5b      	ldrb	r3, [r3, #13]
 80094be:	2001      	movs	r0, #1
 80094c0:	9000      	str	r0, [sp, #0]
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fcdd 	bl	800ae82 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2202      	movs	r2, #2
 80094cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80094d0:	e03b      	b.n	800954a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	7b5b      	ldrb	r3, [r3, #13]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f002 f801 	bl	800b4e0 <USBH_LL_GetURBState>
 80094de:	4603      	mov	r3, r0
 80094e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d128      	bne.n	800953a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	8b12      	ldrh	r2, [r2, #24]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d90e      	bls.n	8009512 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	8b12      	ldrh	r2, [r2, #24]
 80094fc:	1a9a      	subs	r2, r3, r2
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	8b12      	ldrh	r2, [r2, #24]
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	61da      	str	r2, [r3, #28]
 8009510:	e002      	b.n	8009518 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009528:	e00e      	b.n	8009548 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f868 	bl	8009608 <USBH_CDC_TransmitCallback>
      break;
 8009538:	e006      	b.n	8009548 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800953a:	7afb      	ldrb	r3, [r7, #11]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d103      	bne.n	8009548 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009548:	bf00      	nop
  }
}
 800954a:	bf00      	nop
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009564:	2300      	movs	r3, #0
 8009566:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800956e:	2b03      	cmp	r3, #3
 8009570:	d002      	beq.n	8009578 <CDC_ProcessReception+0x26>
 8009572:	2b04      	cmp	r3, #4
 8009574:	d00e      	beq.n	8009594 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009576:	e043      	b.n	8009600 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	6a19      	ldr	r1, [r3, #32]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	8b5a      	ldrh	r2, [r3, #26]
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	7b1b      	ldrb	r3, [r3, #12]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 fca1 	bl	800aecc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2204      	movs	r2, #4
 800958e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009592:	e035      	b.n	8009600 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	7b1b      	ldrb	r3, [r3, #12]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 ffa0 	bl	800b4e0 <USBH_LL_GetURBState>
 80095a0:	4603      	mov	r3, r0
 80095a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80095a4:	7cfb      	ldrb	r3, [r7, #19]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d129      	bne.n	80095fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	7b1b      	ldrb	r3, [r3, #12]
 80095ae:	4619      	mov	r1, r3
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f001 ff03 	bl	800b3bc <USBH_LL_GetLastXferSize>
 80095b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d016      	beq.n	80095f0 <CDC_ProcessReception+0x9e>
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	8b5b      	ldrh	r3, [r3, #26]
 80095c6:	461a      	mov	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d910      	bls.n	80095f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1ad2      	subs	r2, r2, r3
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	6a1a      	ldr	r2, [r3, #32]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	441a      	add	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2203      	movs	r2, #3
 80095ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80095ee:	e006      	b.n	80095fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f80f 	bl	800961c <USBH_CDC_ReceiveCallback>
      break;
 80095fe:	bf00      	nop
  }
}
 8009600:	bf00      	nop
 8009602:	3718      	adds	r7, #24
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009658:	2302      	movs	r3, #2
 800965a:	e029      	b.n	80096b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	79fa      	ldrb	r2, [r7, #7]
 8009660:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 f81f 	bl	80096b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f001 fdd3 	bl	800b254 <USBH_LL_Init>

  return USBH_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80096c0:	2300      	movs	r3, #0
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096c4:	2300      	movs	r3, #0
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	e009      	b.n	80096de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	33e0      	adds	r3, #224	; 0xe0
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	2200      	movs	r2, #0
 80096d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b0f      	cmp	r3, #15
 80096e2:	d9f2      	bls.n	80096ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	e009      	b.n	80096fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	3301      	adds	r3, #1
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009704:	d3f1      	bcc.n	80096ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2240      	movs	r2, #64	; 0x40
 800972a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	331c      	adds	r3, #28
 8009756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f002 fd53 	bl	800c208 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800976c:	2100      	movs	r1, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f002 fd4a 	bl	800c208 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f203 3326 	addw	r3, r3, #806	; 0x326
 800977a:	2212      	movs	r2, #18
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f002 fd42 	bl	800c208 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800978a:	223e      	movs	r2, #62	; 0x3e
 800978c:	2100      	movs	r1, #0
 800978e:	4618      	mov	r0, r3
 8009790:	f002 fd3a 	bl	800c208 <memset>

  return USBH_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800979e:	b480      	push	{r7}
 80097a0:	b085      	sub	sp, #20
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d016      	beq.n	80097e0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10e      	bne.n	80097da <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80097c2:	1c59      	adds	r1, r3, #1
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	33de      	adds	r3, #222	; 0xde
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80097d4:	2300      	movs	r3, #0
 80097d6:	73fb      	strb	r3, [r7, #15]
 80097d8:	e004      	b.n	80097e4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80097da:	2302      	movs	r3, #2
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e001      	b.n	80097e4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	429a      	cmp	r2, r3
 800980c:	d204      	bcs.n	8009818 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009816:	e001      	b.n	800981c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800982a:	b480      	push	{r7}
 800982c:	b087      	sub	sp, #28
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	4608      	mov	r0, r1
 8009834:	4611      	mov	r1, r2
 8009836:	461a      	mov	r2, r3
 8009838:	4603      	mov	r3, r0
 800983a:	70fb      	strb	r3, [r7, #3]
 800983c:	460b      	mov	r3, r1
 800983e:	70bb      	strb	r3, [r7, #2]
 8009840:	4613      	mov	r3, r2
 8009842:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009848:	2300      	movs	r3, #0
 800984a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009852:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009854:	e025      	b.n	80098a2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009856:	7dfb      	ldrb	r3, [r7, #23]
 8009858:	221a      	movs	r2, #26
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	3308      	adds	r3, #8
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	4413      	add	r3, r2
 8009864:	3302      	adds	r3, #2
 8009866:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	795b      	ldrb	r3, [r3, #5]
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	429a      	cmp	r2, r3
 8009870:	d002      	beq.n	8009878 <USBH_FindInterface+0x4e>
 8009872:	78fb      	ldrb	r3, [r7, #3]
 8009874:	2bff      	cmp	r3, #255	; 0xff
 8009876:	d111      	bne.n	800989c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800987c:	78ba      	ldrb	r2, [r7, #2]
 800987e:	429a      	cmp	r2, r3
 8009880:	d002      	beq.n	8009888 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009882:	78bb      	ldrb	r3, [r7, #2]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d109      	bne.n	800989c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800988c:	787a      	ldrb	r2, [r7, #1]
 800988e:	429a      	cmp	r2, r3
 8009890:	d002      	beq.n	8009898 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009892:	787b      	ldrb	r3, [r7, #1]
 8009894:	2bff      	cmp	r3, #255	; 0xff
 8009896:	d101      	bne.n	800989c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009898:	7dfb      	ldrb	r3, [r7, #23]
 800989a:	e006      	b.n	80098aa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	3301      	adds	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80098a2:	7dfb      	ldrb	r3, [r7, #23]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d9d6      	bls.n	8009856 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80098a8:	23ff      	movs	r3, #255	; 0xff
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b082      	sub	sp, #8
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fd04 	bl	800b2cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80098c4:	2101      	movs	r1, #1
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f001 fe1d 	bl	800b506 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af04      	add	r7, sp, #16
 80098de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80098e0:	2302      	movs	r3, #2
 80098e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d102      	bne.n	80098fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2203      	movs	r2, #3
 80098f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b0b      	cmp	r3, #11
 8009902:	f200 81be 	bhi.w	8009c82 <USBH_Process+0x3aa>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <USBH_Process+0x34>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800993d 	.word	0x0800993d
 8009910:	0800996f 	.word	0x0800996f
 8009914:	080099d7 	.word	0x080099d7
 8009918:	08009c1d 	.word	0x08009c1d
 800991c:	08009c83 	.word	0x08009c83
 8009920:	08009a7b 	.word	0x08009a7b
 8009924:	08009bc3 	.word	0x08009bc3
 8009928:	08009ab1 	.word	0x08009ab1
 800992c:	08009ad1 	.word	0x08009ad1
 8009930:	08009af1 	.word	0x08009af1
 8009934:	08009b35 	.word	0x08009b35
 8009938:	08009c05 	.word	0x08009c05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 819e 	beq.w	8009c86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009950:	20c8      	movs	r0, #200	; 0xc8
 8009952:	f001 fe22 	bl	800b59a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 fd15 	bl	800b386 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800996c:	e18b      	b.n	8009c86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009974:	2b01      	cmp	r3, #1
 8009976:	d107      	bne.n	8009988 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009986:	e18d      	b.n	8009ca4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800998e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009992:	d914      	bls.n	80099be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800999a:	3301      	adds	r3, #1
 800999c:	b2da      	uxtb	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d903      	bls.n	80099b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	220d      	movs	r2, #13
 80099b2:	701a      	strb	r2, [r3, #0]
      break;
 80099b4:	e176      	b.n	8009ca4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
      break;
 80099bc:	e172      	b.n	8009ca4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80099c4:	f103 020a 	add.w	r2, r3, #10
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80099ce:	200a      	movs	r0, #10
 80099d0:	f001 fde3 	bl	800b59a <USBH_Delay>
      break;
 80099d4:	e166      	b.n	8009ca4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099e6:	2104      	movs	r1, #4
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80099ec:	2064      	movs	r0, #100	; 0x64
 80099ee:	f001 fdd4 	bl	800b59a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f001 fca0 	bl	800b338 <USBH_LL_GetSpeed>
 80099f8:	4603      	mov	r3, r0
 80099fa:	461a      	mov	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2205      	movs	r2, #5
 8009a06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 faab 	bl	800af66 <USBH_AllocPipe>
 8009a10:	4603      	mov	r3, r0
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009a18:	2180      	movs	r1, #128	; 0x80
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 faa3 	bl	800af66 <USBH_AllocPipe>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	7919      	ldrb	r1, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009a3c:	b292      	uxth	r2, r2
 8009a3e:	9202      	str	r2, [sp, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	9201      	str	r2, [sp, #4]
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	4603      	mov	r3, r0
 8009a48:	2280      	movs	r2, #128	; 0x80
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f001 fa5c 	bl	800af08 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	7959      	ldrb	r1, [r3, #5]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009a64:	b292      	uxth	r2, r2
 8009a66:	9202      	str	r2, [sp, #8]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	9201      	str	r2, [sp, #4]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2200      	movs	r2, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f001 fa48 	bl	800af08 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a78:	e114      	b.n	8009ca4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f918 	bl	8009cb0 <USBH_HandleEnum>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	b2db      	uxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f040 80fe 	bne.w	8009c8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d103      	bne.n	8009aa8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2208      	movs	r2, #8
 8009aa4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009aa6:	e0f0      	b.n	8009c8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2207      	movs	r2, #7
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	e0ec      	b.n	8009c8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80e9 	beq.w	8009c8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2208      	movs	r2, #8
 8009acc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009ace:	e0de      	b.n	8009c8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc3f 	bl	800a35e <USBH_SetCfg>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f040 80d5 	bne.w	8009c92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2209      	movs	r2, #9
 8009aec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009aee:	e0d0      	b.n	8009c92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009af6:	f003 0320 	and.w	r3, r3, #32
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d016      	beq.n	8009b2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009afe:	2101      	movs	r1, #1
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fc4f 	bl	800a3a4 <USBH_SetFeature>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d103      	bne.n	8009b1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	220a      	movs	r2, #10
 8009b16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b18:	e0bd      	b.n	8009c96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	f040 80b9 	bne.w	8009c96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	220a      	movs	r2, #10
 8009b28:	701a      	strb	r2, [r3, #0]
      break;
 8009b2a:	e0b4      	b.n	8009c96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	220a      	movs	r2, #10
 8009b30:	701a      	strb	r2, [r3, #0]
      break;
 8009b32:	e0b0      	b.n	8009c96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	f000 80ad 	beq.w	8009c9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73fb      	strb	r3, [r7, #15]
 8009b4c:	e016      	b.n	8009b7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009b4e:	7bfa      	ldrb	r2, [r7, #15]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	32de      	adds	r2, #222	; 0xde
 8009b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b58:	791a      	ldrb	r2, [r3, #4]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d108      	bne.n	8009b76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009b64:	7bfa      	ldrb	r2, [r7, #15]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	32de      	adds	r2, #222	; 0xde
 8009b6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009b74:	e005      	b.n	8009b82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	73fb      	strb	r3, [r7, #15]
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0e5      	beq.n	8009b4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d016      	beq.n	8009bba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	4798      	blx	r3
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2206      	movs	r2, #6
 8009ba2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009baa:	2103      	movs	r1, #3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bb0:	e073      	b.n	8009c9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	220d      	movs	r2, #13
 8009bb6:	701a      	strb	r2, [r3, #0]
      break;
 8009bb8:	e06f      	b.n	8009c9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220d      	movs	r2, #13
 8009bbe:	701a      	strb	r2, [r3, #0]
      break;
 8009bc0:	e06b      	b.n	8009c9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d017      	beq.n	8009bfc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	4798      	blx	r3
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bdc:	7bbb      	ldrb	r3, [r7, #14]
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d103      	bne.n	8009bec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	220b      	movs	r2, #11
 8009be8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bea:	e058      	b.n	8009c9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d154      	bne.n	8009c9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	220d      	movs	r2, #13
 8009bf8:	701a      	strb	r2, [r3, #0]
      break;
 8009bfa:	e050      	b.n	8009c9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	220d      	movs	r2, #13
 8009c00:	701a      	strb	r2, [r3, #0]
      break;
 8009c02:	e04c      	b.n	8009c9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d049      	beq.n	8009ca2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
      }
      break;
 8009c1a:	e042      	b.n	8009ca2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff fd47 	bl	80096b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d009      	beq.n	8009c48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c58:	2105      	movs	r1, #5
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d107      	bne.n	8009c7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fe1f 	bl	80098b6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c78:	e014      	b.n	8009ca4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fb26 	bl	800b2cc <USBH_LL_Start>
      break;
 8009c80:	e010      	b.n	8009ca4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009c82:	bf00      	nop
 8009c84:	e00e      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c86:	bf00      	nop
 8009c88:	e00c      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c8a:	bf00      	nop
 8009c8c:	e00a      	b.n	8009ca4 <USBH_Process+0x3cc>
    break;
 8009c8e:	bf00      	nop
 8009c90:	e008      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c92:	bf00      	nop
 8009c94:	e006      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c96:	bf00      	nop
 8009c98:	e004      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c9a:	bf00      	nop
 8009c9c:	e002      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009c9e:	bf00      	nop
 8009ca0:	e000      	b.n	8009ca4 <USBH_Process+0x3cc>
      break;
 8009ca2:	bf00      	nop
  }
  return USBH_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop

08009cb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af04      	add	r7, sp, #16
 8009cb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	785b      	ldrb	r3, [r3, #1]
 8009cc4:	2b07      	cmp	r3, #7
 8009cc6:	f200 81c1 	bhi.w	800a04c <USBH_HandleEnum+0x39c>
 8009cca:	a201      	add	r2, pc, #4	; (adr r2, 8009cd0 <USBH_HandleEnum+0x20>)
 8009ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd0:	08009cf1 	.word	0x08009cf1
 8009cd4:	08009daf 	.word	0x08009daf
 8009cd8:	08009e19 	.word	0x08009e19
 8009cdc:	08009ea7 	.word	0x08009ea7
 8009ce0:	08009f11 	.word	0x08009f11
 8009ce4:	08009f81 	.word	0x08009f81
 8009ce8:	08009fc7 	.word	0x08009fc7
 8009cec:	0800a00d 	.word	0x0800a00d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009cf0:	2108      	movs	r1, #8
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa50 	bl	800a198 <USBH_Get_DevDesc>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cfc:	7bbb      	ldrb	r3, [r7, #14]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d130      	bne.n	8009d64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7919      	ldrb	r1, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009d26:	b292      	uxth	r2, r2
 8009d28:	9202      	str	r2, [sp, #8]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	9201      	str	r2, [sp, #4]
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4603      	mov	r3, r0
 8009d32:	2280      	movs	r2, #128	; 0x80
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 f8e7 	bl	800af08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	7959      	ldrb	r1, [r3, #5]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d4e:	b292      	uxth	r2, r2
 8009d50:	9202      	str	r2, [sp, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	9201      	str	r2, [sp, #4]
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f001 f8d3 	bl	800af08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d62:	e175      	b.n	800a050 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d64:	7bbb      	ldrb	r3, [r7, #14]
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	f040 8172 	bne.w	800a050 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d72:	3301      	adds	r3, #1
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d903      	bls.n	8009d8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	220d      	movs	r2, #13
 8009d8a:	701a      	strb	r2, [r3, #0]
      break;
 8009d8c:	e160      	b.n	800a050 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	795b      	ldrb	r3, [r3, #5]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 f907 	bl	800afa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	791b      	ldrb	r3, [r3, #4]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 f901 	bl	800afa8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	701a      	strb	r2, [r3, #0]
      break;
 8009dac:	e150      	b.n	800a050 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009dae:	2112      	movs	r1, #18
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f9f1 	bl	800a198 <USBH_Get_DevDesc>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d103      	bne.n	8009dc8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009dc6:	e145      	b.n	800a054 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b03      	cmp	r3, #3
 8009dcc:	f040 8142 	bne.w	800a054 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	b2da      	uxtb	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d903      	bls.n	8009df2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	220d      	movs	r2, #13
 8009dee:	701a      	strb	r2, [r3, #0]
      break;
 8009df0:	e130      	b.n	800a054 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	795b      	ldrb	r3, [r3, #5]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f8d5 	bl	800afa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	791b      	ldrb	r3, [r3, #4]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f001 f8cf 	bl	800afa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	701a      	strb	r2, [r3, #0]
      break;
 8009e16:	e11d      	b.n	800a054 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009e18:	2101      	movs	r1, #1
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fa7b 	bl	800a316 <USBH_SetAddress>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d132      	bne.n	8009e90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009e2a:	2002      	movs	r0, #2
 8009e2c:	f001 fbb5 	bl	800b59a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	7919      	ldrb	r1, [r3, #4]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009e52:	b292      	uxth	r2, r2
 8009e54:	9202      	str	r2, [sp, #8]
 8009e56:	2200      	movs	r2, #0
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2280      	movs	r2, #128	; 0x80
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f851 	bl	800af08 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	7959      	ldrb	r1, [r3, #5]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e7a:	b292      	uxth	r2, r2
 8009e7c:	9202      	str	r2, [sp, #8]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	4603      	mov	r3, r0
 8009e86:	2200      	movs	r2, #0
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 f83d 	bl	800af08 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e8e:	e0e3      	b.n	800a058 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	f040 80e0 	bne.w	800a058 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	220d      	movs	r2, #13
 8009e9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	705a      	strb	r2, [r3, #1]
      break;
 8009ea4:	e0d8      	b.n	800a058 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ea6:	2109      	movs	r1, #9
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9a1 	bl	800a1f0 <USBH_Get_CfgDesc>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2204      	movs	r2, #4
 8009ebc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ebe:	e0cd      	b.n	800a05c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	2b03      	cmp	r3, #3
 8009ec4:	f040 80ca 	bne.w	800a05c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ece:	3301      	adds	r3, #1
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d903      	bls.n	8009eea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	220d      	movs	r2, #13
 8009ee6:	701a      	strb	r2, [r3, #0]
      break;
 8009ee8:	e0b8      	b.n	800a05c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	795b      	ldrb	r3, [r3, #5]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f859 	bl	800afa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	791b      	ldrb	r3, [r3, #4]
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 f853 	bl	800afa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
      break;
 8009f0e:	e0a5      	b.n	800a05c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009f16:	4619      	mov	r1, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 f969 	bl	800a1f0 <USBH_Get_CfgDesc>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2205      	movs	r2, #5
 8009f2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f2e:	e097      	b.n	800a060 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	f040 8094 	bne.w	800a060 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f3e:	3301      	adds	r3, #1
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d903      	bls.n	8009f5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	220d      	movs	r2, #13
 8009f56:	701a      	strb	r2, [r3, #0]
      break;
 8009f58:	e082      	b.n	800a060 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	795b      	ldrb	r3, [r3, #5]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 f821 	bl	800afa8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	791b      	ldrb	r3, [r3, #4]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f001 f81b 	bl	800afa8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
      break;
 8009f7e:	e06f      	b.n	800a060 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d019      	beq.n	8009fbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009f96:	23ff      	movs	r3, #255	; 0xff
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f953 	bl	800a244 <USBH_Get_StringDesc>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fa2:	7bbb      	ldrb	r3, [r7, #14]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d103      	bne.n	8009fb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2206      	movs	r2, #6
 8009fac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009fae:	e059      	b.n	800a064 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d156      	bne.n	800a064 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2206      	movs	r2, #6
 8009fba:	705a      	strb	r2, [r3, #1]
      break;
 8009fbc:	e052      	b.n	800a064 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2206      	movs	r2, #6
 8009fc2:	705a      	strb	r2, [r3, #1]
      break;
 8009fc4:	e04e      	b.n	800a064 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d019      	beq.n	800a004 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009fdc:	23ff      	movs	r3, #255	; 0xff
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f930 	bl	800a244 <USBH_Get_StringDesc>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ff4:	e038      	b.n	800a068 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b03      	cmp	r3, #3
 8009ffa:	d135      	bne.n	800a068 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2207      	movs	r2, #7
 800a000:	705a      	strb	r2, [r3, #1]
      break;
 800a002:	e031      	b.n	800a068 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2207      	movs	r2, #7
 800a008:	705a      	strb	r2, [r3, #1]
      break;
 800a00a:	e02d      	b.n	800a068 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a012:	2b00      	cmp	r3, #0
 800a014:	d017      	beq.n	800a046 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a022:	23ff      	movs	r3, #255	; 0xff
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 f90d 	bl	800a244 <USBH_Get_StringDesc>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a02e:	7bbb      	ldrb	r3, [r7, #14]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a038:	e018      	b.n	800a06c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b03      	cmp	r3, #3
 800a03e:	d115      	bne.n	800a06c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
      break;
 800a044:	e012      	b.n	800a06c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
      break;
 800a04a:	e00f      	b.n	800a06c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a04c:	bf00      	nop
 800a04e:	e00e      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a050:	bf00      	nop
 800a052:	e00c      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a054:	bf00      	nop
 800a056:	e00a      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a058:	bf00      	nop
 800a05a:	e008      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a05c:	bf00      	nop
 800a05e:	e006      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a060:	bf00      	nop
 800a062:	e004      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <USBH_HandleEnum+0x3be>
      break;
 800a06c:	bf00      	nop
  }
  return Status;
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b082      	sub	sp, #8
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f804 	bl	800a0ba <USBH_HandleSof>
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b082      	sub	sp, #8
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b0b      	cmp	r3, #11
 800a0ca:	d10a      	bne.n	800a0e2 <USBH_HandleSof+0x28>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
  }
}
 800a0e2:	bf00      	nop
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a0fa:	bf00      	nop
}
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a116:	bf00      	nop
}
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a122:	b480      	push	{r7}
 800a124:	b083      	sub	sp, #12
 800a126:	af00      	add	r7, sp, #0
 800a128:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f001 f8c6 	bl	800b302 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	791b      	ldrb	r3, [r3, #4]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 ff13 	bl	800afa8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	795b      	ldrb	r3, [r3, #5]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 ff0d 	bl	800afa8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af02      	add	r7, sp, #8
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a1a4:	887b      	ldrh	r3, [r7, #2]
 800a1a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1aa:	d901      	bls.n	800a1b0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e01b      	b.n	800a1e8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a1b6:	887b      	ldrh	r3, [r7, #2]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f872 	bl	800a2ac <USBH_GetDescriptor>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a1d8:	887a      	ldrh	r2, [r7, #2]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f929 	bl	800a434 <USBH_ParseDevDesc>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3710      	adds	r7, #16
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	331c      	adds	r3, #28
 800a200:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a202:	887b      	ldrh	r3, [r7, #2]
 800a204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a208:	d901      	bls.n	800a20e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e016      	b.n	800a23c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a20e:	887b      	ldrh	r3, [r7, #2]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a218:	2100      	movs	r1, #0
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f846 	bl	800a2ac <USBH_GetDescriptor>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d107      	bne.n	800a23a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a22a:	887b      	ldrh	r3, [r7, #2]
 800a22c:	461a      	mov	r2, r3
 800a22e:	68b9      	ldr	r1, [r7, #8]
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f9b3 	bl	800a59c <USBH_ParseCfgDesc>
 800a236:	4603      	mov	r3, r0
 800a238:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af02      	add	r7, sp, #8
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	607a      	str	r2, [r7, #4]
 800a24e:	461a      	mov	r2, r3
 800a250:	460b      	mov	r3, r1
 800a252:	72fb      	strb	r3, [r7, #11]
 800a254:	4613      	mov	r3, r2
 800a256:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a258:	893b      	ldrh	r3, [r7, #8]
 800a25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a25e:	d802      	bhi.n	800a266 <USBH_Get_StringDesc+0x22>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a266:	2303      	movs	r3, #3
 800a268:	e01c      	b.n	800a2a4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a26a:	7afb      	ldrb	r3, [r7, #11]
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a272:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a27a:	893b      	ldrh	r3, [r7, #8]
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	460b      	mov	r3, r1
 800a280:	2100      	movs	r1, #0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 f812 	bl	800a2ac <USBH_GetDescriptor>
 800a288:	4603      	mov	r3, r0
 800a28a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d107      	bne.n	800a2a2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a298:	893a      	ldrh	r2, [r7, #8]
 800a29a:	6879      	ldr	r1, [r7, #4]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 fb93 	bl	800a9c8 <USBH_ParseStringDesc>
  }

  return status;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	607b      	str	r3, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	72fb      	strb	r3, [r7, #11]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	789b      	ldrb	r3, [r3, #2]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d11c      	bne.n	800a300 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a2c6:	7afb      	ldrb	r3, [r7, #11]
 800a2c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2206      	movs	r2, #6
 800a2d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	893a      	ldrh	r2, [r7, #8]
 800a2dc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a2de:	893b      	ldrh	r3, [r7, #8]
 800a2e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2e8:	d104      	bne.n	800a2f4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f240 4209 	movw	r2, #1033	; 0x409
 800a2f0:	829a      	strh	r2, [r3, #20]
 800a2f2:	e002      	b.n	800a2fa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8b3a      	ldrh	r2, [r7, #24]
 800a2fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a300:	8b3b      	ldrh	r3, [r7, #24]
 800a302:	461a      	mov	r2, r3
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fbac 	bl	800aa64 <USBH_CtlReq>
 800a30c:	4603      	mov	r3, r0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	460b      	mov	r3, r1
 800a320:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	789b      	ldrb	r3, [r3, #2]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d10f      	bne.n	800a34a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2205      	movs	r2, #5
 800a334:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a336:	78fb      	ldrb	r3, [r7, #3]
 800a338:	b29a      	uxth	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a34a:	2200      	movs	r2, #0
 800a34c:	2100      	movs	r1, #0
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fb88 	bl	800aa64 <USBH_CtlReq>
 800a354:	4603      	mov	r3, r0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b082      	sub	sp, #8
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	460b      	mov	r3, r1
 800a368:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	789b      	ldrb	r3, [r3, #2]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d10e      	bne.n	800a390 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2200      	movs	r2, #0
 800a376:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2209      	movs	r2, #9
 800a37c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	887a      	ldrh	r2, [r7, #2]
 800a382:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a390:	2200      	movs	r2, #0
 800a392:	2100      	movs	r1, #0
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 fb65 	bl	800aa64 <USBH_CtlReq>
 800a39a:	4603      	mov	r3, r0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	789b      	ldrb	r3, [r3, #2]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d10f      	bne.n	800a3d8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a3c4:	78fb      	ldrb	r3, [r7, #3]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fb41 	bl	800aa64 <USBH_CtlReq>
 800a3e2:	4603      	mov	r3, r0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	789b      	ldrb	r3, [r3, #2]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d10f      	bne.n	800a420 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a420:	2200      	movs	r2, #0
 800a422:	2100      	movs	r1, #0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fb1d 	bl	800aa64 <USBH_CtlReq>
 800a42a:	4603      	mov	r3, r0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a434:	b480      	push	{r7}
 800a436:	b087      	sub	sp, #28
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	4613      	mov	r3, r2
 800a440:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f203 3326 	addw	r3, r3, #806	; 0x326
 800a448:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d101      	bne.n	800a458 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a454:	2302      	movs	r3, #2
 800a456:	e098      	b.n	800a58a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	781a      	ldrb	r2, [r3, #0]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	785a      	ldrb	r2, [r3, #1]
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3302      	adds	r3, #2
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3303      	adds	r3, #3
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	b29b      	uxth	r3, r3
 800a478:	021b      	lsls	r3, r3, #8
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	4313      	orrs	r3, r2
 800a47e:	b29a      	uxth	r2, r3
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	791a      	ldrb	r2, [r3, #4]
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	795a      	ldrb	r2, [r3, #5]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	799a      	ldrb	r2, [r3, #6]
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	79da      	ldrb	r2, [r3, #7]
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d004      	beq.n	800a4b8 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d11b      	bne.n	800a4f0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	79db      	ldrb	r3, [r3, #7]
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	dc0f      	bgt.n	800a4e0 <USBH_ParseDevDesc+0xac>
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	db0f      	blt.n	800a4e4 <USBH_ParseDevDesc+0xb0>
 800a4c4:	3b08      	subs	r3, #8
 800a4c6:	4a34      	ldr	r2, [pc, #208]	; (800a598 <USBH_ParseDevDesc+0x164>)
 800a4c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4cc:	f003 0301 	and.w	r3, r3, #1
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bf14      	ite	ne
 800a4d4:	2301      	movne	r3, #1
 800a4d6:	2300      	moveq	r3, #0
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d106      	bne.n	800a4ec <USBH_ParseDevDesc+0xb8>
 800a4de:	e001      	b.n	800a4e4 <USBH_ParseDevDesc+0xb0>
 800a4e0:	2b40      	cmp	r3, #64	; 0x40
 800a4e2:	d003      	beq.n	800a4ec <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2208      	movs	r2, #8
 800a4e8:	71da      	strb	r2, [r3, #7]
        break;
 800a4ea:	e000      	b.n	800a4ee <USBH_ParseDevDesc+0xba>
        break;
 800a4ec:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a4ee:	e00e      	b.n	800a50e <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d107      	bne.n	800a50a <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	79db      	ldrb	r3, [r3, #7]
 800a4fe:	2b08      	cmp	r3, #8
 800a500:	d005      	beq.n	800a50e <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2208      	movs	r2, #8
 800a506:	71da      	strb	r2, [r3, #7]
 800a508:	e001      	b.n	800a50e <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a50a:	2303      	movs	r3, #3
 800a50c:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	2b08      	cmp	r3, #8
 800a512:	d939      	bls.n	800a588 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	3308      	adds	r3, #8
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	3309      	adds	r3, #9
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	b29b      	uxth	r3, r3
 800a524:	021b      	lsls	r3, r3, #8
 800a526:	b29b      	uxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	330a      	adds	r3, #10
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	b29a      	uxth	r2, r3
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	330b      	adds	r3, #11
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	b29b      	uxth	r3, r3
 800a540:	021b      	lsls	r3, r3, #8
 800a542:	b29b      	uxth	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b29a      	uxth	r2, r3
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	330c      	adds	r3, #12
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b29a      	uxth	r2, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	330d      	adds	r3, #13
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	b29b      	uxth	r3, r3
 800a560:	4313      	orrs	r3, r2
 800a562:	b29a      	uxth	r2, r3
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	7b9a      	ldrb	r2, [r3, #14]
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	7bda      	ldrb	r2, [r3, #15]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	7c1a      	ldrb	r2, [r3, #16]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	7c5a      	ldrb	r2, [r3, #17]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a588:	7dfb      	ldrb	r3, [r7, #23]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
 800a596:	bf00      	nop
 800a598:	01000101 	.word	0x01000101

0800a59c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b08c      	sub	sp, #48	; 0x30
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a5b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e0db      	b.n	800a786 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	6a3b      	ldr	r3, [r7, #32]
 800a5d8:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	785a      	ldrb	r2, [r3, #1]
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	3303      	adds	r3, #3
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fe:	bf28      	it	cs
 800a600:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a604:	b29a      	uxth	r2, r3
 800a606:	6a3b      	ldr	r3, [r7, #32]
 800a608:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	791a      	ldrb	r2, [r3, #4]
 800a60e:	6a3b      	ldr	r3, [r7, #32]
 800a610:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	795a      	ldrb	r2, [r3, #5]
 800a616:	6a3b      	ldr	r3, [r7, #32]
 800a618:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	799a      	ldrb	r2, [r3, #6]
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	79da      	ldrb	r2, [r3, #7]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	7a1a      	ldrb	r2, [r3, #8]
 800a62e:	6a3b      	ldr	r3, [r7, #32]
 800a630:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	2b09      	cmp	r3, #9
 800a638:	d002      	beq.n	800a640 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a63a:	6a3b      	ldr	r3, [r7, #32]
 800a63c:	2209      	movs	r2, #9
 800a63e:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	2b09      	cmp	r3, #9
 800a644:	f240 809d 	bls.w	800a782 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 800a648:	2309      	movs	r3, #9
 800a64a:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a64c:	2300      	movs	r3, #0
 800a64e:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a650:	e081      	b.n	800a756 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a652:	f107 0316 	add.w	r3, r7, #22
 800a656:	4619      	mov	r1, r3
 800a658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a65a:	f000 f9e8 	bl	800aa2e <USBH_GetNextDesc>
 800a65e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	785b      	ldrb	r3, [r3, #1]
 800a664:	2b04      	cmp	r3, #4
 800a666:	d176      	bne.n	800a756 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b09      	cmp	r3, #9
 800a66e:	d002      	beq.n	800a676 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2209      	movs	r2, #9
 800a674:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a67a:	221a      	movs	r2, #26
 800a67c:	fb02 f303 	mul.w	r3, r2, r3
 800a680:	3308      	adds	r3, #8
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	4413      	add	r3, r2
 800a686:	3302      	adds	r3, #2
 800a688:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a68a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a68c:	69f8      	ldr	r0, [r7, #28]
 800a68e:	f000 f87e 	bl	800a78e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a69c:	e043      	b.n	800a726 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a69e:	f107 0316 	add.w	r3, r7, #22
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6a6:	f000 f9c2 	bl	800aa2e <USBH_GetNextDesc>
 800a6aa:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	2b05      	cmp	r3, #5
 800a6b2:	d138      	bne.n	800a726 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	795b      	ldrb	r3, [r3, #5]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d113      	bne.n	800a6e4 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d003      	beq.n	800a6cc <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	799b      	ldrb	r3, [r3, #6]
 800a6c8:	2b03      	cmp	r3, #3
 800a6ca:	d10b      	bne.n	800a6e4 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	79db      	ldrb	r3, [r3, #7]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d10b      	bne.n	800a6ec <USBH_ParseCfgDesc+0x150>
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	2b09      	cmp	r3, #9
 800a6da:	d007      	beq.n	800a6ec <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2209      	movs	r2, #9
 800a6e0:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6e2:	e003      	b.n	800a6ec <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	2207      	movs	r2, #7
 800a6e8:	701a      	strb	r2, [r3, #0]
 800a6ea:	e000      	b.n	800a6ee <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a6ec:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6f2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a6f6:	3201      	adds	r2, #1
 800a6f8:	00d2      	lsls	r2, r2, #3
 800a6fa:	211a      	movs	r1, #26
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	4413      	add	r3, r2
 800a702:	3308      	adds	r3, #8
 800a704:	6a3a      	ldr	r2, [r7, #32]
 800a706:	4413      	add	r3, r2
 800a708:	3304      	adds	r3, #4
 800a70a:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a70c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a70e:	69b9      	ldr	r1, [r7, #24]
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 f870 	bl	800a7f6 <USBH_ParseEPDesc>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a71c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a720:	3301      	adds	r3, #1
 800a722:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	791b      	ldrb	r3, [r3, #4]
 800a72a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a72e:	429a      	cmp	r2, r3
 800a730:	d204      	bcs.n	800a73c <USBH_ParseCfgDesc+0x1a0>
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	885a      	ldrh	r2, [r3, #2]
 800a736:	8afb      	ldrh	r3, [r7, #22]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d8b0      	bhi.n	800a69e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	791b      	ldrb	r3, [r3, #4]
 800a740:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a744:	429a      	cmp	r2, r3
 800a746:	d201      	bcs.n	800a74c <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 800a748:	2303      	movs	r3, #3
 800a74a:	e01c      	b.n	800a786 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 800a74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a750:	3301      	adds	r3, #1
 800a752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a756:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d805      	bhi.n	800a76a <USBH_ParseCfgDesc+0x1ce>
 800a75e:	6a3b      	ldr	r3, [r7, #32]
 800a760:	885a      	ldrh	r2, [r3, #2]
 800a762:	8afb      	ldrh	r3, [r7, #22]
 800a764:	429a      	cmp	r2, r3
 800a766:	f63f af74 	bhi.w	800a652 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	791b      	ldrb	r3, [r3, #4]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	bf28      	it	cs
 800a772:	2302      	movcs	r3, #2
 800a774:	b2db      	uxtb	r3, r3
 800a776:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d201      	bcs.n	800a782 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800a77e:	2303      	movs	r3, #3
 800a780:	e001      	b.n	800a786 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 800a782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a786:	4618      	mov	r0, r3
 800a788:	3730      	adds	r7, #48	; 0x30
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	781a      	ldrb	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	785a      	ldrb	r2, [r3, #1]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	789a      	ldrb	r2, [r3, #2]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	78da      	ldrb	r2, [r3, #3]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	3304      	adds	r3, #4
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	bf28      	it	cs
 800a7c2:	2302      	movcs	r3, #2
 800a7c4:	b2da      	uxtb	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	795a      	ldrb	r2, [r3, #5]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	799a      	ldrb	r2, [r3, #6]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	79da      	ldrb	r2, [r3, #7]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	7a1a      	ldrb	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	721a      	strb	r2, [r3, #8]
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	b087      	sub	sp, #28
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	60f8      	str	r0, [r7, #12]
 800a7fe:	60b9      	str	r1, [r7, #8]
 800a800:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a802:	2300      	movs	r3, #0
 800a804:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	781a      	ldrb	r2, [r3, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	785a      	ldrb	r2, [r3, #1]
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	789a      	ldrb	r2, [r3, #2]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	78da      	ldrb	r2, [r3, #3]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	3304      	adds	r3, #4
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	3305      	adds	r3, #5
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	021b      	lsls	r3, r3, #8
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4313      	orrs	r3, r2
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	799a      	ldrb	r2, [r3, #6]
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	889b      	ldrh	r3, [r3, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d009      	beq.n	800a866 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a85a:	d804      	bhi.n	800a866 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a864:	d901      	bls.n	800a86a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 800a866:	2303      	movs	r3, #3
 800a868:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a870:	2b00      	cmp	r3, #0
 800a872:	d136      	bne.n	800a8e2 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	78db      	ldrb	r3, [r3, #3]
 800a878:	f003 0303 	and.w	r3, r3, #3
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d108      	bne.n	800a892 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	889b      	ldrh	r3, [r3, #4]
 800a884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a888:	f240 8097 	bls.w	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a88c:	2303      	movs	r3, #3
 800a88e:	75fb      	strb	r3, [r7, #23]
 800a890:	e093      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	78db      	ldrb	r3, [r3, #3]
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d107      	bne.n	800a8ae <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	889b      	ldrh	r3, [r3, #4]
 800a8a2:	2b40      	cmp	r3, #64	; 0x40
 800a8a4:	f240 8089 	bls.w	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	75fb      	strb	r3, [r7, #23]
 800a8ac:	e085      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	78db      	ldrb	r3, [r3, #3]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d005      	beq.n	800a8c6 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	78db      	ldrb	r3, [r3, #3]
 800a8be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d10a      	bne.n	800a8dc <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	799b      	ldrb	r3, [r3, #6]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <USBH_ParseEPDesc+0xe0>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	799b      	ldrb	r3, [r3, #6]
 800a8d2:	2b10      	cmp	r3, #16
 800a8d4:	d970      	bls.n	800a9b8 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a8da:	e06d      	b.n	800a9b8 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	75fb      	strb	r3, [r7, #23]
 800a8e0:	e06b      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	d13c      	bne.n	800a966 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	78db      	ldrb	r3, [r3, #3]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d005      	beq.n	800a904 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	78db      	ldrb	r3, [r3, #3]
 800a8fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	889b      	ldrh	r3, [r3, #4]
 800a908:	2b40      	cmp	r3, #64	; 0x40
 800a90a:	d956      	bls.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a90c:	2303      	movs	r3, #3
 800a90e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a910:	e053      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	78db      	ldrb	r3, [r3, #3]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d10e      	bne.n	800a93c <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	799b      	ldrb	r3, [r3, #6]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d007      	beq.n	800a936 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a92a:	2b10      	cmp	r3, #16
 800a92c:	d803      	bhi.n	800a936 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a932:	2b40      	cmp	r3, #64	; 0x40
 800a934:	d941      	bls.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a936:	2303      	movs	r3, #3
 800a938:	75fb      	strb	r3, [r7, #23]
 800a93a:	e03e      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	78db      	ldrb	r3, [r3, #3]
 800a940:	f003 0303 	and.w	r3, r3, #3
 800a944:	2b03      	cmp	r3, #3
 800a946:	d10b      	bne.n	800a960 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	799b      	ldrb	r3, [r3, #6]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <USBH_ParseEPDesc+0x164>
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	889b      	ldrh	r3, [r3, #4]
 800a954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a958:	d32f      	bcc.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a95a:	2303      	movs	r3, #3
 800a95c:	75fb      	strb	r3, [r7, #23]
 800a95e:	e02c      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a960:	2303      	movs	r3, #3
 800a962:	75fb      	strb	r3, [r7, #23]
 800a964:	e029      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d120      	bne.n	800a9b2 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	78db      	ldrb	r3, [r3, #3]
 800a974:	f003 0303 	and.w	r3, r3, #3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d106      	bne.n	800a98a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	889b      	ldrh	r3, [r3, #4]
 800a980:	2b08      	cmp	r3, #8
 800a982:	d01a      	beq.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a984:	2303      	movs	r3, #3
 800a986:	75fb      	strb	r3, [r7, #23]
 800a988:	e017      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	78db      	ldrb	r3, [r3, #3]
 800a98e:	f003 0303 	and.w	r3, r3, #3
 800a992:	2b03      	cmp	r3, #3
 800a994:	d10a      	bne.n	800a9ac <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	799b      	ldrb	r3, [r3, #6]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d003      	beq.n	800a9a6 <USBH_ParseEPDesc+0x1b0>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	889b      	ldrh	r3, [r3, #4]
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d909      	bls.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800a9a6:	2303      	movs	r3, #3
 800a9a8:	75fb      	strb	r3, [r7, #23]
 800a9aa:	e006      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	75fb      	strb	r3, [r7, #23]
 800a9b0:	e003      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	75fb      	strb	r3, [r7, #23]
 800a9b6:	e000      	b.n	800a9ba <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a9b8:	bf00      	nop
  }

  return status;
 800a9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	371c      	adds	r7, #28
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	4613      	mov	r3, r2
 800a9d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d120      	bne.n	800aa22 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	1e9a      	subs	r2, r3, #2
 800a9e6:	88fb      	ldrh	r3, [r7, #6]
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	bf28      	it	cs
 800a9ec:	4613      	movcs	r3, r2
 800a9ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3302      	adds	r3, #2
 800a9f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	82fb      	strh	r3, [r7, #22]
 800a9fa:	e00b      	b.n	800aa14 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9fc:	8afb      	ldrh	r3, [r7, #22]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	4413      	add	r3, r2
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aa0e:	8afb      	ldrh	r3, [r7, #22]
 800aa10:	3302      	adds	r3, #2
 800aa12:	82fb      	strh	r3, [r7, #22]
 800aa14:	8afa      	ldrh	r2, [r7, #22]
 800aa16:	8abb      	ldrh	r3, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d3ef      	bcc.n	800a9fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	701a      	strb	r2, [r3, #0]
  }
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	881a      	ldrh	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	4413      	add	r3, r2
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4413      	add	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa56:	68fb      	ldr	r3, [r7, #12]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa72:	2301      	movs	r3, #1
 800aa74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	789b      	ldrb	r3, [r3, #2]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d002      	beq.n	800aa84 <USBH_CtlReq+0x20>
 800aa7e:	2b02      	cmp	r3, #2
 800aa80:	d00f      	beq.n	800aaa2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa82:	e027      	b.n	800aad4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	88fa      	ldrh	r2, [r7, #6]
 800aa8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2202      	movs	r2, #2
 800aa9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aaa0:	e018      	b.n	800aad4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aaa2:	68f8      	ldr	r0, [r7, #12]
 800aaa4:	f000 f81c 	bl	800aae0 <USBH_HandleControl>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aaac:	7dfb      	ldrb	r3, [r7, #23]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <USBH_CtlReq+0x54>
 800aab2:	7dfb      	ldrb	r3, [r7, #23]
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d106      	bne.n	800aac6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2201      	movs	r2, #1
 800aabc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	761a      	strb	r2, [r3, #24]
      break;
 800aac4:	e005      	b.n	800aad2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d102      	bne.n	800aad2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2201      	movs	r2, #1
 800aad0:	709a      	strb	r2, [r3, #2]
      break;
 800aad2:	bf00      	nop
  }
  return status;
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aae8:	2301      	movs	r3, #1
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7e1b      	ldrb	r3, [r3, #24]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2b0a      	cmp	r3, #10
 800aaf8:	f200 8156 	bhi.w	800ada8 <USBH_HandleControl+0x2c8>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <USBH_HandleControl+0x24>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab31 	.word	0x0800ab31
 800ab08:	0800ab4b 	.word	0x0800ab4b
 800ab0c:	0800abb5 	.word	0x0800abb5
 800ab10:	0800abdb 	.word	0x0800abdb
 800ab14:	0800ac13 	.word	0x0800ac13
 800ab18:	0800ac3d 	.word	0x0800ac3d
 800ab1c:	0800ac8f 	.word	0x0800ac8f
 800ab20:	0800acb1 	.word	0x0800acb1
 800ab24:	0800aced 	.word	0x0800aced
 800ab28:	0800ad13 	.word	0x0800ad13
 800ab2c:	0800ad51 	.word	0x0800ad51
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f103 0110 	add.w	r1, r3, #16
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	795b      	ldrb	r3, [r3, #5]
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f943 	bl	800adc8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2202      	movs	r2, #2
 800ab46:	761a      	strb	r2, [r3, #24]
      break;
 800ab48:	e139      	b.n	800adbe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	795b      	ldrb	r3, [r3, #5]
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fcc5 	bl	800b4e0 <USBH_LL_GetURBState>
 800ab56:	4603      	mov	r3, r0
 800ab58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d11e      	bne.n	800ab9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7c1b      	ldrb	r3, [r3, #16]
 800ab64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	8adb      	ldrh	r3, [r3, #22]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab72:	7b7b      	ldrb	r3, [r7, #13]
 800ab74:	2b80      	cmp	r3, #128	; 0x80
 800ab76:	d103      	bne.n	800ab80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2203      	movs	r2, #3
 800ab7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab7e:	e115      	b.n	800adac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2205      	movs	r2, #5
 800ab84:	761a      	strb	r2, [r3, #24]
      break;
 800ab86:	e111      	b.n	800adac <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab88:	7b7b      	ldrb	r3, [r7, #13]
 800ab8a:	2b80      	cmp	r3, #128	; 0x80
 800ab8c:	d103      	bne.n	800ab96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2209      	movs	r2, #9
 800ab92:	761a      	strb	r2, [r3, #24]
      break;
 800ab94:	e10a      	b.n	800adac <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2207      	movs	r2, #7
 800ab9a:	761a      	strb	r2, [r3, #24]
      break;
 800ab9c:	e106      	b.n	800adac <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d003      	beq.n	800abac <USBH_HandleControl+0xcc>
 800aba4:	7bbb      	ldrb	r3, [r7, #14]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	f040 8100 	bne.w	800adac <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	220b      	movs	r2, #11
 800abb0:	761a      	strb	r2, [r3, #24]
      break;
 800abb2:	e0fb      	b.n	800adac <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abba:	b29a      	uxth	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6899      	ldr	r1, [r3, #8]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	899a      	ldrh	r2, [r3, #12]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	791b      	ldrb	r3, [r3, #4]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f93a 	bl	800ae46 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2204      	movs	r2, #4
 800abd6:	761a      	strb	r2, [r3, #24]
      break;
 800abd8:	e0f1      	b.n	800adbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	791b      	ldrb	r3, [r3, #4]
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fc7d 	bl	800b4e0 <USBH_LL_GetURBState>
 800abe6:	4603      	mov	r3, r0
 800abe8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abea:	7bbb      	ldrb	r3, [r7, #14]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d102      	bne.n	800abf6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2209      	movs	r2, #9
 800abf4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	2b05      	cmp	r3, #5
 800abfa:	d102      	bne.n	800ac02 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800abfc:	2303      	movs	r3, #3
 800abfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac00:	e0d6      	b.n	800adb0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	f040 80d3 	bne.w	800adb0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	220b      	movs	r2, #11
 800ac0e:	761a      	strb	r2, [r3, #24]
      break;
 800ac10:	e0ce      	b.n	800adb0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6899      	ldr	r1, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	899a      	ldrh	r2, [r3, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	795b      	ldrb	r3, [r3, #5]
 800ac1e:	2001      	movs	r0, #1
 800ac20:	9000      	str	r0, [sp, #0]
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f8ea 	bl	800adfc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2206      	movs	r2, #6
 800ac38:	761a      	strb	r2, [r3, #24]
      break;
 800ac3a:	e0c0      	b.n	800adbe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	795b      	ldrb	r3, [r3, #5]
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fc4c 	bl	800b4e0 <USBH_LL_GetURBState>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d103      	bne.n	800ac5a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2207      	movs	r2, #7
 800ac56:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac58:	e0ac      	b.n	800adb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	2b05      	cmp	r3, #5
 800ac5e:	d105      	bne.n	800ac6c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	220c      	movs	r2, #12
 800ac64:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac66:	2303      	movs	r3, #3
 800ac68:	73fb      	strb	r3, [r7, #15]
      break;
 800ac6a:	e0a3      	b.n	800adb4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d103      	bne.n	800ac7a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2205      	movs	r2, #5
 800ac76:	761a      	strb	r2, [r3, #24]
      break;
 800ac78:	e09c      	b.n	800adb4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac7a:	7bbb      	ldrb	r3, [r7, #14]
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	f040 8099 	bne.w	800adb4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	220b      	movs	r2, #11
 800ac86:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac88:	2302      	movs	r3, #2
 800ac8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac8c:	e092      	b.n	800adb4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	791b      	ldrb	r3, [r3, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	2100      	movs	r1, #0
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f8d5 	bl	800ae46 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2208      	movs	r2, #8
 800acac:	761a      	strb	r2, [r3, #24]

      break;
 800acae:	e086      	b.n	800adbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	791b      	ldrb	r3, [r3, #4]
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 fc12 	bl	800b4e0 <USBH_LL_GetURBState>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d105      	bne.n	800acd2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	220d      	movs	r2, #13
 800acca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acd0:	e072      	b.n	800adb8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800acd2:	7bbb      	ldrb	r3, [r7, #14]
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d103      	bne.n	800ace0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	220b      	movs	r2, #11
 800acdc:	761a      	strb	r2, [r3, #24]
      break;
 800acde:	e06b      	b.n	800adb8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
 800ace2:	2b05      	cmp	r3, #5
 800ace4:	d168      	bne.n	800adb8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ace6:	2303      	movs	r3, #3
 800ace8:	73fb      	strb	r3, [r7, #15]
      break;
 800acea:	e065      	b.n	800adb8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	795b      	ldrb	r3, [r3, #5]
 800acf0:	2201      	movs	r2, #1
 800acf2:	9200      	str	r2, [sp, #0]
 800acf4:	2200      	movs	r2, #0
 800acf6:	2100      	movs	r1, #0
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f87f 	bl	800adfc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	220a      	movs	r2, #10
 800ad0e:	761a      	strb	r2, [r3, #24]
      break;
 800ad10:	e055      	b.n	800adbe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	795b      	ldrb	r3, [r3, #5]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fbe1 	bl	800b4e0 <USBH_LL_GetURBState>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d105      	bne.n	800ad34 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	220d      	movs	r2, #13
 800ad30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad32:	e043      	b.n	800adbc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d103      	bne.n	800ad42 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2209      	movs	r2, #9
 800ad3e:	761a      	strb	r2, [r3, #24]
      break;
 800ad40:	e03c      	b.n	800adbc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d139      	bne.n	800adbc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	220b      	movs	r2, #11
 800ad4c:	761a      	strb	r2, [r3, #24]
      break;
 800ad4e:	e035      	b.n	800adbc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7e5b      	ldrb	r3, [r3, #25]
 800ad54:	3301      	adds	r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	765a      	strb	r2, [r3, #25]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	7e5b      	ldrb	r3, [r3, #25]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d806      	bhi.n	800ad72 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad70:	e025      	b.n	800adbe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad78:	2106      	movs	r1, #6
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	795b      	ldrb	r3, [r3, #5]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f90c 	bl	800afa8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	791b      	ldrb	r3, [r3, #4]
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f906 	bl	800afa8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ada2:	2302      	movs	r3, #2
 800ada4:	73fb      	strb	r3, [r7, #15]
      break;
 800ada6:	e00a      	b.n	800adbe <USBH_HandleControl+0x2de>

    default:
      break;
 800ada8:	bf00      	nop
 800adaa:	e008      	b.n	800adbe <USBH_HandleControl+0x2de>
      break;
 800adac:	bf00      	nop
 800adae:	e006      	b.n	800adbe <USBH_HandleControl+0x2de>
      break;
 800adb0:	bf00      	nop
 800adb2:	e004      	b.n	800adbe <USBH_HandleControl+0x2de>
      break;
 800adb4:	bf00      	nop
 800adb6:	e002      	b.n	800adbe <USBH_HandleControl+0x2de>
      break;
 800adb8:	bf00      	nop
 800adba:	e000      	b.n	800adbe <USBH_HandleControl+0x2de>
      break;
 800adbc:	bf00      	nop
  }

  return status;
 800adbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b088      	sub	sp, #32
 800adcc:	af04      	add	r7, sp, #16
 800adce:	60f8      	str	r0, [r7, #12]
 800add0:	60b9      	str	r1, [r7, #8]
 800add2:	4613      	mov	r3, r2
 800add4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800add6:	79f9      	ldrb	r1, [r7, #7]
 800add8:	2300      	movs	r3, #0
 800adda:	9303      	str	r3, [sp, #12]
 800addc:	2308      	movs	r3, #8
 800adde:	9302      	str	r3, [sp, #8]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	2300      	movs	r3, #0
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	2300      	movs	r3, #0
 800adea:	2200      	movs	r2, #0
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 fb46 	bl	800b47e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af04      	add	r7, sp, #16
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	4611      	mov	r1, r2
 800ae08:	461a      	mov	r2, r3
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	80fb      	strh	r3, [r7, #6]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae20:	7979      	ldrb	r1, [r7, #5]
 800ae22:	7e3b      	ldrb	r3, [r7, #24]
 800ae24:	9303      	str	r3, [sp, #12]
 800ae26:	88fb      	ldrh	r3, [r7, #6]
 800ae28:	9302      	str	r3, [sp, #8]
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	2301      	movs	r3, #1
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	2300      	movs	r3, #0
 800ae34:	2200      	movs	r2, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 fb21 	bl	800b47e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b088      	sub	sp, #32
 800ae4a:	af04      	add	r7, sp, #16
 800ae4c:	60f8      	str	r0, [r7, #12]
 800ae4e:	60b9      	str	r1, [r7, #8]
 800ae50:	4611      	mov	r1, r2
 800ae52:	461a      	mov	r2, r3
 800ae54:	460b      	mov	r3, r1
 800ae56:	80fb      	strh	r3, [r7, #6]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae5c:	7979      	ldrb	r1, [r7, #5]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	88fb      	ldrh	r3, [r7, #6]
 800ae64:	9302      	str	r3, [sp, #8]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	2300      	movs	r3, #0
 800ae70:	2201      	movs	r2, #1
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 fb03 	bl	800b47e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae78:	2300      	movs	r3, #0

}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b088      	sub	sp, #32
 800ae86:	af04      	add	r7, sp, #16
 800ae88:	60f8      	str	r0, [r7, #12]
 800ae8a:	60b9      	str	r1, [r7, #8]
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	461a      	mov	r2, r3
 800ae90:	460b      	mov	r3, r1
 800ae92:	80fb      	strh	r3, [r7, #6]
 800ae94:	4613      	mov	r3, r2
 800ae96:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aea6:	7979      	ldrb	r1, [r7, #5]
 800aea8:	7e3b      	ldrb	r3, [r7, #24]
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	9301      	str	r3, [sp, #4]
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	9300      	str	r3, [sp, #0]
 800aeb8:	2302      	movs	r3, #2
 800aeba:	2200      	movs	r2, #0
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f000 fade 	bl	800b47e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af04      	add	r7, sp, #16
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	4611      	mov	r1, r2
 800aed8:	461a      	mov	r2, r3
 800aeda:	460b      	mov	r3, r1
 800aedc:	80fb      	strh	r3, [r7, #6]
 800aede:	4613      	mov	r3, r2
 800aee0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aee2:	7979      	ldrb	r1, [r7, #5]
 800aee4:	2300      	movs	r3, #0
 800aee6:	9303      	str	r3, [sp, #12]
 800aee8:	88fb      	ldrh	r3, [r7, #6]
 800aeea:	9302      	str	r3, [sp, #8]
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	2301      	movs	r3, #1
 800aef2:	9300      	str	r3, [sp, #0]
 800aef4:	2302      	movs	r3, #2
 800aef6:	2201      	movs	r2, #1
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	f000 fac0 	bl	800b47e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aefe:	2300      	movs	r3, #0
}
 800af00:	4618      	mov	r0, r3
 800af02:	3710      	adds	r7, #16
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af04      	add	r7, sp, #16
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	4608      	mov	r0, r1
 800af12:	4611      	mov	r1, r2
 800af14:	461a      	mov	r2, r3
 800af16:	4603      	mov	r3, r0
 800af18:	70fb      	strb	r3, [r7, #3]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70bb      	strb	r3, [r7, #2]
 800af1e:	4613      	mov	r3, r2
 800af20:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800af22:	7878      	ldrb	r0, [r7, #1]
 800af24:	78ba      	ldrb	r2, [r7, #2]
 800af26:	78f9      	ldrb	r1, [r7, #3]
 800af28:	8b3b      	ldrh	r3, [r7, #24]
 800af2a:	9302      	str	r3, [sp, #8]
 800af2c:	7d3b      	ldrb	r3, [r7, #20]
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	7c3b      	ldrb	r3, [r7, #16]
 800af32:	9300      	str	r3, [sp, #0]
 800af34:	4603      	mov	r3, r0
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	f000 fa53 	bl	800b3e2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af3c:	2300      	movs	r3, #0
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
 800af4e:	460b      	mov	r3, r1
 800af50:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af52:	78fb      	ldrb	r3, [r7, #3]
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa72 	bl	800b440 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b084      	sub	sp, #16
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f836 	bl	800afe4 <USBH_GetFreePipe>
 800af78:	4603      	mov	r3, r0
 800af7a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af82:	4293      	cmp	r3, r2
 800af84:	d00a      	beq.n	800af9c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af86:	78fa      	ldrb	r2, [r7, #3]
 800af88:	89fb      	ldrh	r3, [r7, #14]
 800af8a:	f003 030f 	and.w	r3, r3, #15
 800af8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	33e0      	adds	r3, #224	; 0xe0
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af9c:	89fb      	ldrh	r3, [r7, #14]
 800af9e:	b2db      	uxtb	r3, r3
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	460b      	mov	r3, r1
 800afb2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800afb4:	78fb      	ldrb	r3, [r7, #3]
 800afb6:	2b0f      	cmp	r3, #15
 800afb8:	d80d      	bhi.n	800afd6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800afba:	78fb      	ldrb	r3, [r7, #3]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	33e0      	adds	r3, #224	; 0xe0
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	78fb      	ldrb	r3, [r7, #3]
 800afc8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	33e0      	adds	r3, #224	; 0xe0
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
 800aff4:	e00f      	b.n	800b016 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	33e0      	adds	r3, #224	; 0xe0
 800affc:	009b      	lsls	r3, r3, #2
 800affe:	4413      	add	r3, r2
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	e007      	b.n	800b020 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	3301      	adds	r3, #1
 800b014:	73fb      	strb	r3, [r7, #15]
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	2b0f      	cmp	r3, #15
 800b01a:	d9ec      	bls.n	800aff6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b01c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b030:	2201      	movs	r2, #1
 800b032:	490e      	ldr	r1, [pc, #56]	; (800b06c <MX_USB_HOST_Init+0x40>)
 800b034:	480e      	ldr	r0, [pc, #56]	; (800b070 <MX_USB_HOST_Init+0x44>)
 800b036:	f7fe fb05 	bl	8009644 <USBH_Init>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b040:	f7f6 ff4a 	bl	8001ed8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b044:	490b      	ldr	r1, [pc, #44]	; (800b074 <MX_USB_HOST_Init+0x48>)
 800b046:	480a      	ldr	r0, [pc, #40]	; (800b070 <MX_USB_HOST_Init+0x44>)
 800b048:	f7fe fba9 	bl	800979e <USBH_RegisterClass>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b052:	f7f6 ff41 	bl	8001ed8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b056:	4806      	ldr	r0, [pc, #24]	; (800b070 <MX_USB_HOST_Init+0x44>)
 800b058:	f7fe fc2d 	bl	80098b6 <USBH_Start>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b062:	f7f6 ff39 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b066:	bf00      	nop
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	0800b08d 	.word	0x0800b08d
 800b070:	200004f4 	.word	0x200004f4
 800b074:	20000030 	.word	0x20000030

0800b078 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b07c:	4802      	ldr	r0, [pc, #8]	; (800b088 <MX_USB_HOST_Process+0x10>)
 800b07e:	f7fe fc2b 	bl	80098d8 <USBH_Process>
}
 800b082:	bf00      	nop
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200004f4 	.word	0x200004f4

0800b08c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	460b      	mov	r3, r1
 800b096:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b098:	78fb      	ldrb	r3, [r7, #3]
 800b09a:	3b01      	subs	r3, #1
 800b09c:	2b04      	cmp	r3, #4
 800b09e:	d819      	bhi.n	800b0d4 <USBH_UserProcess+0x48>
 800b0a0:	a201      	add	r2, pc, #4	; (adr r2, 800b0a8 <USBH_UserProcess+0x1c>)
 800b0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a6:	bf00      	nop
 800b0a8:	0800b0d5 	.word	0x0800b0d5
 800b0ac:	0800b0c5 	.word	0x0800b0c5
 800b0b0:	0800b0d5 	.word	0x0800b0d5
 800b0b4:	0800b0cd 	.word	0x0800b0cd
 800b0b8:	0800b0bd 	.word	0x0800b0bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b0bc:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <USBH_UserProcess+0x58>)
 800b0be:	2203      	movs	r2, #3
 800b0c0:	701a      	strb	r2, [r3, #0]
  break;
 800b0c2:	e008      	b.n	800b0d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b0c4:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <USBH_UserProcess+0x58>)
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	701a      	strb	r2, [r3, #0]
  break;
 800b0ca:	e004      	b.n	800b0d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b0cc:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <USBH_UserProcess+0x58>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	701a      	strb	r2, [r3, #0]
  break;
 800b0d2:	e000      	b.n	800b0d6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b0d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0d6:	bf00      	nop
 800b0d8:	370c      	adds	r7, #12
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	200008cc 	.word	0x200008cc

0800b0e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08a      	sub	sp, #40	; 0x28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0f0:	f107 0314 	add.w	r3, r7, #20
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	605a      	str	r2, [r3, #4]
 800b0fa:	609a      	str	r2, [r3, #8]
 800b0fc:	60da      	str	r2, [r3, #12]
 800b0fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b108:	d147      	bne.n	800b19a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b10a:	2300      	movs	r3, #0
 800b10c:	613b      	str	r3, [r7, #16]
 800b10e:	4b25      	ldr	r3, [pc, #148]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	4a24      	ldr	r2, [pc, #144]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b114:	f043 0301 	orr.w	r3, r3, #1
 800b118:	6313      	str	r3, [r2, #48]	; 0x30
 800b11a:	4b22      	ldr	r3, [pc, #136]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	613b      	str	r3, [r7, #16]
 800b124:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b12a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b12c:	2300      	movs	r3, #0
 800b12e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b130:	2300      	movs	r3, #0
 800b132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	4619      	mov	r1, r3
 800b13a:	481b      	ldr	r0, [pc, #108]	; (800b1a8 <HAL_HCD_MspInit+0xc0>)
 800b13c:	f7f7 fba4 	bl	8002888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b140:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b146:	2302      	movs	r3, #2
 800b148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b14e:	2303      	movs	r3, #3
 800b150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b152:	230a      	movs	r3, #10
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b156:	f107 0314 	add.w	r3, r7, #20
 800b15a:	4619      	mov	r1, r3
 800b15c:	4812      	ldr	r0, [pc, #72]	; (800b1a8 <HAL_HCD_MspInit+0xc0>)
 800b15e:	f7f7 fb93 	bl	8002888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b162:	4b10      	ldr	r3, [pc, #64]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	4a0f      	ldr	r2, [pc, #60]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b16c:	6353      	str	r3, [r2, #52]	; 0x34
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	4b0c      	ldr	r3, [pc, #48]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b176:	4a0b      	ldr	r2, [pc, #44]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b17c:	6453      	str	r3, [r2, #68]	; 0x44
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <HAL_HCD_MspInit+0xbc>)
 800b180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b18a:	2200      	movs	r2, #0
 800b18c:	2100      	movs	r1, #0
 800b18e:	2043      	movs	r0, #67	; 0x43
 800b190:	f7f7 fb43 	bl	800281a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b194:	2043      	movs	r0, #67	; 0x43
 800b196:	f7f7 fb5c 	bl	8002852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b19a:	bf00      	nop
 800b19c:	3728      	adds	r7, #40	; 0x28
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	40023800 	.word	0x40023800
 800b1a8:	40020000 	.word	0x40020000

0800b1ac <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe ff6b 	bl	800a096 <USBH_LL_IncTimer>
}
 800b1c0:	bf00      	nop
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fe ffa3 	bl	800a122 <USBH_LL_Connect>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe ffac 	bl	800a150 <USBH_LL_Disconnect>
}
 800b1f8:	bf00      	nop
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
 800b20c:	4613      	mov	r3, r2
 800b20e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fe ff5d 	bl	800a0ea <USBH_LL_PortEnabled>
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800b246:	4618      	mov	r0, r3
 800b248:	f7fe ff5d 	bl	800a106 <USBH_LL_PortDisabled>
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b262:	2b01      	cmp	r3, #1
 800b264:	d12a      	bne.n	800b2bc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b266:	4a18      	ldr	r2, [pc, #96]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a15      	ldr	r2, [pc, #84]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b272:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b276:	4b14      	ldr	r3, [pc, #80]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b278:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b27c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b27e:	4b12      	ldr	r3, [pc, #72]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b280:	2208      	movs	r2, #8
 800b282:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b284:	4b10      	ldr	r3, [pc, #64]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b286:	2201      	movs	r2, #1
 800b288:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b28c:	2200      	movs	r2, #0
 800b28e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b290:	4b0d      	ldr	r3, [pc, #52]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b292:	2202      	movs	r2, #2
 800b294:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b296:	4b0c      	ldr	r3, [pc, #48]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b298:	2200      	movs	r2, #0
 800b29a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b29c:	480a      	ldr	r0, [pc, #40]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b29e:	f7f7 fcc1 	bl	8002c24 <HAL_HCD_Init>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b2a8:	f7f6 fe16 	bl	8001ed8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b2ac:	4806      	ldr	r0, [pc, #24]	; (800b2c8 <USBH_LL_Init+0x74>)
 800b2ae:	f7f8 f921 	bl	80034f4 <HAL_HCD_GetCurrentFrame>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7fe fede 	bl	800a078 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200008d0 	.word	0x200008d0

0800b2cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f8 f88e 	bl	8003404 <HAL_HCD_Start>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f95e 	bl	800b5b0 <USBH_Get_USB_Status>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f8 f896 	bl	800344a <HAL_HCD_Stop>
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f943 	bl	800b5b0 <USBH_Get_USB_Status>
 800b32a:	4603      	mov	r3, r0
 800b32c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b340:	2301      	movs	r3, #1
 800b342:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7f8 f8e0 	bl	8003510 <HAL_HCD_GetCurrentSpeed>
 800b350:	4603      	mov	r3, r0
 800b352:	2b02      	cmp	r3, #2
 800b354:	d00c      	beq.n	800b370 <USBH_LL_GetSpeed+0x38>
 800b356:	2b02      	cmp	r3, #2
 800b358:	d80d      	bhi.n	800b376 <USBH_LL_GetSpeed+0x3e>
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <USBH_LL_GetSpeed+0x2c>
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d003      	beq.n	800b36a <USBH_LL_GetSpeed+0x32>
 800b362:	e008      	b.n	800b376 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b364:	2300      	movs	r3, #0
 800b366:	73fb      	strb	r3, [r7, #15]
    break;
 800b368:	e008      	b.n	800b37c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b36a:	2301      	movs	r3, #1
 800b36c:	73fb      	strb	r3, [r7, #15]
    break;
 800b36e:	e005      	b.n	800b37c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b370:	2302      	movs	r3, #2
 800b372:	73fb      	strb	r3, [r7, #15]
    break;
 800b374:	e002      	b.n	800b37c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b376:	2301      	movs	r3, #1
 800b378:	73fb      	strb	r3, [r7, #15]
    break;
 800b37a:	bf00      	nop
  }
  return  speed;
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}

0800b386 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b392:	2300      	movs	r3, #0
 800b394:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7f8 f871 	bl	8003484 <HAL_HCD_ResetPort>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f000 f901 	bl	800b5b0 <USBH_Get_USB_Status>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b3ce:	78fa      	ldrb	r2, [r7, #3]
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7f8 f879 	bl	80034ca <HAL_HCD_HC_GetXferCount>
 800b3d8:	4603      	mov	r3, r0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3e2:	b590      	push	{r4, r7, lr}
 800b3e4:	b089      	sub	sp, #36	; 0x24
 800b3e6:	af04      	add	r7, sp, #16
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	4608      	mov	r0, r1
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	70fb      	strb	r3, [r7, #3]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70bb      	strb	r3, [r7, #2]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b40a:	787c      	ldrb	r4, [r7, #1]
 800b40c:	78ba      	ldrb	r2, [r7, #2]
 800b40e:	78f9      	ldrb	r1, [r7, #3]
 800b410:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b412:	9302      	str	r3, [sp, #8]
 800b414:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	4623      	mov	r3, r4
 800b422:	f7f7 fc66 	bl	8002cf2 <HAL_HCD_HC_Init>
 800b426:	4603      	mov	r3, r0
 800b428:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f000 f8bf 	bl	800b5b0 <USBH_Get_USB_Status>
 800b432:	4603      	mov	r3, r0
 800b434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b436:	7bbb      	ldrb	r3, [r7, #14]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd90      	pop	{r4, r7, pc}

0800b440 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b450:	2300      	movs	r3, #0
 800b452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	4611      	mov	r1, r2
 800b45e:	4618      	mov	r0, r3
 800b460:	f7f7 fcff 	bl	8002e62 <HAL_HCD_HC_Halt>
 800b464:	4603      	mov	r3, r0
 800b466:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 f8a0 	bl	800b5b0 <USBH_Get_USB_Status>
 800b470:	4603      	mov	r3, r0
 800b472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b474:	7bbb      	ldrb	r3, [r7, #14]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b47e:	b590      	push	{r4, r7, lr}
 800b480:	b089      	sub	sp, #36	; 0x24
 800b482:	af04      	add	r7, sp, #16
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	4608      	mov	r0, r1
 800b488:	4611      	mov	r1, r2
 800b48a:	461a      	mov	r2, r3
 800b48c:	4603      	mov	r3, r0
 800b48e:	70fb      	strb	r3, [r7, #3]
 800b490:	460b      	mov	r3, r1
 800b492:	70bb      	strb	r3, [r7, #2]
 800b494:	4613      	mov	r3, r2
 800b496:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b4a6:	787c      	ldrb	r4, [r7, #1]
 800b4a8:	78ba      	ldrb	r2, [r7, #2]
 800b4aa:	78f9      	ldrb	r1, [r7, #3]
 800b4ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	4623      	mov	r3, r4
 800b4c2:	f7f7 fcf1 	bl	8002ea8 <HAL_HCD_HC_SubmitRequest>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f000 f86f 	bl	800b5b0 <USBH_Get_USB_Status>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd90      	pop	{r4, r7, pc}

0800b4e0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7f7 ffd2 	bl	80034a0 <HAL_HCD_HC_GetURBState>
 800b4fc:	4603      	mov	r3, r0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	460b      	mov	r3, r1
 800b510:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d103      	bne.n	800b524 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f872 	bl	800b608 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b524:	20c8      	movs	r0, #200	; 0xc8
 800b526:	f7f7 f879 	bl	800261c <HAL_Delay>
  return USBH_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
 800b540:	4613      	mov	r3, r2
 800b542:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b54a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b54c:	78fa      	ldrb	r2, [r7, #3]
 800b54e:	68f9      	ldr	r1, [r7, #12]
 800b550:	4613      	mov	r3, r2
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	1a9b      	subs	r3, r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	440b      	add	r3, r1
 800b55a:	3317      	adds	r3, #23
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00a      	beq.n	800b578 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b562:	78fa      	ldrb	r2, [r7, #3]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	4613      	mov	r3, r2
 800b568:	011b      	lsls	r3, r3, #4
 800b56a:	1a9b      	subs	r3, r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	440b      	add	r3, r1
 800b570:	333c      	adds	r3, #60	; 0x3c
 800b572:	78ba      	ldrb	r2, [r7, #2]
 800b574:	701a      	strb	r2, [r3, #0]
 800b576:	e009      	b.n	800b58c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b578:	78fa      	ldrb	r2, [r7, #3]
 800b57a:	68f9      	ldr	r1, [r7, #12]
 800b57c:	4613      	mov	r3, r2
 800b57e:	011b      	lsls	r3, r3, #4
 800b580:	1a9b      	subs	r3, r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	440b      	add	r3, r1
 800b586:	333d      	adds	r3, #61	; 0x3d
 800b588:	78ba      	ldrb	r2, [r7, #2]
 800b58a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7f7 f83a 	bl	800261c <HAL_Delay>
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b085      	sub	sp, #20
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b5be:	79fb      	ldrb	r3, [r7, #7]
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d817      	bhi.n	800b5f4 <USBH_Get_USB_Status+0x44>
 800b5c4:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBH_Get_USB_Status+0x1c>)
 800b5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ca:	bf00      	nop
 800b5cc:	0800b5dd 	.word	0x0800b5dd
 800b5d0:	0800b5e3 	.word	0x0800b5e3
 800b5d4:	0800b5e9 	.word	0x0800b5e9
 800b5d8:	0800b5ef 	.word	0x0800b5ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e0:	e00b      	b.n	800b5fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e6:	e008      	b.n	800b5fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ec:	e005      	b.n	800b5fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f2:	e002      	b.n	800b5fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5f8:	bf00      	nop
  }
  return usb_status;
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b616:	79fb      	ldrb	r3, [r7, #7]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73fb      	strb	r3, [r7, #15]
 800b620:	e001      	b.n	800b626 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b622:	2301      	movs	r3, #1
 800b624:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b626:	7bfb      	ldrb	r3, [r7, #15]
 800b628:	461a      	mov	r2, r3
 800b62a:	2101      	movs	r1, #1
 800b62c:	4803      	ldr	r0, [pc, #12]	; (800b63c <MX_DriverVbusFS+0x34>)
 800b62e:	f7f7 fac7 	bl	8002bc0 <HAL_GPIO_WritePin>
}
 800b632:	bf00      	nop
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	40020800 	.word	0x40020800

0800b640 <__cvt>:
 800b640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b644:	ec55 4b10 	vmov	r4, r5, d0
 800b648:	2d00      	cmp	r5, #0
 800b64a:	460e      	mov	r6, r1
 800b64c:	4619      	mov	r1, r3
 800b64e:	462b      	mov	r3, r5
 800b650:	bfbb      	ittet	lt
 800b652:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b656:	461d      	movlt	r5, r3
 800b658:	2300      	movge	r3, #0
 800b65a:	232d      	movlt	r3, #45	; 0x2d
 800b65c:	700b      	strb	r3, [r1, #0]
 800b65e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b660:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b664:	4691      	mov	r9, r2
 800b666:	f023 0820 	bic.w	r8, r3, #32
 800b66a:	bfbc      	itt	lt
 800b66c:	4622      	movlt	r2, r4
 800b66e:	4614      	movlt	r4, r2
 800b670:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b674:	d005      	beq.n	800b682 <__cvt+0x42>
 800b676:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b67a:	d100      	bne.n	800b67e <__cvt+0x3e>
 800b67c:	3601      	adds	r6, #1
 800b67e:	2102      	movs	r1, #2
 800b680:	e000      	b.n	800b684 <__cvt+0x44>
 800b682:	2103      	movs	r1, #3
 800b684:	ab03      	add	r3, sp, #12
 800b686:	9301      	str	r3, [sp, #4]
 800b688:	ab02      	add	r3, sp, #8
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	ec45 4b10 	vmov	d0, r4, r5
 800b690:	4653      	mov	r3, sl
 800b692:	4632      	mov	r2, r6
 800b694:	f000 fe8c 	bl	800c3b0 <_dtoa_r>
 800b698:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b69c:	4607      	mov	r7, r0
 800b69e:	d102      	bne.n	800b6a6 <__cvt+0x66>
 800b6a0:	f019 0f01 	tst.w	r9, #1
 800b6a4:	d022      	beq.n	800b6ec <__cvt+0xac>
 800b6a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6aa:	eb07 0906 	add.w	r9, r7, r6
 800b6ae:	d110      	bne.n	800b6d2 <__cvt+0x92>
 800b6b0:	783b      	ldrb	r3, [r7, #0]
 800b6b2:	2b30      	cmp	r3, #48	; 0x30
 800b6b4:	d10a      	bne.n	800b6cc <__cvt+0x8c>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	4629      	mov	r1, r5
 800b6be:	f7f5 fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6c2:	b918      	cbnz	r0, 800b6cc <__cvt+0x8c>
 800b6c4:	f1c6 0601 	rsb	r6, r6, #1
 800b6c8:	f8ca 6000 	str.w	r6, [sl]
 800b6cc:	f8da 3000 	ldr.w	r3, [sl]
 800b6d0:	4499      	add	r9, r3
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	4620      	mov	r0, r4
 800b6d8:	4629      	mov	r1, r5
 800b6da:	f7f5 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6de:	b108      	cbz	r0, 800b6e4 <__cvt+0xa4>
 800b6e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b6e4:	2230      	movs	r2, #48	; 0x30
 800b6e6:	9b03      	ldr	r3, [sp, #12]
 800b6e8:	454b      	cmp	r3, r9
 800b6ea:	d307      	bcc.n	800b6fc <__cvt+0xbc>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6f0:	1bdb      	subs	r3, r3, r7
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	b004      	add	sp, #16
 800b6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fc:	1c59      	adds	r1, r3, #1
 800b6fe:	9103      	str	r1, [sp, #12]
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e7f0      	b.n	800b6e6 <__cvt+0xa6>

0800b704 <__exponent>:
 800b704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b706:	4603      	mov	r3, r0
 800b708:	2900      	cmp	r1, #0
 800b70a:	bfb8      	it	lt
 800b70c:	4249      	neglt	r1, r1
 800b70e:	f803 2b02 	strb.w	r2, [r3], #2
 800b712:	bfb4      	ite	lt
 800b714:	222d      	movlt	r2, #45	; 0x2d
 800b716:	222b      	movge	r2, #43	; 0x2b
 800b718:	2909      	cmp	r1, #9
 800b71a:	7042      	strb	r2, [r0, #1]
 800b71c:	dd2a      	ble.n	800b774 <__exponent+0x70>
 800b71e:	f10d 0207 	add.w	r2, sp, #7
 800b722:	4617      	mov	r7, r2
 800b724:	260a      	movs	r6, #10
 800b726:	4694      	mov	ip, r2
 800b728:	fb91 f5f6 	sdiv	r5, r1, r6
 800b72c:	fb06 1415 	mls	r4, r6, r5, r1
 800b730:	3430      	adds	r4, #48	; 0x30
 800b732:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b736:	460c      	mov	r4, r1
 800b738:	2c63      	cmp	r4, #99	; 0x63
 800b73a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b73e:	4629      	mov	r1, r5
 800b740:	dcf1      	bgt.n	800b726 <__exponent+0x22>
 800b742:	3130      	adds	r1, #48	; 0x30
 800b744:	f1ac 0402 	sub.w	r4, ip, #2
 800b748:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b74c:	1c41      	adds	r1, r0, #1
 800b74e:	4622      	mov	r2, r4
 800b750:	42ba      	cmp	r2, r7
 800b752:	d30a      	bcc.n	800b76a <__exponent+0x66>
 800b754:	f10d 0209 	add.w	r2, sp, #9
 800b758:	eba2 020c 	sub.w	r2, r2, ip
 800b75c:	42bc      	cmp	r4, r7
 800b75e:	bf88      	it	hi
 800b760:	2200      	movhi	r2, #0
 800b762:	4413      	add	r3, r2
 800b764:	1a18      	subs	r0, r3, r0
 800b766:	b003      	add	sp, #12
 800b768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b76e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b772:	e7ed      	b.n	800b750 <__exponent+0x4c>
 800b774:	2330      	movs	r3, #48	; 0x30
 800b776:	3130      	adds	r1, #48	; 0x30
 800b778:	7083      	strb	r3, [r0, #2]
 800b77a:	70c1      	strb	r1, [r0, #3]
 800b77c:	1d03      	adds	r3, r0, #4
 800b77e:	e7f1      	b.n	800b764 <__exponent+0x60>

0800b780 <_printf_float>:
 800b780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	ed2d 8b02 	vpush	{d8}
 800b788:	b08d      	sub	sp, #52	; 0x34
 800b78a:	460c      	mov	r4, r1
 800b78c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b790:	4616      	mov	r6, r2
 800b792:	461f      	mov	r7, r3
 800b794:	4605      	mov	r5, r0
 800b796:	f000 fd3f 	bl	800c218 <_localeconv_r>
 800b79a:	f8d0 a000 	ldr.w	sl, [r0]
 800b79e:	4650      	mov	r0, sl
 800b7a0:	f7f4 fd6e 	bl	8000280 <strlen>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	9305      	str	r3, [sp, #20]
 800b7ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b7b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7b4:	3307      	adds	r3, #7
 800b7b6:	f023 0307 	bic.w	r3, r3, #7
 800b7ba:	f103 0208 	add.w	r2, r3, #8
 800b7be:	f8c8 2000 	str.w	r2, [r8]
 800b7c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ca:	9307      	str	r3, [sp, #28]
 800b7cc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b7d0:	ee08 0a10 	vmov	s16, r0
 800b7d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b7d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7dc:	4b9e      	ldr	r3, [pc, #632]	; (800ba58 <_printf_float+0x2d8>)
 800b7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7e2:	f7f5 f9ab 	bl	8000b3c <__aeabi_dcmpun>
 800b7e6:	bb88      	cbnz	r0, 800b84c <_printf_float+0xcc>
 800b7e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ba58 <_printf_float+0x2d8>)
 800b7ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7f2:	f7f5 f985 	bl	8000b00 <__aeabi_dcmple>
 800b7f6:	bb48      	cbnz	r0, 800b84c <_printf_float+0xcc>
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	4640      	mov	r0, r8
 800b7fe:	4649      	mov	r1, r9
 800b800:	f7f5 f974 	bl	8000aec <__aeabi_dcmplt>
 800b804:	b110      	cbz	r0, 800b80c <_printf_float+0x8c>
 800b806:	232d      	movs	r3, #45	; 0x2d
 800b808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b80c:	4a93      	ldr	r2, [pc, #588]	; (800ba5c <_printf_float+0x2dc>)
 800b80e:	4b94      	ldr	r3, [pc, #592]	; (800ba60 <_printf_float+0x2e0>)
 800b810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b814:	bf94      	ite	ls
 800b816:	4690      	movls	r8, r2
 800b818:	4698      	movhi	r8, r3
 800b81a:	2303      	movs	r3, #3
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	9b05      	ldr	r3, [sp, #20]
 800b820:	f023 0304 	bic.w	r3, r3, #4
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	f04f 0900 	mov.w	r9, #0
 800b82a:	9700      	str	r7, [sp, #0]
 800b82c:	4633      	mov	r3, r6
 800b82e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f000 fa8a 	bl	800bd4c <_printf_common>
 800b838:	3001      	adds	r0, #1
 800b83a:	f040 8090 	bne.w	800b95e <_printf_float+0x1de>
 800b83e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b842:	b00d      	add	sp, #52	; 0x34
 800b844:	ecbd 8b02 	vpop	{d8}
 800b848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b84c:	4642      	mov	r2, r8
 800b84e:	464b      	mov	r3, r9
 800b850:	4640      	mov	r0, r8
 800b852:	4649      	mov	r1, r9
 800b854:	f7f5 f972 	bl	8000b3c <__aeabi_dcmpun>
 800b858:	b140      	cbz	r0, 800b86c <_printf_float+0xec>
 800b85a:	464b      	mov	r3, r9
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	bfbc      	itt	lt
 800b860:	232d      	movlt	r3, #45	; 0x2d
 800b862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b866:	4a7f      	ldr	r2, [pc, #508]	; (800ba64 <_printf_float+0x2e4>)
 800b868:	4b7f      	ldr	r3, [pc, #508]	; (800ba68 <_printf_float+0x2e8>)
 800b86a:	e7d1      	b.n	800b810 <_printf_float+0x90>
 800b86c:	6863      	ldr	r3, [r4, #4]
 800b86e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b872:	9206      	str	r2, [sp, #24]
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	d13f      	bne.n	800b8f8 <_printf_float+0x178>
 800b878:	2306      	movs	r3, #6
 800b87a:	6063      	str	r3, [r4, #4]
 800b87c:	9b05      	ldr	r3, [sp, #20]
 800b87e:	6861      	ldr	r1, [r4, #4]
 800b880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b884:	2300      	movs	r3, #0
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	ab0a      	add	r3, sp, #40	; 0x28
 800b88a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b88e:	ab09      	add	r3, sp, #36	; 0x24
 800b890:	ec49 8b10 	vmov	d0, r8, r9
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	6022      	str	r2, [r4, #0]
 800b898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b89c:	4628      	mov	r0, r5
 800b89e:	f7ff fecf 	bl	800b640 <__cvt>
 800b8a2:	9b06      	ldr	r3, [sp, #24]
 800b8a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8a6:	2b47      	cmp	r3, #71	; 0x47
 800b8a8:	4680      	mov	r8, r0
 800b8aa:	d108      	bne.n	800b8be <_printf_float+0x13e>
 800b8ac:	1cc8      	adds	r0, r1, #3
 800b8ae:	db02      	blt.n	800b8b6 <_printf_float+0x136>
 800b8b0:	6863      	ldr	r3, [r4, #4]
 800b8b2:	4299      	cmp	r1, r3
 800b8b4:	dd41      	ble.n	800b93a <_printf_float+0x1ba>
 800b8b6:	f1ab 0302 	sub.w	r3, fp, #2
 800b8ba:	fa5f fb83 	uxtb.w	fp, r3
 800b8be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8c2:	d820      	bhi.n	800b906 <_printf_float+0x186>
 800b8c4:	3901      	subs	r1, #1
 800b8c6:	465a      	mov	r2, fp
 800b8c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b8cc:	9109      	str	r1, [sp, #36]	; 0x24
 800b8ce:	f7ff ff19 	bl	800b704 <__exponent>
 800b8d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8d4:	1813      	adds	r3, r2, r0
 800b8d6:	2a01      	cmp	r2, #1
 800b8d8:	4681      	mov	r9, r0
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	dc02      	bgt.n	800b8e4 <_printf_float+0x164>
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	07d2      	lsls	r2, r2, #31
 800b8e2:	d501      	bpl.n	800b8e8 <_printf_float+0x168>
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d09c      	beq.n	800b82a <_printf_float+0xaa>
 800b8f0:	232d      	movs	r3, #45	; 0x2d
 800b8f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8f6:	e798      	b.n	800b82a <_printf_float+0xaa>
 800b8f8:	9a06      	ldr	r2, [sp, #24]
 800b8fa:	2a47      	cmp	r2, #71	; 0x47
 800b8fc:	d1be      	bne.n	800b87c <_printf_float+0xfc>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1bc      	bne.n	800b87c <_printf_float+0xfc>
 800b902:	2301      	movs	r3, #1
 800b904:	e7b9      	b.n	800b87a <_printf_float+0xfa>
 800b906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b90a:	d118      	bne.n	800b93e <_printf_float+0x1be>
 800b90c:	2900      	cmp	r1, #0
 800b90e:	6863      	ldr	r3, [r4, #4]
 800b910:	dd0b      	ble.n	800b92a <_printf_float+0x1aa>
 800b912:	6121      	str	r1, [r4, #16]
 800b914:	b913      	cbnz	r3, 800b91c <_printf_float+0x19c>
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	07d0      	lsls	r0, r2, #31
 800b91a:	d502      	bpl.n	800b922 <_printf_float+0x1a2>
 800b91c:	3301      	adds	r3, #1
 800b91e:	440b      	add	r3, r1
 800b920:	6123      	str	r3, [r4, #16]
 800b922:	65a1      	str	r1, [r4, #88]	; 0x58
 800b924:	f04f 0900 	mov.w	r9, #0
 800b928:	e7de      	b.n	800b8e8 <_printf_float+0x168>
 800b92a:	b913      	cbnz	r3, 800b932 <_printf_float+0x1b2>
 800b92c:	6822      	ldr	r2, [r4, #0]
 800b92e:	07d2      	lsls	r2, r2, #31
 800b930:	d501      	bpl.n	800b936 <_printf_float+0x1b6>
 800b932:	3302      	adds	r3, #2
 800b934:	e7f4      	b.n	800b920 <_printf_float+0x1a0>
 800b936:	2301      	movs	r3, #1
 800b938:	e7f2      	b.n	800b920 <_printf_float+0x1a0>
 800b93a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b940:	4299      	cmp	r1, r3
 800b942:	db05      	blt.n	800b950 <_printf_float+0x1d0>
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	6121      	str	r1, [r4, #16]
 800b948:	07d8      	lsls	r0, r3, #31
 800b94a:	d5ea      	bpl.n	800b922 <_printf_float+0x1a2>
 800b94c:	1c4b      	adds	r3, r1, #1
 800b94e:	e7e7      	b.n	800b920 <_printf_float+0x1a0>
 800b950:	2900      	cmp	r1, #0
 800b952:	bfd4      	ite	le
 800b954:	f1c1 0202 	rsble	r2, r1, #2
 800b958:	2201      	movgt	r2, #1
 800b95a:	4413      	add	r3, r2
 800b95c:	e7e0      	b.n	800b920 <_printf_float+0x1a0>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	055a      	lsls	r2, r3, #21
 800b962:	d407      	bmi.n	800b974 <_printf_float+0x1f4>
 800b964:	6923      	ldr	r3, [r4, #16]
 800b966:	4642      	mov	r2, r8
 800b968:	4631      	mov	r1, r6
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	d12c      	bne.n	800b9cc <_printf_float+0x24c>
 800b972:	e764      	b.n	800b83e <_printf_float+0xbe>
 800b974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b978:	f240 80e0 	bls.w	800bb3c <_printf_float+0x3bc>
 800b97c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b980:	2200      	movs	r2, #0
 800b982:	2300      	movs	r3, #0
 800b984:	f7f5 f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b988:	2800      	cmp	r0, #0
 800b98a:	d034      	beq.n	800b9f6 <_printf_float+0x276>
 800b98c:	4a37      	ldr	r2, [pc, #220]	; (800ba6c <_printf_float+0x2ec>)
 800b98e:	2301      	movs	r3, #1
 800b990:	4631      	mov	r1, r6
 800b992:	4628      	mov	r0, r5
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f af51 	beq.w	800b83e <_printf_float+0xbe>
 800b99c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	db02      	blt.n	800b9aa <_printf_float+0x22a>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	07d8      	lsls	r0, r3, #31
 800b9a8:	d510      	bpl.n	800b9cc <_printf_float+0x24c>
 800b9aa:	ee18 3a10 	vmov	r3, s16
 800b9ae:	4652      	mov	r2, sl
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	47b8      	blx	r7
 800b9b6:	3001      	adds	r0, #1
 800b9b8:	f43f af41 	beq.w	800b83e <_printf_float+0xbe>
 800b9bc:	f04f 0800 	mov.w	r8, #0
 800b9c0:	f104 091a 	add.w	r9, r4, #26
 800b9c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	4543      	cmp	r3, r8
 800b9ca:	dc09      	bgt.n	800b9e0 <_printf_float+0x260>
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	079b      	lsls	r3, r3, #30
 800b9d0:	f100 8107 	bmi.w	800bbe2 <_printf_float+0x462>
 800b9d4:	68e0      	ldr	r0, [r4, #12]
 800b9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d8:	4298      	cmp	r0, r3
 800b9da:	bfb8      	it	lt
 800b9dc:	4618      	movlt	r0, r3
 800b9de:	e730      	b.n	800b842 <_printf_float+0xc2>
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	464a      	mov	r2, r9
 800b9e4:	4631      	mov	r1, r6
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	47b8      	blx	r7
 800b9ea:	3001      	adds	r0, #1
 800b9ec:	f43f af27 	beq.w	800b83e <_printf_float+0xbe>
 800b9f0:	f108 0801 	add.w	r8, r8, #1
 800b9f4:	e7e6      	b.n	800b9c4 <_printf_float+0x244>
 800b9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	dc39      	bgt.n	800ba70 <_printf_float+0x2f0>
 800b9fc:	4a1b      	ldr	r2, [pc, #108]	; (800ba6c <_printf_float+0x2ec>)
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4631      	mov	r1, r6
 800ba02:	4628      	mov	r0, r5
 800ba04:	47b8      	blx	r7
 800ba06:	3001      	adds	r0, #1
 800ba08:	f43f af19 	beq.w	800b83e <_printf_float+0xbe>
 800ba0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba10:	4313      	orrs	r3, r2
 800ba12:	d102      	bne.n	800ba1a <_printf_float+0x29a>
 800ba14:	6823      	ldr	r3, [r4, #0]
 800ba16:	07d9      	lsls	r1, r3, #31
 800ba18:	d5d8      	bpl.n	800b9cc <_printf_float+0x24c>
 800ba1a:	ee18 3a10 	vmov	r3, s16
 800ba1e:	4652      	mov	r2, sl
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f af09 	beq.w	800b83e <_printf_float+0xbe>
 800ba2c:	f04f 0900 	mov.w	r9, #0
 800ba30:	f104 0a1a 	add.w	sl, r4, #26
 800ba34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba36:	425b      	negs	r3, r3
 800ba38:	454b      	cmp	r3, r9
 800ba3a:	dc01      	bgt.n	800ba40 <_printf_float+0x2c0>
 800ba3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3e:	e792      	b.n	800b966 <_printf_float+0x1e6>
 800ba40:	2301      	movs	r3, #1
 800ba42:	4652      	mov	r2, sl
 800ba44:	4631      	mov	r1, r6
 800ba46:	4628      	mov	r0, r5
 800ba48:	47b8      	blx	r7
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	f43f aef7 	beq.w	800b83e <_printf_float+0xbe>
 800ba50:	f109 0901 	add.w	r9, r9, #1
 800ba54:	e7ee      	b.n	800ba34 <_printf_float+0x2b4>
 800ba56:	bf00      	nop
 800ba58:	7fefffff 	.word	0x7fefffff
 800ba5c:	0800e004 	.word	0x0800e004
 800ba60:	0800e008 	.word	0x0800e008
 800ba64:	0800e00c 	.word	0x0800e00c
 800ba68:	0800e010 	.word	0x0800e010
 800ba6c:	0800e014 	.word	0x0800e014
 800ba70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba74:	429a      	cmp	r2, r3
 800ba76:	bfa8      	it	ge
 800ba78:	461a      	movge	r2, r3
 800ba7a:	2a00      	cmp	r2, #0
 800ba7c:	4691      	mov	r9, r2
 800ba7e:	dc37      	bgt.n	800baf0 <_printf_float+0x370>
 800ba80:	f04f 0b00 	mov.w	fp, #0
 800ba84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba88:	f104 021a 	add.w	r2, r4, #26
 800ba8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ba8e:	9305      	str	r3, [sp, #20]
 800ba90:	eba3 0309 	sub.w	r3, r3, r9
 800ba94:	455b      	cmp	r3, fp
 800ba96:	dc33      	bgt.n	800bb00 <_printf_float+0x380>
 800ba98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	db3b      	blt.n	800bb18 <_printf_float+0x398>
 800baa0:	6823      	ldr	r3, [r4, #0]
 800baa2:	07da      	lsls	r2, r3, #31
 800baa4:	d438      	bmi.n	800bb18 <_printf_float+0x398>
 800baa6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800baaa:	eba2 0903 	sub.w	r9, r2, r3
 800baae:	9b05      	ldr	r3, [sp, #20]
 800bab0:	1ad2      	subs	r2, r2, r3
 800bab2:	4591      	cmp	r9, r2
 800bab4:	bfa8      	it	ge
 800bab6:	4691      	movge	r9, r2
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	dc35      	bgt.n	800bb2a <_printf_float+0x3aa>
 800babe:	f04f 0800 	mov.w	r8, #0
 800bac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bac6:	f104 0a1a 	add.w	sl, r4, #26
 800baca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bace:	1a9b      	subs	r3, r3, r2
 800bad0:	eba3 0309 	sub.w	r3, r3, r9
 800bad4:	4543      	cmp	r3, r8
 800bad6:	f77f af79 	ble.w	800b9cc <_printf_float+0x24c>
 800bada:	2301      	movs	r3, #1
 800badc:	4652      	mov	r2, sl
 800bade:	4631      	mov	r1, r6
 800bae0:	4628      	mov	r0, r5
 800bae2:	47b8      	blx	r7
 800bae4:	3001      	adds	r0, #1
 800bae6:	f43f aeaa 	beq.w	800b83e <_printf_float+0xbe>
 800baea:	f108 0801 	add.w	r8, r8, #1
 800baee:	e7ec      	b.n	800baca <_printf_float+0x34a>
 800baf0:	4613      	mov	r3, r2
 800baf2:	4631      	mov	r1, r6
 800baf4:	4642      	mov	r2, r8
 800baf6:	4628      	mov	r0, r5
 800baf8:	47b8      	blx	r7
 800bafa:	3001      	adds	r0, #1
 800bafc:	d1c0      	bne.n	800ba80 <_printf_float+0x300>
 800bafe:	e69e      	b.n	800b83e <_printf_float+0xbe>
 800bb00:	2301      	movs	r3, #1
 800bb02:	4631      	mov	r1, r6
 800bb04:	4628      	mov	r0, r5
 800bb06:	9205      	str	r2, [sp, #20]
 800bb08:	47b8      	blx	r7
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	f43f ae97 	beq.w	800b83e <_printf_float+0xbe>
 800bb10:	9a05      	ldr	r2, [sp, #20]
 800bb12:	f10b 0b01 	add.w	fp, fp, #1
 800bb16:	e7b9      	b.n	800ba8c <_printf_float+0x30c>
 800bb18:	ee18 3a10 	vmov	r3, s16
 800bb1c:	4652      	mov	r2, sl
 800bb1e:	4631      	mov	r1, r6
 800bb20:	4628      	mov	r0, r5
 800bb22:	47b8      	blx	r7
 800bb24:	3001      	adds	r0, #1
 800bb26:	d1be      	bne.n	800baa6 <_printf_float+0x326>
 800bb28:	e689      	b.n	800b83e <_printf_float+0xbe>
 800bb2a:	9a05      	ldr	r2, [sp, #20]
 800bb2c:	464b      	mov	r3, r9
 800bb2e:	4442      	add	r2, r8
 800bb30:	4631      	mov	r1, r6
 800bb32:	4628      	mov	r0, r5
 800bb34:	47b8      	blx	r7
 800bb36:	3001      	adds	r0, #1
 800bb38:	d1c1      	bne.n	800babe <_printf_float+0x33e>
 800bb3a:	e680      	b.n	800b83e <_printf_float+0xbe>
 800bb3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb3e:	2a01      	cmp	r2, #1
 800bb40:	dc01      	bgt.n	800bb46 <_printf_float+0x3c6>
 800bb42:	07db      	lsls	r3, r3, #31
 800bb44:	d53a      	bpl.n	800bbbc <_printf_float+0x43c>
 800bb46:	2301      	movs	r3, #1
 800bb48:	4642      	mov	r2, r8
 800bb4a:	4631      	mov	r1, r6
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	47b8      	blx	r7
 800bb50:	3001      	adds	r0, #1
 800bb52:	f43f ae74 	beq.w	800b83e <_printf_float+0xbe>
 800bb56:	ee18 3a10 	vmov	r3, s16
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4628      	mov	r0, r5
 800bb60:	47b8      	blx	r7
 800bb62:	3001      	adds	r0, #1
 800bb64:	f43f ae6b 	beq.w	800b83e <_printf_float+0xbe>
 800bb68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bb74:	f7f4 ffb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb78:	b9d8      	cbnz	r0, 800bbb2 <_printf_float+0x432>
 800bb7a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bb7e:	f108 0201 	add.w	r2, r8, #1
 800bb82:	4631      	mov	r1, r6
 800bb84:	4628      	mov	r0, r5
 800bb86:	47b8      	blx	r7
 800bb88:	3001      	adds	r0, #1
 800bb8a:	d10e      	bne.n	800bbaa <_printf_float+0x42a>
 800bb8c:	e657      	b.n	800b83e <_printf_float+0xbe>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	4652      	mov	r2, sl
 800bb92:	4631      	mov	r1, r6
 800bb94:	4628      	mov	r0, r5
 800bb96:	47b8      	blx	r7
 800bb98:	3001      	adds	r0, #1
 800bb9a:	f43f ae50 	beq.w	800b83e <_printf_float+0xbe>
 800bb9e:	f108 0801 	add.w	r8, r8, #1
 800bba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba4:	3b01      	subs	r3, #1
 800bba6:	4543      	cmp	r3, r8
 800bba8:	dcf1      	bgt.n	800bb8e <_printf_float+0x40e>
 800bbaa:	464b      	mov	r3, r9
 800bbac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbb0:	e6da      	b.n	800b968 <_printf_float+0x1e8>
 800bbb2:	f04f 0800 	mov.w	r8, #0
 800bbb6:	f104 0a1a 	add.w	sl, r4, #26
 800bbba:	e7f2      	b.n	800bba2 <_printf_float+0x422>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	4642      	mov	r2, r8
 800bbc0:	e7df      	b.n	800bb82 <_printf_float+0x402>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	464a      	mov	r2, r9
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b8      	blx	r7
 800bbcc:	3001      	adds	r0, #1
 800bbce:	f43f ae36 	beq.w	800b83e <_printf_float+0xbe>
 800bbd2:	f108 0801 	add.w	r8, r8, #1
 800bbd6:	68e3      	ldr	r3, [r4, #12]
 800bbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bbda:	1a5b      	subs	r3, r3, r1
 800bbdc:	4543      	cmp	r3, r8
 800bbde:	dcf0      	bgt.n	800bbc2 <_printf_float+0x442>
 800bbe0:	e6f8      	b.n	800b9d4 <_printf_float+0x254>
 800bbe2:	f04f 0800 	mov.w	r8, #0
 800bbe6:	f104 0919 	add.w	r9, r4, #25
 800bbea:	e7f4      	b.n	800bbd6 <_printf_float+0x456>

0800bbec <malloc>:
 800bbec:	4b02      	ldr	r3, [pc, #8]	; (800bbf8 <malloc+0xc>)
 800bbee:	4601      	mov	r1, r0
 800bbf0:	6818      	ldr	r0, [r3, #0]
 800bbf2:	f000 b82b 	b.w	800bc4c <_malloc_r>
 800bbf6:	bf00      	nop
 800bbf8:	200000a8 	.word	0x200000a8

0800bbfc <free>:
 800bbfc:	4b02      	ldr	r3, [pc, #8]	; (800bc08 <free+0xc>)
 800bbfe:	4601      	mov	r1, r0
 800bc00:	6818      	ldr	r0, [r3, #0]
 800bc02:	f001 b9c7 	b.w	800cf94 <_free_r>
 800bc06:	bf00      	nop
 800bc08:	200000a8 	.word	0x200000a8

0800bc0c <sbrk_aligned>:
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4e0e      	ldr	r6, [pc, #56]	; (800bc48 <sbrk_aligned+0x3c>)
 800bc10:	460c      	mov	r4, r1
 800bc12:	6831      	ldr	r1, [r6, #0]
 800bc14:	4605      	mov	r5, r0
 800bc16:	b911      	cbnz	r1, 800bc1e <sbrk_aligned+0x12>
 800bc18:	f000 fb02 	bl	800c220 <_sbrk_r>
 800bc1c:	6030      	str	r0, [r6, #0]
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4628      	mov	r0, r5
 800bc22:	f000 fafd 	bl	800c220 <_sbrk_r>
 800bc26:	1c43      	adds	r3, r0, #1
 800bc28:	d00a      	beq.n	800bc40 <sbrk_aligned+0x34>
 800bc2a:	1cc4      	adds	r4, r0, #3
 800bc2c:	f024 0403 	bic.w	r4, r4, #3
 800bc30:	42a0      	cmp	r0, r4
 800bc32:	d007      	beq.n	800bc44 <sbrk_aligned+0x38>
 800bc34:	1a21      	subs	r1, r4, r0
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 faf2 	bl	800c220 <_sbrk_r>
 800bc3c:	3001      	adds	r0, #1
 800bc3e:	d101      	bne.n	800bc44 <sbrk_aligned+0x38>
 800bc40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bc44:	4620      	mov	r0, r4
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	20000cb4 	.word	0x20000cb4

0800bc4c <_malloc_r>:
 800bc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc50:	1ccd      	adds	r5, r1, #3
 800bc52:	f025 0503 	bic.w	r5, r5, #3
 800bc56:	3508      	adds	r5, #8
 800bc58:	2d0c      	cmp	r5, #12
 800bc5a:	bf38      	it	cc
 800bc5c:	250c      	movcc	r5, #12
 800bc5e:	2d00      	cmp	r5, #0
 800bc60:	4607      	mov	r7, r0
 800bc62:	db01      	blt.n	800bc68 <_malloc_r+0x1c>
 800bc64:	42a9      	cmp	r1, r5
 800bc66:	d905      	bls.n	800bc74 <_malloc_r+0x28>
 800bc68:	230c      	movs	r3, #12
 800bc6a:	603b      	str	r3, [r7, #0]
 800bc6c:	2600      	movs	r6, #0
 800bc6e:	4630      	mov	r0, r6
 800bc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bd48 <_malloc_r+0xfc>
 800bc78:	f000 f9f8 	bl	800c06c <__malloc_lock>
 800bc7c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc80:	461c      	mov	r4, r3
 800bc82:	bb5c      	cbnz	r4, 800bcdc <_malloc_r+0x90>
 800bc84:	4629      	mov	r1, r5
 800bc86:	4638      	mov	r0, r7
 800bc88:	f7ff ffc0 	bl	800bc0c <sbrk_aligned>
 800bc8c:	1c43      	adds	r3, r0, #1
 800bc8e:	4604      	mov	r4, r0
 800bc90:	d155      	bne.n	800bd3e <_malloc_r+0xf2>
 800bc92:	f8d8 4000 	ldr.w	r4, [r8]
 800bc96:	4626      	mov	r6, r4
 800bc98:	2e00      	cmp	r6, #0
 800bc9a:	d145      	bne.n	800bd28 <_malloc_r+0xdc>
 800bc9c:	2c00      	cmp	r4, #0
 800bc9e:	d048      	beq.n	800bd32 <_malloc_r+0xe6>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	4631      	mov	r1, r6
 800bca4:	4638      	mov	r0, r7
 800bca6:	eb04 0903 	add.w	r9, r4, r3
 800bcaa:	f000 fab9 	bl	800c220 <_sbrk_r>
 800bcae:	4581      	cmp	r9, r0
 800bcb0:	d13f      	bne.n	800bd32 <_malloc_r+0xe6>
 800bcb2:	6821      	ldr	r1, [r4, #0]
 800bcb4:	1a6d      	subs	r5, r5, r1
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4638      	mov	r0, r7
 800bcba:	f7ff ffa7 	bl	800bc0c <sbrk_aligned>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d037      	beq.n	800bd32 <_malloc_r+0xe6>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	442b      	add	r3, r5
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	f8d8 3000 	ldr.w	r3, [r8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d038      	beq.n	800bd42 <_malloc_r+0xf6>
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	42a2      	cmp	r2, r4
 800bcd4:	d12b      	bne.n	800bd2e <_malloc_r+0xe2>
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	605a      	str	r2, [r3, #4]
 800bcda:	e00f      	b.n	800bcfc <_malloc_r+0xb0>
 800bcdc:	6822      	ldr	r2, [r4, #0]
 800bcde:	1b52      	subs	r2, r2, r5
 800bce0:	d41f      	bmi.n	800bd22 <_malloc_r+0xd6>
 800bce2:	2a0b      	cmp	r2, #11
 800bce4:	d917      	bls.n	800bd16 <_malloc_r+0xca>
 800bce6:	1961      	adds	r1, r4, r5
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	6025      	str	r5, [r4, #0]
 800bcec:	bf18      	it	ne
 800bcee:	6059      	strne	r1, [r3, #4]
 800bcf0:	6863      	ldr	r3, [r4, #4]
 800bcf2:	bf08      	it	eq
 800bcf4:	f8c8 1000 	streq.w	r1, [r8]
 800bcf8:	5162      	str	r2, [r4, r5]
 800bcfa:	604b      	str	r3, [r1, #4]
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f104 060b 	add.w	r6, r4, #11
 800bd02:	f000 f9b9 	bl	800c078 <__malloc_unlock>
 800bd06:	f026 0607 	bic.w	r6, r6, #7
 800bd0a:	1d23      	adds	r3, r4, #4
 800bd0c:	1af2      	subs	r2, r6, r3
 800bd0e:	d0ae      	beq.n	800bc6e <_malloc_r+0x22>
 800bd10:	1b9b      	subs	r3, r3, r6
 800bd12:	50a3      	str	r3, [r4, r2]
 800bd14:	e7ab      	b.n	800bc6e <_malloc_r+0x22>
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	6862      	ldr	r2, [r4, #4]
 800bd1a:	d1dd      	bne.n	800bcd8 <_malloc_r+0x8c>
 800bd1c:	f8c8 2000 	str.w	r2, [r8]
 800bd20:	e7ec      	b.n	800bcfc <_malloc_r+0xb0>
 800bd22:	4623      	mov	r3, r4
 800bd24:	6864      	ldr	r4, [r4, #4]
 800bd26:	e7ac      	b.n	800bc82 <_malloc_r+0x36>
 800bd28:	4634      	mov	r4, r6
 800bd2a:	6876      	ldr	r6, [r6, #4]
 800bd2c:	e7b4      	b.n	800bc98 <_malloc_r+0x4c>
 800bd2e:	4613      	mov	r3, r2
 800bd30:	e7cc      	b.n	800bccc <_malloc_r+0x80>
 800bd32:	230c      	movs	r3, #12
 800bd34:	603b      	str	r3, [r7, #0]
 800bd36:	4638      	mov	r0, r7
 800bd38:	f000 f99e 	bl	800c078 <__malloc_unlock>
 800bd3c:	e797      	b.n	800bc6e <_malloc_r+0x22>
 800bd3e:	6025      	str	r5, [r4, #0]
 800bd40:	e7dc      	b.n	800bcfc <_malloc_r+0xb0>
 800bd42:	605b      	str	r3, [r3, #4]
 800bd44:	deff      	udf	#255	; 0xff
 800bd46:	bf00      	nop
 800bd48:	20000cb0 	.word	0x20000cb0

0800bd4c <_printf_common>:
 800bd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd50:	4616      	mov	r6, r2
 800bd52:	4699      	mov	r9, r3
 800bd54:	688a      	ldr	r2, [r1, #8]
 800bd56:	690b      	ldr	r3, [r1, #16]
 800bd58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	bfb8      	it	lt
 800bd60:	4613      	movlt	r3, r2
 800bd62:	6033      	str	r3, [r6, #0]
 800bd64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd68:	4607      	mov	r7, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	b10a      	cbz	r2, 800bd72 <_printf_common+0x26>
 800bd6e:	3301      	adds	r3, #1
 800bd70:	6033      	str	r3, [r6, #0]
 800bd72:	6823      	ldr	r3, [r4, #0]
 800bd74:	0699      	lsls	r1, r3, #26
 800bd76:	bf42      	ittt	mi
 800bd78:	6833      	ldrmi	r3, [r6, #0]
 800bd7a:	3302      	addmi	r3, #2
 800bd7c:	6033      	strmi	r3, [r6, #0]
 800bd7e:	6825      	ldr	r5, [r4, #0]
 800bd80:	f015 0506 	ands.w	r5, r5, #6
 800bd84:	d106      	bne.n	800bd94 <_printf_common+0x48>
 800bd86:	f104 0a19 	add.w	sl, r4, #25
 800bd8a:	68e3      	ldr	r3, [r4, #12]
 800bd8c:	6832      	ldr	r2, [r6, #0]
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	42ab      	cmp	r3, r5
 800bd92:	dc26      	bgt.n	800bde2 <_printf_common+0x96>
 800bd94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd98:	1e13      	subs	r3, r2, #0
 800bd9a:	6822      	ldr	r2, [r4, #0]
 800bd9c:	bf18      	it	ne
 800bd9e:	2301      	movne	r3, #1
 800bda0:	0692      	lsls	r2, r2, #26
 800bda2:	d42b      	bmi.n	800bdfc <_printf_common+0xb0>
 800bda4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bda8:	4649      	mov	r1, r9
 800bdaa:	4638      	mov	r0, r7
 800bdac:	47c0      	blx	r8
 800bdae:	3001      	adds	r0, #1
 800bdb0:	d01e      	beq.n	800bdf0 <_printf_common+0xa4>
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	f003 0306 	and.w	r3, r3, #6
 800bdba:	2b04      	cmp	r3, #4
 800bdbc:	bf02      	ittt	eq
 800bdbe:	68e5      	ldreq	r5, [r4, #12]
 800bdc0:	6833      	ldreq	r3, [r6, #0]
 800bdc2:	1aed      	subeq	r5, r5, r3
 800bdc4:	68a3      	ldr	r3, [r4, #8]
 800bdc6:	bf0c      	ite	eq
 800bdc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdcc:	2500      	movne	r5, #0
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	bfc4      	itt	gt
 800bdd2:	1a9b      	subgt	r3, r3, r2
 800bdd4:	18ed      	addgt	r5, r5, r3
 800bdd6:	2600      	movs	r6, #0
 800bdd8:	341a      	adds	r4, #26
 800bdda:	42b5      	cmp	r5, r6
 800bddc:	d11a      	bne.n	800be14 <_printf_common+0xc8>
 800bdde:	2000      	movs	r0, #0
 800bde0:	e008      	b.n	800bdf4 <_printf_common+0xa8>
 800bde2:	2301      	movs	r3, #1
 800bde4:	4652      	mov	r2, sl
 800bde6:	4649      	mov	r1, r9
 800bde8:	4638      	mov	r0, r7
 800bdea:	47c0      	blx	r8
 800bdec:	3001      	adds	r0, #1
 800bdee:	d103      	bne.n	800bdf8 <_printf_common+0xac>
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	e7c6      	b.n	800bd8a <_printf_common+0x3e>
 800bdfc:	18e1      	adds	r1, r4, r3
 800bdfe:	1c5a      	adds	r2, r3, #1
 800be00:	2030      	movs	r0, #48	; 0x30
 800be02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be06:	4422      	add	r2, r4
 800be08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be10:	3302      	adds	r3, #2
 800be12:	e7c7      	b.n	800bda4 <_printf_common+0x58>
 800be14:	2301      	movs	r3, #1
 800be16:	4622      	mov	r2, r4
 800be18:	4649      	mov	r1, r9
 800be1a:	4638      	mov	r0, r7
 800be1c:	47c0      	blx	r8
 800be1e:	3001      	adds	r0, #1
 800be20:	d0e6      	beq.n	800bdf0 <_printf_common+0xa4>
 800be22:	3601      	adds	r6, #1
 800be24:	e7d9      	b.n	800bdda <_printf_common+0x8e>
	...

0800be28 <_printf_i>:
 800be28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be2c:	7e0f      	ldrb	r7, [r1, #24]
 800be2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800be30:	2f78      	cmp	r7, #120	; 0x78
 800be32:	4691      	mov	r9, r2
 800be34:	4680      	mov	r8, r0
 800be36:	460c      	mov	r4, r1
 800be38:	469a      	mov	sl, r3
 800be3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800be3e:	d807      	bhi.n	800be50 <_printf_i+0x28>
 800be40:	2f62      	cmp	r7, #98	; 0x62
 800be42:	d80a      	bhi.n	800be5a <_printf_i+0x32>
 800be44:	2f00      	cmp	r7, #0
 800be46:	f000 80d4 	beq.w	800bff2 <_printf_i+0x1ca>
 800be4a:	2f58      	cmp	r7, #88	; 0x58
 800be4c:	f000 80c0 	beq.w	800bfd0 <_printf_i+0x1a8>
 800be50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800be58:	e03a      	b.n	800bed0 <_printf_i+0xa8>
 800be5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800be5e:	2b15      	cmp	r3, #21
 800be60:	d8f6      	bhi.n	800be50 <_printf_i+0x28>
 800be62:	a101      	add	r1, pc, #4	; (adr r1, 800be68 <_printf_i+0x40>)
 800be64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be68:	0800bec1 	.word	0x0800bec1
 800be6c:	0800bed5 	.word	0x0800bed5
 800be70:	0800be51 	.word	0x0800be51
 800be74:	0800be51 	.word	0x0800be51
 800be78:	0800be51 	.word	0x0800be51
 800be7c:	0800be51 	.word	0x0800be51
 800be80:	0800bed5 	.word	0x0800bed5
 800be84:	0800be51 	.word	0x0800be51
 800be88:	0800be51 	.word	0x0800be51
 800be8c:	0800be51 	.word	0x0800be51
 800be90:	0800be51 	.word	0x0800be51
 800be94:	0800bfd9 	.word	0x0800bfd9
 800be98:	0800bf01 	.word	0x0800bf01
 800be9c:	0800bf93 	.word	0x0800bf93
 800bea0:	0800be51 	.word	0x0800be51
 800bea4:	0800be51 	.word	0x0800be51
 800bea8:	0800bffb 	.word	0x0800bffb
 800beac:	0800be51 	.word	0x0800be51
 800beb0:	0800bf01 	.word	0x0800bf01
 800beb4:	0800be51 	.word	0x0800be51
 800beb8:	0800be51 	.word	0x0800be51
 800bebc:	0800bf9b 	.word	0x0800bf9b
 800bec0:	682b      	ldr	r3, [r5, #0]
 800bec2:	1d1a      	adds	r2, r3, #4
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	602a      	str	r2, [r5, #0]
 800bec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800becc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bed0:	2301      	movs	r3, #1
 800bed2:	e09f      	b.n	800c014 <_printf_i+0x1ec>
 800bed4:	6820      	ldr	r0, [r4, #0]
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	0607      	lsls	r7, r0, #24
 800beda:	f103 0104 	add.w	r1, r3, #4
 800bede:	6029      	str	r1, [r5, #0]
 800bee0:	d501      	bpl.n	800bee6 <_printf_i+0xbe>
 800bee2:	681e      	ldr	r6, [r3, #0]
 800bee4:	e003      	b.n	800beee <_printf_i+0xc6>
 800bee6:	0646      	lsls	r6, r0, #25
 800bee8:	d5fb      	bpl.n	800bee2 <_printf_i+0xba>
 800beea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800beee:	2e00      	cmp	r6, #0
 800bef0:	da03      	bge.n	800befa <_printf_i+0xd2>
 800bef2:	232d      	movs	r3, #45	; 0x2d
 800bef4:	4276      	negs	r6, r6
 800bef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800befa:	485a      	ldr	r0, [pc, #360]	; (800c064 <_printf_i+0x23c>)
 800befc:	230a      	movs	r3, #10
 800befe:	e012      	b.n	800bf26 <_printf_i+0xfe>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	6820      	ldr	r0, [r4, #0]
 800bf04:	1d19      	adds	r1, r3, #4
 800bf06:	6029      	str	r1, [r5, #0]
 800bf08:	0605      	lsls	r5, r0, #24
 800bf0a:	d501      	bpl.n	800bf10 <_printf_i+0xe8>
 800bf0c:	681e      	ldr	r6, [r3, #0]
 800bf0e:	e002      	b.n	800bf16 <_printf_i+0xee>
 800bf10:	0641      	lsls	r1, r0, #25
 800bf12:	d5fb      	bpl.n	800bf0c <_printf_i+0xe4>
 800bf14:	881e      	ldrh	r6, [r3, #0]
 800bf16:	4853      	ldr	r0, [pc, #332]	; (800c064 <_printf_i+0x23c>)
 800bf18:	2f6f      	cmp	r7, #111	; 0x6f
 800bf1a:	bf0c      	ite	eq
 800bf1c:	2308      	moveq	r3, #8
 800bf1e:	230a      	movne	r3, #10
 800bf20:	2100      	movs	r1, #0
 800bf22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf26:	6865      	ldr	r5, [r4, #4]
 800bf28:	60a5      	str	r5, [r4, #8]
 800bf2a:	2d00      	cmp	r5, #0
 800bf2c:	bfa2      	ittt	ge
 800bf2e:	6821      	ldrge	r1, [r4, #0]
 800bf30:	f021 0104 	bicge.w	r1, r1, #4
 800bf34:	6021      	strge	r1, [r4, #0]
 800bf36:	b90e      	cbnz	r6, 800bf3c <_printf_i+0x114>
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	d04b      	beq.n	800bfd4 <_printf_i+0x1ac>
 800bf3c:	4615      	mov	r5, r2
 800bf3e:	fbb6 f1f3 	udiv	r1, r6, r3
 800bf42:	fb03 6711 	mls	r7, r3, r1, r6
 800bf46:	5dc7      	ldrb	r7, [r0, r7]
 800bf48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bf4c:	4637      	mov	r7, r6
 800bf4e:	42bb      	cmp	r3, r7
 800bf50:	460e      	mov	r6, r1
 800bf52:	d9f4      	bls.n	800bf3e <_printf_i+0x116>
 800bf54:	2b08      	cmp	r3, #8
 800bf56:	d10b      	bne.n	800bf70 <_printf_i+0x148>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	07de      	lsls	r6, r3, #31
 800bf5c:	d508      	bpl.n	800bf70 <_printf_i+0x148>
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	6861      	ldr	r1, [r4, #4]
 800bf62:	4299      	cmp	r1, r3
 800bf64:	bfde      	ittt	le
 800bf66:	2330      	movle	r3, #48	; 0x30
 800bf68:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf70:	1b52      	subs	r2, r2, r5
 800bf72:	6122      	str	r2, [r4, #16]
 800bf74:	f8cd a000 	str.w	sl, [sp]
 800bf78:	464b      	mov	r3, r9
 800bf7a:	aa03      	add	r2, sp, #12
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	4640      	mov	r0, r8
 800bf80:	f7ff fee4 	bl	800bd4c <_printf_common>
 800bf84:	3001      	adds	r0, #1
 800bf86:	d14a      	bne.n	800c01e <_printf_i+0x1f6>
 800bf88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf8c:	b004      	add	sp, #16
 800bf8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	f043 0320 	orr.w	r3, r3, #32
 800bf98:	6023      	str	r3, [r4, #0]
 800bf9a:	4833      	ldr	r0, [pc, #204]	; (800c068 <_printf_i+0x240>)
 800bf9c:	2778      	movs	r7, #120	; 0x78
 800bf9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bfa2:	6823      	ldr	r3, [r4, #0]
 800bfa4:	6829      	ldr	r1, [r5, #0]
 800bfa6:	061f      	lsls	r7, r3, #24
 800bfa8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bfac:	d402      	bmi.n	800bfb4 <_printf_i+0x18c>
 800bfae:	065f      	lsls	r7, r3, #25
 800bfb0:	bf48      	it	mi
 800bfb2:	b2b6      	uxthmi	r6, r6
 800bfb4:	07df      	lsls	r7, r3, #31
 800bfb6:	bf48      	it	mi
 800bfb8:	f043 0320 	orrmi.w	r3, r3, #32
 800bfbc:	6029      	str	r1, [r5, #0]
 800bfbe:	bf48      	it	mi
 800bfc0:	6023      	strmi	r3, [r4, #0]
 800bfc2:	b91e      	cbnz	r6, 800bfcc <_printf_i+0x1a4>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	f023 0320 	bic.w	r3, r3, #32
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	2310      	movs	r3, #16
 800bfce:	e7a7      	b.n	800bf20 <_printf_i+0xf8>
 800bfd0:	4824      	ldr	r0, [pc, #144]	; (800c064 <_printf_i+0x23c>)
 800bfd2:	e7e4      	b.n	800bf9e <_printf_i+0x176>
 800bfd4:	4615      	mov	r5, r2
 800bfd6:	e7bd      	b.n	800bf54 <_printf_i+0x12c>
 800bfd8:	682b      	ldr	r3, [r5, #0]
 800bfda:	6826      	ldr	r6, [r4, #0]
 800bfdc:	6961      	ldr	r1, [r4, #20]
 800bfde:	1d18      	adds	r0, r3, #4
 800bfe0:	6028      	str	r0, [r5, #0]
 800bfe2:	0635      	lsls	r5, r6, #24
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	d501      	bpl.n	800bfec <_printf_i+0x1c4>
 800bfe8:	6019      	str	r1, [r3, #0]
 800bfea:	e002      	b.n	800bff2 <_printf_i+0x1ca>
 800bfec:	0670      	lsls	r0, r6, #25
 800bfee:	d5fb      	bpl.n	800bfe8 <_printf_i+0x1c0>
 800bff0:	8019      	strh	r1, [r3, #0]
 800bff2:	2300      	movs	r3, #0
 800bff4:	6123      	str	r3, [r4, #16]
 800bff6:	4615      	mov	r5, r2
 800bff8:	e7bc      	b.n	800bf74 <_printf_i+0x14c>
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	1d1a      	adds	r2, r3, #4
 800bffe:	602a      	str	r2, [r5, #0]
 800c000:	681d      	ldr	r5, [r3, #0]
 800c002:	6862      	ldr	r2, [r4, #4]
 800c004:	2100      	movs	r1, #0
 800c006:	4628      	mov	r0, r5
 800c008:	f7f4 f8ea 	bl	80001e0 <memchr>
 800c00c:	b108      	cbz	r0, 800c012 <_printf_i+0x1ea>
 800c00e:	1b40      	subs	r0, r0, r5
 800c010:	6060      	str	r0, [r4, #4]
 800c012:	6863      	ldr	r3, [r4, #4]
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	2300      	movs	r3, #0
 800c018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c01c:	e7aa      	b.n	800bf74 <_printf_i+0x14c>
 800c01e:	6923      	ldr	r3, [r4, #16]
 800c020:	462a      	mov	r2, r5
 800c022:	4649      	mov	r1, r9
 800c024:	4640      	mov	r0, r8
 800c026:	47d0      	blx	sl
 800c028:	3001      	adds	r0, #1
 800c02a:	d0ad      	beq.n	800bf88 <_printf_i+0x160>
 800c02c:	6823      	ldr	r3, [r4, #0]
 800c02e:	079b      	lsls	r3, r3, #30
 800c030:	d413      	bmi.n	800c05a <_printf_i+0x232>
 800c032:	68e0      	ldr	r0, [r4, #12]
 800c034:	9b03      	ldr	r3, [sp, #12]
 800c036:	4298      	cmp	r0, r3
 800c038:	bfb8      	it	lt
 800c03a:	4618      	movlt	r0, r3
 800c03c:	e7a6      	b.n	800bf8c <_printf_i+0x164>
 800c03e:	2301      	movs	r3, #1
 800c040:	4632      	mov	r2, r6
 800c042:	4649      	mov	r1, r9
 800c044:	4640      	mov	r0, r8
 800c046:	47d0      	blx	sl
 800c048:	3001      	adds	r0, #1
 800c04a:	d09d      	beq.n	800bf88 <_printf_i+0x160>
 800c04c:	3501      	adds	r5, #1
 800c04e:	68e3      	ldr	r3, [r4, #12]
 800c050:	9903      	ldr	r1, [sp, #12]
 800c052:	1a5b      	subs	r3, r3, r1
 800c054:	42ab      	cmp	r3, r5
 800c056:	dcf2      	bgt.n	800c03e <_printf_i+0x216>
 800c058:	e7eb      	b.n	800c032 <_printf_i+0x20a>
 800c05a:	2500      	movs	r5, #0
 800c05c:	f104 0619 	add.w	r6, r4, #25
 800c060:	e7f5      	b.n	800c04e <_printf_i+0x226>
 800c062:	bf00      	nop
 800c064:	0800e016 	.word	0x0800e016
 800c068:	0800e027 	.word	0x0800e027

0800c06c <__malloc_lock>:
 800c06c:	4801      	ldr	r0, [pc, #4]	; (800c074 <__malloc_lock+0x8>)
 800c06e:	f000 b912 	b.w	800c296 <__retarget_lock_acquire_recursive>
 800c072:	bf00      	nop
 800c074:	20000df4 	.word	0x20000df4

0800c078 <__malloc_unlock>:
 800c078:	4801      	ldr	r0, [pc, #4]	; (800c080 <__malloc_unlock+0x8>)
 800c07a:	f000 b90d 	b.w	800c298 <__retarget_lock_release_recursive>
 800c07e:	bf00      	nop
 800c080:	20000df4 	.word	0x20000df4

0800c084 <std>:
 800c084:	2300      	movs	r3, #0
 800c086:	b510      	push	{r4, lr}
 800c088:	4604      	mov	r4, r0
 800c08a:	e9c0 3300 	strd	r3, r3, [r0]
 800c08e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c092:	6083      	str	r3, [r0, #8]
 800c094:	8181      	strh	r1, [r0, #12]
 800c096:	6643      	str	r3, [r0, #100]	; 0x64
 800c098:	81c2      	strh	r2, [r0, #14]
 800c09a:	6183      	str	r3, [r0, #24]
 800c09c:	4619      	mov	r1, r3
 800c09e:	2208      	movs	r2, #8
 800c0a0:	305c      	adds	r0, #92	; 0x5c
 800c0a2:	f000 f8b1 	bl	800c208 <memset>
 800c0a6:	4b0d      	ldr	r3, [pc, #52]	; (800c0dc <std+0x58>)
 800c0a8:	6263      	str	r3, [r4, #36]	; 0x24
 800c0aa:	4b0d      	ldr	r3, [pc, #52]	; (800c0e0 <std+0x5c>)
 800c0ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <std+0x60>)
 800c0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0b2:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <std+0x64>)
 800c0b4:	6323      	str	r3, [r4, #48]	; 0x30
 800c0b6:	4b0d      	ldr	r3, [pc, #52]	; (800c0ec <std+0x68>)
 800c0b8:	6224      	str	r4, [r4, #32]
 800c0ba:	429c      	cmp	r4, r3
 800c0bc:	d006      	beq.n	800c0cc <std+0x48>
 800c0be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c0c2:	4294      	cmp	r4, r2
 800c0c4:	d002      	beq.n	800c0cc <std+0x48>
 800c0c6:	33d0      	adds	r3, #208	; 0xd0
 800c0c8:	429c      	cmp	r4, r3
 800c0ca:	d105      	bne.n	800c0d8 <std+0x54>
 800c0cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0d4:	f000 b8de 	b.w	800c294 <__retarget_lock_init_recursive>
 800c0d8:	bd10      	pop	{r4, pc}
 800c0da:	bf00      	nop
 800c0dc:	0800d881 	.word	0x0800d881
 800c0e0:	0800d8a3 	.word	0x0800d8a3
 800c0e4:	0800d8db 	.word	0x0800d8db
 800c0e8:	0800d8ff 	.word	0x0800d8ff
 800c0ec:	20000cb8 	.word	0x20000cb8

0800c0f0 <stdio_exit_handler>:
 800c0f0:	4a02      	ldr	r2, [pc, #8]	; (800c0fc <stdio_exit_handler+0xc>)
 800c0f2:	4903      	ldr	r1, [pc, #12]	; (800c100 <stdio_exit_handler+0x10>)
 800c0f4:	4803      	ldr	r0, [pc, #12]	; (800c104 <stdio_exit_handler+0x14>)
 800c0f6:	f000 b869 	b.w	800c1cc <_fwalk_sglue>
 800c0fa:	bf00      	nop
 800c0fc:	20000050 	.word	0x20000050
 800c100:	0800d139 	.word	0x0800d139
 800c104:	2000005c 	.word	0x2000005c

0800c108 <cleanup_stdio>:
 800c108:	6841      	ldr	r1, [r0, #4]
 800c10a:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <cleanup_stdio+0x34>)
 800c10c:	4299      	cmp	r1, r3
 800c10e:	b510      	push	{r4, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	d001      	beq.n	800c118 <cleanup_stdio+0x10>
 800c114:	f001 f810 	bl	800d138 <_fflush_r>
 800c118:	68a1      	ldr	r1, [r4, #8]
 800c11a:	4b09      	ldr	r3, [pc, #36]	; (800c140 <cleanup_stdio+0x38>)
 800c11c:	4299      	cmp	r1, r3
 800c11e:	d002      	beq.n	800c126 <cleanup_stdio+0x1e>
 800c120:	4620      	mov	r0, r4
 800c122:	f001 f809 	bl	800d138 <_fflush_r>
 800c126:	68e1      	ldr	r1, [r4, #12]
 800c128:	4b06      	ldr	r3, [pc, #24]	; (800c144 <cleanup_stdio+0x3c>)
 800c12a:	4299      	cmp	r1, r3
 800c12c:	d004      	beq.n	800c138 <cleanup_stdio+0x30>
 800c12e:	4620      	mov	r0, r4
 800c130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c134:	f001 b800 	b.w	800d138 <_fflush_r>
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	bf00      	nop
 800c13c:	20000cb8 	.word	0x20000cb8
 800c140:	20000d20 	.word	0x20000d20
 800c144:	20000d88 	.word	0x20000d88

0800c148 <global_stdio_init.part.0>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <global_stdio_init.part.0+0x30>)
 800c14c:	4c0b      	ldr	r4, [pc, #44]	; (800c17c <global_stdio_init.part.0+0x34>)
 800c14e:	4a0c      	ldr	r2, [pc, #48]	; (800c180 <global_stdio_init.part.0+0x38>)
 800c150:	601a      	str	r2, [r3, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	2200      	movs	r2, #0
 800c156:	2104      	movs	r1, #4
 800c158:	f7ff ff94 	bl	800c084 <std>
 800c15c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c160:	2201      	movs	r2, #1
 800c162:	2109      	movs	r1, #9
 800c164:	f7ff ff8e 	bl	800c084 <std>
 800c168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c16c:	2202      	movs	r2, #2
 800c16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c172:	2112      	movs	r1, #18
 800c174:	f7ff bf86 	b.w	800c084 <std>
 800c178:	20000df0 	.word	0x20000df0
 800c17c:	20000cb8 	.word	0x20000cb8
 800c180:	0800c0f1 	.word	0x0800c0f1

0800c184 <__sfp_lock_acquire>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__sfp_lock_acquire+0x8>)
 800c186:	f000 b886 	b.w	800c296 <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	20000df5 	.word	0x20000df5

0800c190 <__sfp_lock_release>:
 800c190:	4801      	ldr	r0, [pc, #4]	; (800c198 <__sfp_lock_release+0x8>)
 800c192:	f000 b881 	b.w	800c298 <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	20000df5 	.word	0x20000df5

0800c19c <__sinit>:
 800c19c:	b510      	push	{r4, lr}
 800c19e:	4604      	mov	r4, r0
 800c1a0:	f7ff fff0 	bl	800c184 <__sfp_lock_acquire>
 800c1a4:	6a23      	ldr	r3, [r4, #32]
 800c1a6:	b11b      	cbz	r3, 800c1b0 <__sinit+0x14>
 800c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1ac:	f7ff bff0 	b.w	800c190 <__sfp_lock_release>
 800c1b0:	4b04      	ldr	r3, [pc, #16]	; (800c1c4 <__sinit+0x28>)
 800c1b2:	6223      	str	r3, [r4, #32]
 800c1b4:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <__sinit+0x2c>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1f5      	bne.n	800c1a8 <__sinit+0xc>
 800c1bc:	f7ff ffc4 	bl	800c148 <global_stdio_init.part.0>
 800c1c0:	e7f2      	b.n	800c1a8 <__sinit+0xc>
 800c1c2:	bf00      	nop
 800c1c4:	0800c109 	.word	0x0800c109
 800c1c8:	20000df0 	.word	0x20000df0

0800c1cc <_fwalk_sglue>:
 800c1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	4688      	mov	r8, r1
 800c1d4:	4614      	mov	r4, r2
 800c1d6:	2600      	movs	r6, #0
 800c1d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1dc:	f1b9 0901 	subs.w	r9, r9, #1
 800c1e0:	d505      	bpl.n	800c1ee <_fwalk_sglue+0x22>
 800c1e2:	6824      	ldr	r4, [r4, #0]
 800c1e4:	2c00      	cmp	r4, #0
 800c1e6:	d1f7      	bne.n	800c1d8 <_fwalk_sglue+0xc>
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	89ab      	ldrh	r3, [r5, #12]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d907      	bls.n	800c204 <_fwalk_sglue+0x38>
 800c1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	d003      	beq.n	800c204 <_fwalk_sglue+0x38>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4638      	mov	r0, r7
 800c200:	47c0      	blx	r8
 800c202:	4306      	orrs	r6, r0
 800c204:	3568      	adds	r5, #104	; 0x68
 800c206:	e7e9      	b.n	800c1dc <_fwalk_sglue+0x10>

0800c208 <memset>:
 800c208:	4402      	add	r2, r0
 800c20a:	4603      	mov	r3, r0
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d100      	bne.n	800c212 <memset+0xa>
 800c210:	4770      	bx	lr
 800c212:	f803 1b01 	strb.w	r1, [r3], #1
 800c216:	e7f9      	b.n	800c20c <memset+0x4>

0800c218 <_localeconv_r>:
 800c218:	4800      	ldr	r0, [pc, #0]	; (800c21c <_localeconv_r+0x4>)
 800c21a:	4770      	bx	lr
 800c21c:	2000019c 	.word	0x2000019c

0800c220 <_sbrk_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d06      	ldr	r5, [pc, #24]	; (800c23c <_sbrk_r+0x1c>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	602b      	str	r3, [r5, #0]
 800c22c:	f7f5 fff0 	bl	8002210 <_sbrk>
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	d102      	bne.n	800c23a <_sbrk_r+0x1a>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	b103      	cbz	r3, 800c23a <_sbrk_r+0x1a>
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	20000df8 	.word	0x20000df8

0800c240 <__errno>:
 800c240:	4b01      	ldr	r3, [pc, #4]	; (800c248 <__errno+0x8>)
 800c242:	6818      	ldr	r0, [r3, #0]
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	200000a8 	.word	0x200000a8

0800c24c <__libc_init_array>:
 800c24c:	b570      	push	{r4, r5, r6, lr}
 800c24e:	4d0d      	ldr	r5, [pc, #52]	; (800c284 <__libc_init_array+0x38>)
 800c250:	4c0d      	ldr	r4, [pc, #52]	; (800c288 <__libc_init_array+0x3c>)
 800c252:	1b64      	subs	r4, r4, r5
 800c254:	10a4      	asrs	r4, r4, #2
 800c256:	2600      	movs	r6, #0
 800c258:	42a6      	cmp	r6, r4
 800c25a:	d109      	bne.n	800c270 <__libc_init_array+0x24>
 800c25c:	4d0b      	ldr	r5, [pc, #44]	; (800c28c <__libc_init_array+0x40>)
 800c25e:	4c0c      	ldr	r4, [pc, #48]	; (800c290 <__libc_init_array+0x44>)
 800c260:	f001 feb4 	bl	800dfcc <_init>
 800c264:	1b64      	subs	r4, r4, r5
 800c266:	10a4      	asrs	r4, r4, #2
 800c268:	2600      	movs	r6, #0
 800c26a:	42a6      	cmp	r6, r4
 800c26c:	d105      	bne.n	800c27a <__libc_init_array+0x2e>
 800c26e:	bd70      	pop	{r4, r5, r6, pc}
 800c270:	f855 3b04 	ldr.w	r3, [r5], #4
 800c274:	4798      	blx	r3
 800c276:	3601      	adds	r6, #1
 800c278:	e7ee      	b.n	800c258 <__libc_init_array+0xc>
 800c27a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c27e:	4798      	blx	r3
 800c280:	3601      	adds	r6, #1
 800c282:	e7f2      	b.n	800c26a <__libc_init_array+0x1e>
 800c284:	0800e37c 	.word	0x0800e37c
 800c288:	0800e37c 	.word	0x0800e37c
 800c28c:	0800e37c 	.word	0x0800e37c
 800c290:	0800e380 	.word	0x0800e380

0800c294 <__retarget_lock_init_recursive>:
 800c294:	4770      	bx	lr

0800c296 <__retarget_lock_acquire_recursive>:
 800c296:	4770      	bx	lr

0800c298 <__retarget_lock_release_recursive>:
 800c298:	4770      	bx	lr

0800c29a <quorem>:
 800c29a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29e:	6903      	ldr	r3, [r0, #16]
 800c2a0:	690c      	ldr	r4, [r1, #16]
 800c2a2:	42a3      	cmp	r3, r4
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	db7e      	blt.n	800c3a6 <quorem+0x10c>
 800c2a8:	3c01      	subs	r4, #1
 800c2aa:	f101 0814 	add.w	r8, r1, #20
 800c2ae:	f100 0514 	add.w	r5, r0, #20
 800c2b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c2bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c2c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c2cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c2d0:	d331      	bcc.n	800c336 <quorem+0x9c>
 800c2d2:	f04f 0e00 	mov.w	lr, #0
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	46ac      	mov	ip, r5
 800c2da:	46f2      	mov	sl, lr
 800c2dc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2e0:	b293      	uxth	r3, r2
 800c2e2:	fb06 e303 	mla	r3, r6, r3, lr
 800c2e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2ea:	0c1a      	lsrs	r2, r3, #16
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	ebaa 0303 	sub.w	r3, sl, r3
 800c2f2:	f8dc a000 	ldr.w	sl, [ip]
 800c2f6:	fa13 f38a 	uxtah	r3, r3, sl
 800c2fa:	fb06 220e 	mla	r2, r6, lr, r2
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	9b00      	ldr	r3, [sp, #0]
 800c302:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c306:	b292      	uxth	r2, r2
 800c308:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c30c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c310:	f8bd 3000 	ldrh.w	r3, [sp]
 800c314:	4581      	cmp	r9, r0
 800c316:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c31a:	f84c 3b04 	str.w	r3, [ip], #4
 800c31e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c322:	d2db      	bcs.n	800c2dc <quorem+0x42>
 800c324:	f855 300b 	ldr.w	r3, [r5, fp]
 800c328:	b92b      	cbnz	r3, 800c336 <quorem+0x9c>
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	429d      	cmp	r5, r3
 800c330:	461a      	mov	r2, r3
 800c332:	d32c      	bcc.n	800c38e <quorem+0xf4>
 800c334:	613c      	str	r4, [r7, #16]
 800c336:	4638      	mov	r0, r7
 800c338:	f001 f9a2 	bl	800d680 <__mcmp>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	db22      	blt.n	800c386 <quorem+0xec>
 800c340:	3601      	adds	r6, #1
 800c342:	4629      	mov	r1, r5
 800c344:	2000      	movs	r0, #0
 800c346:	f858 2b04 	ldr.w	r2, [r8], #4
 800c34a:	f8d1 c000 	ldr.w	ip, [r1]
 800c34e:	b293      	uxth	r3, r2
 800c350:	1ac3      	subs	r3, r0, r3
 800c352:	0c12      	lsrs	r2, r2, #16
 800c354:	fa13 f38c 	uxtah	r3, r3, ip
 800c358:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c35c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c360:	b29b      	uxth	r3, r3
 800c362:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c366:	45c1      	cmp	r9, r8
 800c368:	f841 3b04 	str.w	r3, [r1], #4
 800c36c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c370:	d2e9      	bcs.n	800c346 <quorem+0xac>
 800c372:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c37a:	b922      	cbnz	r2, 800c386 <quorem+0xec>
 800c37c:	3b04      	subs	r3, #4
 800c37e:	429d      	cmp	r5, r3
 800c380:	461a      	mov	r2, r3
 800c382:	d30a      	bcc.n	800c39a <quorem+0x100>
 800c384:	613c      	str	r4, [r7, #16]
 800c386:	4630      	mov	r0, r6
 800c388:	b003      	add	sp, #12
 800c38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	3b04      	subs	r3, #4
 800c392:	2a00      	cmp	r2, #0
 800c394:	d1ce      	bne.n	800c334 <quorem+0x9a>
 800c396:	3c01      	subs	r4, #1
 800c398:	e7c9      	b.n	800c32e <quorem+0x94>
 800c39a:	6812      	ldr	r2, [r2, #0]
 800c39c:	3b04      	subs	r3, #4
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	d1f0      	bne.n	800c384 <quorem+0xea>
 800c3a2:	3c01      	subs	r4, #1
 800c3a4:	e7eb      	b.n	800c37e <quorem+0xe4>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	e7ee      	b.n	800c388 <quorem+0xee>
 800c3aa:	0000      	movs	r0, r0
 800c3ac:	0000      	movs	r0, r0
	...

0800c3b0 <_dtoa_r>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	ed2d 8b04 	vpush	{d8-d9}
 800c3b8:	69c5      	ldr	r5, [r0, #28]
 800c3ba:	b093      	sub	sp, #76	; 0x4c
 800c3bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c3c0:	ec57 6b10 	vmov	r6, r7, d0
 800c3c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c3c8:	9107      	str	r1, [sp, #28]
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c3d0:	b975      	cbnz	r5, 800c3f0 <_dtoa_r+0x40>
 800c3d2:	2010      	movs	r0, #16
 800c3d4:	f7ff fc0a 	bl	800bbec <malloc>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	61e0      	str	r0, [r4, #28]
 800c3dc:	b920      	cbnz	r0, 800c3e8 <_dtoa_r+0x38>
 800c3de:	4bae      	ldr	r3, [pc, #696]	; (800c698 <_dtoa_r+0x2e8>)
 800c3e0:	21ef      	movs	r1, #239	; 0xef
 800c3e2:	48ae      	ldr	r0, [pc, #696]	; (800c69c <_dtoa_r+0x2ec>)
 800c3e4:	f001 fae4 	bl	800d9b0 <__assert_func>
 800c3e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c3ec:	6005      	str	r5, [r0, #0]
 800c3ee:	60c5      	str	r5, [r0, #12]
 800c3f0:	69e3      	ldr	r3, [r4, #28]
 800c3f2:	6819      	ldr	r1, [r3, #0]
 800c3f4:	b151      	cbz	r1, 800c40c <_dtoa_r+0x5c>
 800c3f6:	685a      	ldr	r2, [r3, #4]
 800c3f8:	604a      	str	r2, [r1, #4]
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	4093      	lsls	r3, r2
 800c3fe:	608b      	str	r3, [r1, #8]
 800c400:	4620      	mov	r0, r4
 800c402:	f000 ff01 	bl	800d208 <_Bfree>
 800c406:	69e3      	ldr	r3, [r4, #28]
 800c408:	2200      	movs	r2, #0
 800c40a:	601a      	str	r2, [r3, #0]
 800c40c:	1e3b      	subs	r3, r7, #0
 800c40e:	bfbb      	ittet	lt
 800c410:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c414:	9303      	strlt	r3, [sp, #12]
 800c416:	2300      	movge	r3, #0
 800c418:	2201      	movlt	r2, #1
 800c41a:	bfac      	ite	ge
 800c41c:	f8c8 3000 	strge.w	r3, [r8]
 800c420:	f8c8 2000 	strlt.w	r2, [r8]
 800c424:	4b9e      	ldr	r3, [pc, #632]	; (800c6a0 <_dtoa_r+0x2f0>)
 800c426:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c42a:	ea33 0308 	bics.w	r3, r3, r8
 800c42e:	d11b      	bne.n	800c468 <_dtoa_r+0xb8>
 800c430:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c432:	f242 730f 	movw	r3, #9999	; 0x270f
 800c436:	6013      	str	r3, [r2, #0]
 800c438:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c43c:	4333      	orrs	r3, r6
 800c43e:	f000 8593 	beq.w	800cf68 <_dtoa_r+0xbb8>
 800c442:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c444:	b963      	cbnz	r3, 800c460 <_dtoa_r+0xb0>
 800c446:	4b97      	ldr	r3, [pc, #604]	; (800c6a4 <_dtoa_r+0x2f4>)
 800c448:	e027      	b.n	800c49a <_dtoa_r+0xea>
 800c44a:	4b97      	ldr	r3, [pc, #604]	; (800c6a8 <_dtoa_r+0x2f8>)
 800c44c:	9300      	str	r3, [sp, #0]
 800c44e:	3308      	adds	r3, #8
 800c450:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c452:	6013      	str	r3, [r2, #0]
 800c454:	9800      	ldr	r0, [sp, #0]
 800c456:	b013      	add	sp, #76	; 0x4c
 800c458:	ecbd 8b04 	vpop	{d8-d9}
 800c45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	4b90      	ldr	r3, [pc, #576]	; (800c6a4 <_dtoa_r+0x2f4>)
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	3303      	adds	r3, #3
 800c466:	e7f3      	b.n	800c450 <_dtoa_r+0xa0>
 800c468:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c46c:	2200      	movs	r2, #0
 800c46e:	ec51 0b17 	vmov	r0, r1, d7
 800c472:	eeb0 8a47 	vmov.f32	s16, s14
 800c476:	eef0 8a67 	vmov.f32	s17, s15
 800c47a:	2300      	movs	r3, #0
 800c47c:	f7f4 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c480:	4681      	mov	r9, r0
 800c482:	b160      	cbz	r0, 800c49e <_dtoa_r+0xee>
 800c484:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c486:	2301      	movs	r3, #1
 800c488:	6013      	str	r3, [r2, #0]
 800c48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 8568 	beq.w	800cf62 <_dtoa_r+0xbb2>
 800c492:	4b86      	ldr	r3, [pc, #536]	; (800c6ac <_dtoa_r+0x2fc>)
 800c494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	3b01      	subs	r3, #1
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	e7da      	b.n	800c454 <_dtoa_r+0xa4>
 800c49e:	aa10      	add	r2, sp, #64	; 0x40
 800c4a0:	a911      	add	r1, sp, #68	; 0x44
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4a8:	eef0 0a68 	vmov.f32	s1, s17
 800c4ac:	f001 f98e 	bl	800d7cc <__d2b>
 800c4b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c4b4:	4682      	mov	sl, r0
 800c4b6:	2d00      	cmp	r5, #0
 800c4b8:	d07f      	beq.n	800c5ba <_dtoa_r+0x20a>
 800c4ba:	ee18 3a90 	vmov	r3, s17
 800c4be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c4c6:	ec51 0b18 	vmov	r0, r1, d8
 800c4ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c4ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c4d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4b75      	ldr	r3, [pc, #468]	; (800c6b0 <_dtoa_r+0x300>)
 800c4dc:	f7f3 fedc 	bl	8000298 <__aeabi_dsub>
 800c4e0:	a367      	add	r3, pc, #412	; (adr r3, 800c680 <_dtoa_r+0x2d0>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f7f4 f88f 	bl	8000608 <__aeabi_dmul>
 800c4ea:	a367      	add	r3, pc, #412	; (adr r3, 800c688 <_dtoa_r+0x2d8>)
 800c4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f0:	f7f3 fed4 	bl	800029c <__adddf3>
 800c4f4:	4606      	mov	r6, r0
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	460f      	mov	r7, r1
 800c4fa:	f7f4 f81b 	bl	8000534 <__aeabi_i2d>
 800c4fe:	a364      	add	r3, pc, #400	; (adr r3, 800c690 <_dtoa_r+0x2e0>)
 800c500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c504:	f7f4 f880 	bl	8000608 <__aeabi_dmul>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f3 fec4 	bl	800029c <__adddf3>
 800c514:	4606      	mov	r6, r0
 800c516:	460f      	mov	r7, r1
 800c518:	f7f4 fb26 	bl	8000b68 <__aeabi_d2iz>
 800c51c:	2200      	movs	r2, #0
 800c51e:	4683      	mov	fp, r0
 800c520:	2300      	movs	r3, #0
 800c522:	4630      	mov	r0, r6
 800c524:	4639      	mov	r1, r7
 800c526:	f7f4 fae1 	bl	8000aec <__aeabi_dcmplt>
 800c52a:	b148      	cbz	r0, 800c540 <_dtoa_r+0x190>
 800c52c:	4658      	mov	r0, fp
 800c52e:	f7f4 f801 	bl	8000534 <__aeabi_i2d>
 800c532:	4632      	mov	r2, r6
 800c534:	463b      	mov	r3, r7
 800c536:	f7f4 facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800c53a:	b908      	cbnz	r0, 800c540 <_dtoa_r+0x190>
 800c53c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c540:	f1bb 0f16 	cmp.w	fp, #22
 800c544:	d857      	bhi.n	800c5f6 <_dtoa_r+0x246>
 800c546:	4b5b      	ldr	r3, [pc, #364]	; (800c6b4 <_dtoa_r+0x304>)
 800c548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	ec51 0b18 	vmov	r0, r1, d8
 800c554:	f7f4 faca 	bl	8000aec <__aeabi_dcmplt>
 800c558:	2800      	cmp	r0, #0
 800c55a:	d04e      	beq.n	800c5fa <_dtoa_r+0x24a>
 800c55c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c560:	2300      	movs	r3, #0
 800c562:	930c      	str	r3, [sp, #48]	; 0x30
 800c564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c566:	1b5b      	subs	r3, r3, r5
 800c568:	1e5a      	subs	r2, r3, #1
 800c56a:	bf45      	ittet	mi
 800c56c:	f1c3 0301 	rsbmi	r3, r3, #1
 800c570:	9305      	strmi	r3, [sp, #20]
 800c572:	2300      	movpl	r3, #0
 800c574:	2300      	movmi	r3, #0
 800c576:	9206      	str	r2, [sp, #24]
 800c578:	bf54      	ite	pl
 800c57a:	9305      	strpl	r3, [sp, #20]
 800c57c:	9306      	strmi	r3, [sp, #24]
 800c57e:	f1bb 0f00 	cmp.w	fp, #0
 800c582:	db3c      	blt.n	800c5fe <_dtoa_r+0x24e>
 800c584:	9b06      	ldr	r3, [sp, #24]
 800c586:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c58a:	445b      	add	r3, fp
 800c58c:	9306      	str	r3, [sp, #24]
 800c58e:	2300      	movs	r3, #0
 800c590:	9308      	str	r3, [sp, #32]
 800c592:	9b07      	ldr	r3, [sp, #28]
 800c594:	2b09      	cmp	r3, #9
 800c596:	d868      	bhi.n	800c66a <_dtoa_r+0x2ba>
 800c598:	2b05      	cmp	r3, #5
 800c59a:	bfc4      	itt	gt
 800c59c:	3b04      	subgt	r3, #4
 800c59e:	9307      	strgt	r3, [sp, #28]
 800c5a0:	9b07      	ldr	r3, [sp, #28]
 800c5a2:	f1a3 0302 	sub.w	r3, r3, #2
 800c5a6:	bfcc      	ite	gt
 800c5a8:	2500      	movgt	r5, #0
 800c5aa:	2501      	movle	r5, #1
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	f200 8085 	bhi.w	800c6bc <_dtoa_r+0x30c>
 800c5b2:	e8df f003 	tbb	[pc, r3]
 800c5b6:	3b2e      	.short	0x3b2e
 800c5b8:	5839      	.short	0x5839
 800c5ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c5be:	441d      	add	r5, r3
 800c5c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c5c4:	2b20      	cmp	r3, #32
 800c5c6:	bfc1      	itttt	gt
 800c5c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c5cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800c5d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c5d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c5d8:	bfd6      	itet	le
 800c5da:	f1c3 0320 	rsble	r3, r3, #32
 800c5de:	ea48 0003 	orrgt.w	r0, r8, r3
 800c5e2:	fa06 f003 	lslle.w	r0, r6, r3
 800c5e6:	f7f3 ff95 	bl	8000514 <__aeabi_ui2d>
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c5f0:	3d01      	subs	r5, #1
 800c5f2:	920e      	str	r2, [sp, #56]	; 0x38
 800c5f4:	e76f      	b.n	800c4d6 <_dtoa_r+0x126>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e7b3      	b.n	800c562 <_dtoa_r+0x1b2>
 800c5fa:	900c      	str	r0, [sp, #48]	; 0x30
 800c5fc:	e7b2      	b.n	800c564 <_dtoa_r+0x1b4>
 800c5fe:	9b05      	ldr	r3, [sp, #20]
 800c600:	eba3 030b 	sub.w	r3, r3, fp
 800c604:	9305      	str	r3, [sp, #20]
 800c606:	f1cb 0300 	rsb	r3, fp, #0
 800c60a:	9308      	str	r3, [sp, #32]
 800c60c:	2300      	movs	r3, #0
 800c60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c610:	e7bf      	b.n	800c592 <_dtoa_r+0x1e2>
 800c612:	2300      	movs	r3, #0
 800c614:	9309      	str	r3, [sp, #36]	; 0x24
 800c616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c618:	2b00      	cmp	r3, #0
 800c61a:	dc52      	bgt.n	800c6c2 <_dtoa_r+0x312>
 800c61c:	2301      	movs	r3, #1
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	461a      	mov	r2, r3
 800c624:	920a      	str	r2, [sp, #40]	; 0x28
 800c626:	e00b      	b.n	800c640 <_dtoa_r+0x290>
 800c628:	2301      	movs	r3, #1
 800c62a:	e7f3      	b.n	800c614 <_dtoa_r+0x264>
 800c62c:	2300      	movs	r3, #0
 800c62e:	9309      	str	r3, [sp, #36]	; 0x24
 800c630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c632:	445b      	add	r3, fp
 800c634:	9301      	str	r3, [sp, #4]
 800c636:	3301      	adds	r3, #1
 800c638:	2b01      	cmp	r3, #1
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	bfb8      	it	lt
 800c63e:	2301      	movlt	r3, #1
 800c640:	69e0      	ldr	r0, [r4, #28]
 800c642:	2100      	movs	r1, #0
 800c644:	2204      	movs	r2, #4
 800c646:	f102 0614 	add.w	r6, r2, #20
 800c64a:	429e      	cmp	r6, r3
 800c64c:	d93d      	bls.n	800c6ca <_dtoa_r+0x31a>
 800c64e:	6041      	str	r1, [r0, #4]
 800c650:	4620      	mov	r0, r4
 800c652:	f000 fd99 	bl	800d188 <_Balloc>
 800c656:	9000      	str	r0, [sp, #0]
 800c658:	2800      	cmp	r0, #0
 800c65a:	d139      	bne.n	800c6d0 <_dtoa_r+0x320>
 800c65c:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <_dtoa_r+0x308>)
 800c65e:	4602      	mov	r2, r0
 800c660:	f240 11af 	movw	r1, #431	; 0x1af
 800c664:	e6bd      	b.n	800c3e2 <_dtoa_r+0x32>
 800c666:	2301      	movs	r3, #1
 800c668:	e7e1      	b.n	800c62e <_dtoa_r+0x27e>
 800c66a:	2501      	movs	r5, #1
 800c66c:	2300      	movs	r3, #0
 800c66e:	9307      	str	r3, [sp, #28]
 800c670:	9509      	str	r5, [sp, #36]	; 0x24
 800c672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c676:	9301      	str	r3, [sp, #4]
 800c678:	9304      	str	r3, [sp, #16]
 800c67a:	2200      	movs	r2, #0
 800c67c:	2312      	movs	r3, #18
 800c67e:	e7d1      	b.n	800c624 <_dtoa_r+0x274>
 800c680:	636f4361 	.word	0x636f4361
 800c684:	3fd287a7 	.word	0x3fd287a7
 800c688:	8b60c8b3 	.word	0x8b60c8b3
 800c68c:	3fc68a28 	.word	0x3fc68a28
 800c690:	509f79fb 	.word	0x509f79fb
 800c694:	3fd34413 	.word	0x3fd34413
 800c698:	0800e146 	.word	0x0800e146
 800c69c:	0800e15d 	.word	0x0800e15d
 800c6a0:	7ff00000 	.word	0x7ff00000
 800c6a4:	0800e142 	.word	0x0800e142
 800c6a8:	0800e139 	.word	0x0800e139
 800c6ac:	0800e015 	.word	0x0800e015
 800c6b0:	3ff80000 	.word	0x3ff80000
 800c6b4:	0800e248 	.word	0x0800e248
 800c6b8:	0800e1b5 	.word	0x0800e1b5
 800c6bc:	2301      	movs	r3, #1
 800c6be:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c0:	e7d7      	b.n	800c672 <_dtoa_r+0x2c2>
 800c6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	e7ba      	b.n	800c640 <_dtoa_r+0x290>
 800c6ca:	3101      	adds	r1, #1
 800c6cc:	0052      	lsls	r2, r2, #1
 800c6ce:	e7ba      	b.n	800c646 <_dtoa_r+0x296>
 800c6d0:	69e3      	ldr	r3, [r4, #28]
 800c6d2:	9a00      	ldr	r2, [sp, #0]
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	9b04      	ldr	r3, [sp, #16]
 800c6d8:	2b0e      	cmp	r3, #14
 800c6da:	f200 80a8 	bhi.w	800c82e <_dtoa_r+0x47e>
 800c6de:	2d00      	cmp	r5, #0
 800c6e0:	f000 80a5 	beq.w	800c82e <_dtoa_r+0x47e>
 800c6e4:	f1bb 0f00 	cmp.w	fp, #0
 800c6e8:	dd38      	ble.n	800c75c <_dtoa_r+0x3ac>
 800c6ea:	4bc0      	ldr	r3, [pc, #768]	; (800c9ec <_dtoa_r+0x63c>)
 800c6ec:	f00b 020f 	and.w	r2, fp, #15
 800c6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c6f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c6fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c700:	d019      	beq.n	800c736 <_dtoa_r+0x386>
 800c702:	4bbb      	ldr	r3, [pc, #748]	; (800c9f0 <_dtoa_r+0x640>)
 800c704:	ec51 0b18 	vmov	r0, r1, d8
 800c708:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c70c:	f7f4 f8a6 	bl	800085c <__aeabi_ddiv>
 800c710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c714:	f008 080f 	and.w	r8, r8, #15
 800c718:	2503      	movs	r5, #3
 800c71a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c9f0 <_dtoa_r+0x640>
 800c71e:	f1b8 0f00 	cmp.w	r8, #0
 800c722:	d10a      	bne.n	800c73a <_dtoa_r+0x38a>
 800c724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	f7f4 f896 	bl	800085c <__aeabi_ddiv>
 800c730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c734:	e02b      	b.n	800c78e <_dtoa_r+0x3de>
 800c736:	2502      	movs	r5, #2
 800c738:	e7ef      	b.n	800c71a <_dtoa_r+0x36a>
 800c73a:	f018 0f01 	tst.w	r8, #1
 800c73e:	d008      	beq.n	800c752 <_dtoa_r+0x3a2>
 800c740:	4630      	mov	r0, r6
 800c742:	4639      	mov	r1, r7
 800c744:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c748:	f7f3 ff5e 	bl	8000608 <__aeabi_dmul>
 800c74c:	3501      	adds	r5, #1
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c756:	f109 0908 	add.w	r9, r9, #8
 800c75a:	e7e0      	b.n	800c71e <_dtoa_r+0x36e>
 800c75c:	f000 809f 	beq.w	800c89e <_dtoa_r+0x4ee>
 800c760:	f1cb 0600 	rsb	r6, fp, #0
 800c764:	4ba1      	ldr	r3, [pc, #644]	; (800c9ec <_dtoa_r+0x63c>)
 800c766:	4fa2      	ldr	r7, [pc, #648]	; (800c9f0 <_dtoa_r+0x640>)
 800c768:	f006 020f 	and.w	r2, r6, #15
 800c76c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	ec51 0b18 	vmov	r0, r1, d8
 800c778:	f7f3 ff46 	bl	8000608 <__aeabi_dmul>
 800c77c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c780:	1136      	asrs	r6, r6, #4
 800c782:	2300      	movs	r3, #0
 800c784:	2502      	movs	r5, #2
 800c786:	2e00      	cmp	r6, #0
 800c788:	d17e      	bne.n	800c888 <_dtoa_r+0x4d8>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1d0      	bne.n	800c730 <_dtoa_r+0x380>
 800c78e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c790:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 8084 	beq.w	800c8a2 <_dtoa_r+0x4f2>
 800c79a:	4b96      	ldr	r3, [pc, #600]	; (800c9f4 <_dtoa_r+0x644>)
 800c79c:	2200      	movs	r2, #0
 800c79e:	4640      	mov	r0, r8
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	f7f4 f9a3 	bl	8000aec <__aeabi_dcmplt>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d07b      	beq.n	800c8a2 <_dtoa_r+0x4f2>
 800c7aa:	9b04      	ldr	r3, [sp, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d078      	beq.n	800c8a2 <_dtoa_r+0x4f2>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	dd39      	ble.n	800c82a <_dtoa_r+0x47a>
 800c7b6:	4b90      	ldr	r3, [pc, #576]	; (800c9f8 <_dtoa_r+0x648>)
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	4649      	mov	r1, r9
 800c7be:	f7f3 ff23 	bl	8000608 <__aeabi_dmul>
 800c7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7c6:	9e01      	ldr	r6, [sp, #4]
 800c7c8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c7cc:	3501      	adds	r5, #1
 800c7ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f7f3 feae 	bl	8000534 <__aeabi_i2d>
 800c7d8:	4642      	mov	r2, r8
 800c7da:	464b      	mov	r3, r9
 800c7dc:	f7f3 ff14 	bl	8000608 <__aeabi_dmul>
 800c7e0:	4b86      	ldr	r3, [pc, #536]	; (800c9fc <_dtoa_r+0x64c>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f7f3 fd5a 	bl	800029c <__adddf3>
 800c7e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c7ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7f0:	9303      	str	r3, [sp, #12]
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	d158      	bne.n	800c8a8 <_dtoa_r+0x4f8>
 800c7f6:	4b82      	ldr	r3, [pc, #520]	; (800ca00 <_dtoa_r+0x650>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	4640      	mov	r0, r8
 800c7fc:	4649      	mov	r1, r9
 800c7fe:	f7f3 fd4b 	bl	8000298 <__aeabi_dsub>
 800c802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c806:	4680      	mov	r8, r0
 800c808:	4689      	mov	r9, r1
 800c80a:	f7f4 f98d 	bl	8000b28 <__aeabi_dcmpgt>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f040 8296 	bne.w	800cd40 <_dtoa_r+0x990>
 800c814:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c818:	4640      	mov	r0, r8
 800c81a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c81e:	4649      	mov	r1, r9
 800c820:	f7f4 f964 	bl	8000aec <__aeabi_dcmplt>
 800c824:	2800      	cmp	r0, #0
 800c826:	f040 8289 	bne.w	800cd3c <_dtoa_r+0x98c>
 800c82a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c82e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c830:	2b00      	cmp	r3, #0
 800c832:	f2c0 814e 	blt.w	800cad2 <_dtoa_r+0x722>
 800c836:	f1bb 0f0e 	cmp.w	fp, #14
 800c83a:	f300 814a 	bgt.w	800cad2 <_dtoa_r+0x722>
 800c83e:	4b6b      	ldr	r3, [pc, #428]	; (800c9ec <_dtoa_r+0x63c>)
 800c840:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c844:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f280 80dc 	bge.w	800ca08 <_dtoa_r+0x658>
 800c850:	9b04      	ldr	r3, [sp, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f300 80d8 	bgt.w	800ca08 <_dtoa_r+0x658>
 800c858:	f040 826f 	bne.w	800cd3a <_dtoa_r+0x98a>
 800c85c:	4b68      	ldr	r3, [pc, #416]	; (800ca00 <_dtoa_r+0x650>)
 800c85e:	2200      	movs	r2, #0
 800c860:	4640      	mov	r0, r8
 800c862:	4649      	mov	r1, r9
 800c864:	f7f3 fed0 	bl	8000608 <__aeabi_dmul>
 800c868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c86c:	f7f4 f952 	bl	8000b14 <__aeabi_dcmpge>
 800c870:	9e04      	ldr	r6, [sp, #16]
 800c872:	4637      	mov	r7, r6
 800c874:	2800      	cmp	r0, #0
 800c876:	f040 8245 	bne.w	800cd04 <_dtoa_r+0x954>
 800c87a:	9d00      	ldr	r5, [sp, #0]
 800c87c:	2331      	movs	r3, #49	; 0x31
 800c87e:	f805 3b01 	strb.w	r3, [r5], #1
 800c882:	f10b 0b01 	add.w	fp, fp, #1
 800c886:	e241      	b.n	800cd0c <_dtoa_r+0x95c>
 800c888:	07f2      	lsls	r2, r6, #31
 800c88a:	d505      	bpl.n	800c898 <_dtoa_r+0x4e8>
 800c88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c890:	f7f3 feba 	bl	8000608 <__aeabi_dmul>
 800c894:	3501      	adds	r5, #1
 800c896:	2301      	movs	r3, #1
 800c898:	1076      	asrs	r6, r6, #1
 800c89a:	3708      	adds	r7, #8
 800c89c:	e773      	b.n	800c786 <_dtoa_r+0x3d6>
 800c89e:	2502      	movs	r5, #2
 800c8a0:	e775      	b.n	800c78e <_dtoa_r+0x3de>
 800c8a2:	9e04      	ldr	r6, [sp, #16]
 800c8a4:	465f      	mov	r7, fp
 800c8a6:	e792      	b.n	800c7ce <_dtoa_r+0x41e>
 800c8a8:	9900      	ldr	r1, [sp, #0]
 800c8aa:	4b50      	ldr	r3, [pc, #320]	; (800c9ec <_dtoa_r+0x63c>)
 800c8ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c8b0:	4431      	add	r1, r6
 800c8b2:	9102      	str	r1, [sp, #8]
 800c8b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c8b6:	eeb0 9a47 	vmov.f32	s18, s14
 800c8ba:	eef0 9a67 	vmov.f32	s19, s15
 800c8be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c8c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c8c6:	2900      	cmp	r1, #0
 800c8c8:	d044      	beq.n	800c954 <_dtoa_r+0x5a4>
 800c8ca:	494e      	ldr	r1, [pc, #312]	; (800ca04 <_dtoa_r+0x654>)
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f7f3 ffc5 	bl	800085c <__aeabi_ddiv>
 800c8d2:	ec53 2b19 	vmov	r2, r3, d9
 800c8d6:	f7f3 fcdf 	bl	8000298 <__aeabi_dsub>
 800c8da:	9d00      	ldr	r5, [sp, #0]
 800c8dc:	ec41 0b19 	vmov	d9, r0, r1
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	f7f4 f940 	bl	8000b68 <__aeabi_d2iz>
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	f7f3 fe23 	bl	8000534 <__aeabi_i2d>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f7f3 fccf 	bl	8000298 <__aeabi_dsub>
 800c8fa:	3630      	adds	r6, #48	; 0x30
 800c8fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c900:	ec53 2b19 	vmov	r2, r3, d9
 800c904:	4680      	mov	r8, r0
 800c906:	4689      	mov	r9, r1
 800c908:	f7f4 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d164      	bne.n	800c9da <_dtoa_r+0x62a>
 800c910:	4642      	mov	r2, r8
 800c912:	464b      	mov	r3, r9
 800c914:	4937      	ldr	r1, [pc, #220]	; (800c9f4 <_dtoa_r+0x644>)
 800c916:	2000      	movs	r0, #0
 800c918:	f7f3 fcbe 	bl	8000298 <__aeabi_dsub>
 800c91c:	ec53 2b19 	vmov	r2, r3, d9
 800c920:	f7f4 f8e4 	bl	8000aec <__aeabi_dcmplt>
 800c924:	2800      	cmp	r0, #0
 800c926:	f040 80b6 	bne.w	800ca96 <_dtoa_r+0x6e6>
 800c92a:	9b02      	ldr	r3, [sp, #8]
 800c92c:	429d      	cmp	r5, r3
 800c92e:	f43f af7c 	beq.w	800c82a <_dtoa_r+0x47a>
 800c932:	4b31      	ldr	r3, [pc, #196]	; (800c9f8 <_dtoa_r+0x648>)
 800c934:	ec51 0b19 	vmov	r0, r1, d9
 800c938:	2200      	movs	r2, #0
 800c93a:	f7f3 fe65 	bl	8000608 <__aeabi_dmul>
 800c93e:	4b2e      	ldr	r3, [pc, #184]	; (800c9f8 <_dtoa_r+0x648>)
 800c940:	ec41 0b19 	vmov	d9, r0, r1
 800c944:	2200      	movs	r2, #0
 800c946:	4640      	mov	r0, r8
 800c948:	4649      	mov	r1, r9
 800c94a:	f7f3 fe5d 	bl	8000608 <__aeabi_dmul>
 800c94e:	4680      	mov	r8, r0
 800c950:	4689      	mov	r9, r1
 800c952:	e7c5      	b.n	800c8e0 <_dtoa_r+0x530>
 800c954:	ec51 0b17 	vmov	r0, r1, d7
 800c958:	f7f3 fe56 	bl	8000608 <__aeabi_dmul>
 800c95c:	9b02      	ldr	r3, [sp, #8]
 800c95e:	9d00      	ldr	r5, [sp, #0]
 800c960:	930f      	str	r3, [sp, #60]	; 0x3c
 800c962:	ec41 0b19 	vmov	d9, r0, r1
 800c966:	4649      	mov	r1, r9
 800c968:	4640      	mov	r0, r8
 800c96a:	f7f4 f8fd 	bl	8000b68 <__aeabi_d2iz>
 800c96e:	4606      	mov	r6, r0
 800c970:	f7f3 fde0 	bl	8000534 <__aeabi_i2d>
 800c974:	3630      	adds	r6, #48	; 0x30
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4640      	mov	r0, r8
 800c97c:	4649      	mov	r1, r9
 800c97e:	f7f3 fc8b 	bl	8000298 <__aeabi_dsub>
 800c982:	f805 6b01 	strb.w	r6, [r5], #1
 800c986:	9b02      	ldr	r3, [sp, #8]
 800c988:	429d      	cmp	r5, r3
 800c98a:	4680      	mov	r8, r0
 800c98c:	4689      	mov	r9, r1
 800c98e:	f04f 0200 	mov.w	r2, #0
 800c992:	d124      	bne.n	800c9de <_dtoa_r+0x62e>
 800c994:	4b1b      	ldr	r3, [pc, #108]	; (800ca04 <_dtoa_r+0x654>)
 800c996:	ec51 0b19 	vmov	r0, r1, d9
 800c99a:	f7f3 fc7f 	bl	800029c <__adddf3>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	f7f4 f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 800c9aa:	2800      	cmp	r0, #0
 800c9ac:	d173      	bne.n	800ca96 <_dtoa_r+0x6e6>
 800c9ae:	ec53 2b19 	vmov	r2, r3, d9
 800c9b2:	4914      	ldr	r1, [pc, #80]	; (800ca04 <_dtoa_r+0x654>)
 800c9b4:	2000      	movs	r0, #0
 800c9b6:	f7f3 fc6f 	bl	8000298 <__aeabi_dsub>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4640      	mov	r0, r8
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	f7f4 f893 	bl	8000aec <__aeabi_dcmplt>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	f43f af2f 	beq.w	800c82a <_dtoa_r+0x47a>
 800c9cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c9ce:	1e6b      	subs	r3, r5, #1
 800c9d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c9d6:	2b30      	cmp	r3, #48	; 0x30
 800c9d8:	d0f8      	beq.n	800c9cc <_dtoa_r+0x61c>
 800c9da:	46bb      	mov	fp, r7
 800c9dc:	e04a      	b.n	800ca74 <_dtoa_r+0x6c4>
 800c9de:	4b06      	ldr	r3, [pc, #24]	; (800c9f8 <_dtoa_r+0x648>)
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	4680      	mov	r8, r0
 800c9e6:	4689      	mov	r9, r1
 800c9e8:	e7bd      	b.n	800c966 <_dtoa_r+0x5b6>
 800c9ea:	bf00      	nop
 800c9ec:	0800e248 	.word	0x0800e248
 800c9f0:	0800e220 	.word	0x0800e220
 800c9f4:	3ff00000 	.word	0x3ff00000
 800c9f8:	40240000 	.word	0x40240000
 800c9fc:	401c0000 	.word	0x401c0000
 800ca00:	40140000 	.word	0x40140000
 800ca04:	3fe00000 	.word	0x3fe00000
 800ca08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ca0c:	9d00      	ldr	r5, [sp, #0]
 800ca0e:	4642      	mov	r2, r8
 800ca10:	464b      	mov	r3, r9
 800ca12:	4630      	mov	r0, r6
 800ca14:	4639      	mov	r1, r7
 800ca16:	f7f3 ff21 	bl	800085c <__aeabi_ddiv>
 800ca1a:	f7f4 f8a5 	bl	8000b68 <__aeabi_d2iz>
 800ca1e:	9001      	str	r0, [sp, #4]
 800ca20:	f7f3 fd88 	bl	8000534 <__aeabi_i2d>
 800ca24:	4642      	mov	r2, r8
 800ca26:	464b      	mov	r3, r9
 800ca28:	f7f3 fdee 	bl	8000608 <__aeabi_dmul>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4630      	mov	r0, r6
 800ca32:	4639      	mov	r1, r7
 800ca34:	f7f3 fc30 	bl	8000298 <__aeabi_dsub>
 800ca38:	9e01      	ldr	r6, [sp, #4]
 800ca3a:	9f04      	ldr	r7, [sp, #16]
 800ca3c:	3630      	adds	r6, #48	; 0x30
 800ca3e:	f805 6b01 	strb.w	r6, [r5], #1
 800ca42:	9e00      	ldr	r6, [sp, #0]
 800ca44:	1bae      	subs	r6, r5, r6
 800ca46:	42b7      	cmp	r7, r6
 800ca48:	4602      	mov	r2, r0
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	d134      	bne.n	800cab8 <_dtoa_r+0x708>
 800ca4e:	f7f3 fc25 	bl	800029c <__adddf3>
 800ca52:	4642      	mov	r2, r8
 800ca54:	464b      	mov	r3, r9
 800ca56:	4606      	mov	r6, r0
 800ca58:	460f      	mov	r7, r1
 800ca5a:	f7f4 f865 	bl	8000b28 <__aeabi_dcmpgt>
 800ca5e:	b9c8      	cbnz	r0, 800ca94 <_dtoa_r+0x6e4>
 800ca60:	4642      	mov	r2, r8
 800ca62:	464b      	mov	r3, r9
 800ca64:	4630      	mov	r0, r6
 800ca66:	4639      	mov	r1, r7
 800ca68:	f7f4 f836 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca6c:	b110      	cbz	r0, 800ca74 <_dtoa_r+0x6c4>
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	07db      	lsls	r3, r3, #31
 800ca72:	d40f      	bmi.n	800ca94 <_dtoa_r+0x6e4>
 800ca74:	4651      	mov	r1, sl
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 fbc6 	bl	800d208 <_Bfree>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca80:	702b      	strb	r3, [r5, #0]
 800ca82:	f10b 0301 	add.w	r3, fp, #1
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	f43f ace2 	beq.w	800c454 <_dtoa_r+0xa4>
 800ca90:	601d      	str	r5, [r3, #0]
 800ca92:	e4df      	b.n	800c454 <_dtoa_r+0xa4>
 800ca94:	465f      	mov	r7, fp
 800ca96:	462b      	mov	r3, r5
 800ca98:	461d      	mov	r5, r3
 800ca9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca9e:	2a39      	cmp	r2, #57	; 0x39
 800caa0:	d106      	bne.n	800cab0 <_dtoa_r+0x700>
 800caa2:	9a00      	ldr	r2, [sp, #0]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d1f7      	bne.n	800ca98 <_dtoa_r+0x6e8>
 800caa8:	9900      	ldr	r1, [sp, #0]
 800caaa:	2230      	movs	r2, #48	; 0x30
 800caac:	3701      	adds	r7, #1
 800caae:	700a      	strb	r2, [r1, #0]
 800cab0:	781a      	ldrb	r2, [r3, #0]
 800cab2:	3201      	adds	r2, #1
 800cab4:	701a      	strb	r2, [r3, #0]
 800cab6:	e790      	b.n	800c9da <_dtoa_r+0x62a>
 800cab8:	4ba3      	ldr	r3, [pc, #652]	; (800cd48 <_dtoa_r+0x998>)
 800caba:	2200      	movs	r2, #0
 800cabc:	f7f3 fda4 	bl	8000608 <__aeabi_dmul>
 800cac0:	2200      	movs	r2, #0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4606      	mov	r6, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	f7f4 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 800cacc:	2800      	cmp	r0, #0
 800cace:	d09e      	beq.n	800ca0e <_dtoa_r+0x65e>
 800cad0:	e7d0      	b.n	800ca74 <_dtoa_r+0x6c4>
 800cad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	f000 80ca 	beq.w	800cc6e <_dtoa_r+0x8be>
 800cada:	9a07      	ldr	r2, [sp, #28]
 800cadc:	2a01      	cmp	r2, #1
 800cade:	f300 80ad 	bgt.w	800cc3c <_dtoa_r+0x88c>
 800cae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cae4:	2a00      	cmp	r2, #0
 800cae6:	f000 80a5 	beq.w	800cc34 <_dtoa_r+0x884>
 800caea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800caee:	9e08      	ldr	r6, [sp, #32]
 800caf0:	9d05      	ldr	r5, [sp, #20]
 800caf2:	9a05      	ldr	r2, [sp, #20]
 800caf4:	441a      	add	r2, r3
 800caf6:	9205      	str	r2, [sp, #20]
 800caf8:	9a06      	ldr	r2, [sp, #24]
 800cafa:	2101      	movs	r1, #1
 800cafc:	441a      	add	r2, r3
 800cafe:	4620      	mov	r0, r4
 800cb00:	9206      	str	r2, [sp, #24]
 800cb02:	f000 fc37 	bl	800d374 <__i2b>
 800cb06:	4607      	mov	r7, r0
 800cb08:	b165      	cbz	r5, 800cb24 <_dtoa_r+0x774>
 800cb0a:	9b06      	ldr	r3, [sp, #24]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dd09      	ble.n	800cb24 <_dtoa_r+0x774>
 800cb10:	42ab      	cmp	r3, r5
 800cb12:	9a05      	ldr	r2, [sp, #20]
 800cb14:	bfa8      	it	ge
 800cb16:	462b      	movge	r3, r5
 800cb18:	1ad2      	subs	r2, r2, r3
 800cb1a:	9205      	str	r2, [sp, #20]
 800cb1c:	9a06      	ldr	r2, [sp, #24]
 800cb1e:	1aed      	subs	r5, r5, r3
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	9306      	str	r3, [sp, #24]
 800cb24:	9b08      	ldr	r3, [sp, #32]
 800cb26:	b1f3      	cbz	r3, 800cb66 <_dtoa_r+0x7b6>
 800cb28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 80a3 	beq.w	800cc76 <_dtoa_r+0x8c6>
 800cb30:	2e00      	cmp	r6, #0
 800cb32:	dd10      	ble.n	800cb56 <_dtoa_r+0x7a6>
 800cb34:	4639      	mov	r1, r7
 800cb36:	4632      	mov	r2, r6
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f000 fcdb 	bl	800d4f4 <__pow5mult>
 800cb3e:	4652      	mov	r2, sl
 800cb40:	4601      	mov	r1, r0
 800cb42:	4607      	mov	r7, r0
 800cb44:	4620      	mov	r0, r4
 800cb46:	f000 fc2b 	bl	800d3a0 <__multiply>
 800cb4a:	4651      	mov	r1, sl
 800cb4c:	4680      	mov	r8, r0
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 fb5a 	bl	800d208 <_Bfree>
 800cb54:	46c2      	mov	sl, r8
 800cb56:	9b08      	ldr	r3, [sp, #32]
 800cb58:	1b9a      	subs	r2, r3, r6
 800cb5a:	d004      	beq.n	800cb66 <_dtoa_r+0x7b6>
 800cb5c:	4651      	mov	r1, sl
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f000 fcc8 	bl	800d4f4 <__pow5mult>
 800cb64:	4682      	mov	sl, r0
 800cb66:	2101      	movs	r1, #1
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fc03 	bl	800d374 <__i2b>
 800cb6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	4606      	mov	r6, r0
 800cb74:	f340 8081 	ble.w	800cc7a <_dtoa_r+0x8ca>
 800cb78:	461a      	mov	r2, r3
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f000 fcb9 	bl	800d4f4 <__pow5mult>
 800cb82:	9b07      	ldr	r3, [sp, #28]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	4606      	mov	r6, r0
 800cb88:	dd7a      	ble.n	800cc80 <_dtoa_r+0x8d0>
 800cb8a:	f04f 0800 	mov.w	r8, #0
 800cb8e:	6933      	ldr	r3, [r6, #16]
 800cb90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cb94:	6918      	ldr	r0, [r3, #16]
 800cb96:	f000 fb9f 	bl	800d2d8 <__hi0bits>
 800cb9a:	f1c0 0020 	rsb	r0, r0, #32
 800cb9e:	9b06      	ldr	r3, [sp, #24]
 800cba0:	4418      	add	r0, r3
 800cba2:	f010 001f 	ands.w	r0, r0, #31
 800cba6:	f000 8094 	beq.w	800ccd2 <_dtoa_r+0x922>
 800cbaa:	f1c0 0320 	rsb	r3, r0, #32
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	f340 8085 	ble.w	800ccbe <_dtoa_r+0x90e>
 800cbb4:	9b05      	ldr	r3, [sp, #20]
 800cbb6:	f1c0 001c 	rsb	r0, r0, #28
 800cbba:	4403      	add	r3, r0
 800cbbc:	9305      	str	r3, [sp, #20]
 800cbbe:	9b06      	ldr	r3, [sp, #24]
 800cbc0:	4403      	add	r3, r0
 800cbc2:	4405      	add	r5, r0
 800cbc4:	9306      	str	r3, [sp, #24]
 800cbc6:	9b05      	ldr	r3, [sp, #20]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	dd05      	ble.n	800cbd8 <_dtoa_r+0x828>
 800cbcc:	4651      	mov	r1, sl
 800cbce:	461a      	mov	r2, r3
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f000 fce9 	bl	800d5a8 <__lshift>
 800cbd6:	4682      	mov	sl, r0
 800cbd8:	9b06      	ldr	r3, [sp, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dd05      	ble.n	800cbea <_dtoa_r+0x83a>
 800cbde:	4631      	mov	r1, r6
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f000 fce0 	bl	800d5a8 <__lshift>
 800cbe8:	4606      	mov	r6, r0
 800cbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d072      	beq.n	800ccd6 <_dtoa_r+0x926>
 800cbf0:	4631      	mov	r1, r6
 800cbf2:	4650      	mov	r0, sl
 800cbf4:	f000 fd44 	bl	800d680 <__mcmp>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	da6c      	bge.n	800ccd6 <_dtoa_r+0x926>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4651      	mov	r1, sl
 800cc00:	220a      	movs	r2, #10
 800cc02:	4620      	mov	r0, r4
 800cc04:	f000 fb22 	bl	800d24c <__multadd>
 800cc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cc0e:	4682      	mov	sl, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	f000 81b0 	beq.w	800cf76 <_dtoa_r+0xbc6>
 800cc16:	2300      	movs	r3, #0
 800cc18:	4639      	mov	r1, r7
 800cc1a:	220a      	movs	r2, #10
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fb15 	bl	800d24c <__multadd>
 800cc22:	9b01      	ldr	r3, [sp, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	4607      	mov	r7, r0
 800cc28:	f300 8096 	bgt.w	800cd58 <_dtoa_r+0x9a8>
 800cc2c:	9b07      	ldr	r3, [sp, #28]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	dc59      	bgt.n	800cce6 <_dtoa_r+0x936>
 800cc32:	e091      	b.n	800cd58 <_dtoa_r+0x9a8>
 800cc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc3a:	e758      	b.n	800caee <_dtoa_r+0x73e>
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	1e5e      	subs	r6, r3, #1
 800cc40:	9b08      	ldr	r3, [sp, #32]
 800cc42:	42b3      	cmp	r3, r6
 800cc44:	bfbf      	itttt	lt
 800cc46:	9b08      	ldrlt	r3, [sp, #32]
 800cc48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cc4a:	9608      	strlt	r6, [sp, #32]
 800cc4c:	1af3      	sublt	r3, r6, r3
 800cc4e:	bfb4      	ite	lt
 800cc50:	18d2      	addlt	r2, r2, r3
 800cc52:	1b9e      	subge	r6, r3, r6
 800cc54:	9b04      	ldr	r3, [sp, #16]
 800cc56:	bfbc      	itt	lt
 800cc58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cc5a:	2600      	movlt	r6, #0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	bfb7      	itett	lt
 800cc60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cc64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cc68:	1a9d      	sublt	r5, r3, r2
 800cc6a:	2300      	movlt	r3, #0
 800cc6c:	e741      	b.n	800caf2 <_dtoa_r+0x742>
 800cc6e:	9e08      	ldr	r6, [sp, #32]
 800cc70:	9d05      	ldr	r5, [sp, #20]
 800cc72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cc74:	e748      	b.n	800cb08 <_dtoa_r+0x758>
 800cc76:	9a08      	ldr	r2, [sp, #32]
 800cc78:	e770      	b.n	800cb5c <_dtoa_r+0x7ac>
 800cc7a:	9b07      	ldr	r3, [sp, #28]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	dc19      	bgt.n	800ccb4 <_dtoa_r+0x904>
 800cc80:	9b02      	ldr	r3, [sp, #8]
 800cc82:	b9bb      	cbnz	r3, 800ccb4 <_dtoa_r+0x904>
 800cc84:	9b03      	ldr	r3, [sp, #12]
 800cc86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc8a:	b99b      	cbnz	r3, 800ccb4 <_dtoa_r+0x904>
 800cc8c:	9b03      	ldr	r3, [sp, #12]
 800cc8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc92:	0d1b      	lsrs	r3, r3, #20
 800cc94:	051b      	lsls	r3, r3, #20
 800cc96:	b183      	cbz	r3, 800ccba <_dtoa_r+0x90a>
 800cc98:	9b05      	ldr	r3, [sp, #20]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	9305      	str	r3, [sp, #20]
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	3301      	adds	r3, #1
 800cca2:	9306      	str	r3, [sp, #24]
 800cca4:	f04f 0801 	mov.w	r8, #1
 800cca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f47f af6f 	bne.w	800cb8e <_dtoa_r+0x7de>
 800ccb0:	2001      	movs	r0, #1
 800ccb2:	e774      	b.n	800cb9e <_dtoa_r+0x7ee>
 800ccb4:	f04f 0800 	mov.w	r8, #0
 800ccb8:	e7f6      	b.n	800cca8 <_dtoa_r+0x8f8>
 800ccba:	4698      	mov	r8, r3
 800ccbc:	e7f4      	b.n	800cca8 <_dtoa_r+0x8f8>
 800ccbe:	d082      	beq.n	800cbc6 <_dtoa_r+0x816>
 800ccc0:	9a05      	ldr	r2, [sp, #20]
 800ccc2:	331c      	adds	r3, #28
 800ccc4:	441a      	add	r2, r3
 800ccc6:	9205      	str	r2, [sp, #20]
 800ccc8:	9a06      	ldr	r2, [sp, #24]
 800ccca:	441a      	add	r2, r3
 800cccc:	441d      	add	r5, r3
 800ccce:	9206      	str	r2, [sp, #24]
 800ccd0:	e779      	b.n	800cbc6 <_dtoa_r+0x816>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	e7f4      	b.n	800ccc0 <_dtoa_r+0x910>
 800ccd6:	9b04      	ldr	r3, [sp, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	dc37      	bgt.n	800cd4c <_dtoa_r+0x99c>
 800ccdc:	9b07      	ldr	r3, [sp, #28]
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	dd34      	ble.n	800cd4c <_dtoa_r+0x99c>
 800cce2:	9b04      	ldr	r3, [sp, #16]
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	9b01      	ldr	r3, [sp, #4]
 800cce8:	b963      	cbnz	r3, 800cd04 <_dtoa_r+0x954>
 800ccea:	4631      	mov	r1, r6
 800ccec:	2205      	movs	r2, #5
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 faac 	bl	800d24c <__multadd>
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	f000 fcc1 	bl	800d680 <__mcmp>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	f73f adbb 	bgt.w	800c87a <_dtoa_r+0x4ca>
 800cd04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd06:	9d00      	ldr	r5, [sp, #0]
 800cd08:	ea6f 0b03 	mvn.w	fp, r3
 800cd0c:	f04f 0800 	mov.w	r8, #0
 800cd10:	4631      	mov	r1, r6
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fa78 	bl	800d208 <_Bfree>
 800cd18:	2f00      	cmp	r7, #0
 800cd1a:	f43f aeab 	beq.w	800ca74 <_dtoa_r+0x6c4>
 800cd1e:	f1b8 0f00 	cmp.w	r8, #0
 800cd22:	d005      	beq.n	800cd30 <_dtoa_r+0x980>
 800cd24:	45b8      	cmp	r8, r7
 800cd26:	d003      	beq.n	800cd30 <_dtoa_r+0x980>
 800cd28:	4641      	mov	r1, r8
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f000 fa6c 	bl	800d208 <_Bfree>
 800cd30:	4639      	mov	r1, r7
 800cd32:	4620      	mov	r0, r4
 800cd34:	f000 fa68 	bl	800d208 <_Bfree>
 800cd38:	e69c      	b.n	800ca74 <_dtoa_r+0x6c4>
 800cd3a:	2600      	movs	r6, #0
 800cd3c:	4637      	mov	r7, r6
 800cd3e:	e7e1      	b.n	800cd04 <_dtoa_r+0x954>
 800cd40:	46bb      	mov	fp, r7
 800cd42:	4637      	mov	r7, r6
 800cd44:	e599      	b.n	800c87a <_dtoa_r+0x4ca>
 800cd46:	bf00      	nop
 800cd48:	40240000 	.word	0x40240000
 800cd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 80c8 	beq.w	800cee4 <_dtoa_r+0xb34>
 800cd54:	9b04      	ldr	r3, [sp, #16]
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	2d00      	cmp	r5, #0
 800cd5a:	dd05      	ble.n	800cd68 <_dtoa_r+0x9b8>
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	462a      	mov	r2, r5
 800cd60:	4620      	mov	r0, r4
 800cd62:	f000 fc21 	bl	800d5a8 <__lshift>
 800cd66:	4607      	mov	r7, r0
 800cd68:	f1b8 0f00 	cmp.w	r8, #0
 800cd6c:	d05b      	beq.n	800ce26 <_dtoa_r+0xa76>
 800cd6e:	6879      	ldr	r1, [r7, #4]
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fa09 	bl	800d188 <_Balloc>
 800cd76:	4605      	mov	r5, r0
 800cd78:	b928      	cbnz	r0, 800cd86 <_dtoa_r+0x9d6>
 800cd7a:	4b83      	ldr	r3, [pc, #524]	; (800cf88 <_dtoa_r+0xbd8>)
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cd82:	f7ff bb2e 	b.w	800c3e2 <_dtoa_r+0x32>
 800cd86:	693a      	ldr	r2, [r7, #16]
 800cd88:	3202      	adds	r2, #2
 800cd8a:	0092      	lsls	r2, r2, #2
 800cd8c:	f107 010c 	add.w	r1, r7, #12
 800cd90:	300c      	adds	r0, #12
 800cd92:	f000 fdff 	bl	800d994 <memcpy>
 800cd96:	2201      	movs	r2, #1
 800cd98:	4629      	mov	r1, r5
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f000 fc04 	bl	800d5a8 <__lshift>
 800cda0:	9b00      	ldr	r3, [sp, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	9304      	str	r3, [sp, #16]
 800cda6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdaa:	4413      	add	r3, r2
 800cdac:	9308      	str	r3, [sp, #32]
 800cdae:	9b02      	ldr	r3, [sp, #8]
 800cdb0:	f003 0301 	and.w	r3, r3, #1
 800cdb4:	46b8      	mov	r8, r7
 800cdb6:	9306      	str	r3, [sp, #24]
 800cdb8:	4607      	mov	r7, r0
 800cdba:	9b04      	ldr	r3, [sp, #16]
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	9301      	str	r3, [sp, #4]
 800cdc4:	f7ff fa69 	bl	800c29a <quorem>
 800cdc8:	4641      	mov	r1, r8
 800cdca:	9002      	str	r0, [sp, #8]
 800cdcc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	f000 fc55 	bl	800d680 <__mcmp>
 800cdd6:	463a      	mov	r2, r7
 800cdd8:	9005      	str	r0, [sp, #20]
 800cdda:	4631      	mov	r1, r6
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 fc6b 	bl	800d6b8 <__mdiff>
 800cde2:	68c2      	ldr	r2, [r0, #12]
 800cde4:	4605      	mov	r5, r0
 800cde6:	bb02      	cbnz	r2, 800ce2a <_dtoa_r+0xa7a>
 800cde8:	4601      	mov	r1, r0
 800cdea:	4650      	mov	r0, sl
 800cdec:	f000 fc48 	bl	800d680 <__mcmp>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	9209      	str	r2, [sp, #36]	; 0x24
 800cdf8:	f000 fa06 	bl	800d208 <_Bfree>
 800cdfc:	9b07      	ldr	r3, [sp, #28]
 800cdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce00:	9d04      	ldr	r5, [sp, #16]
 800ce02:	ea43 0102 	orr.w	r1, r3, r2
 800ce06:	9b06      	ldr	r3, [sp, #24]
 800ce08:	4319      	orrs	r1, r3
 800ce0a:	d110      	bne.n	800ce2e <_dtoa_r+0xa7e>
 800ce0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce10:	d029      	beq.n	800ce66 <_dtoa_r+0xab6>
 800ce12:	9b05      	ldr	r3, [sp, #20]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dd02      	ble.n	800ce1e <_dtoa_r+0xa6e>
 800ce18:	9b02      	ldr	r3, [sp, #8]
 800ce1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	f883 9000 	strb.w	r9, [r3]
 800ce24:	e774      	b.n	800cd10 <_dtoa_r+0x960>
 800ce26:	4638      	mov	r0, r7
 800ce28:	e7ba      	b.n	800cda0 <_dtoa_r+0x9f0>
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	e7e1      	b.n	800cdf2 <_dtoa_r+0xa42>
 800ce2e:	9b05      	ldr	r3, [sp, #20]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	db04      	blt.n	800ce3e <_dtoa_r+0xa8e>
 800ce34:	9907      	ldr	r1, [sp, #28]
 800ce36:	430b      	orrs	r3, r1
 800ce38:	9906      	ldr	r1, [sp, #24]
 800ce3a:	430b      	orrs	r3, r1
 800ce3c:	d120      	bne.n	800ce80 <_dtoa_r+0xad0>
 800ce3e:	2a00      	cmp	r2, #0
 800ce40:	dded      	ble.n	800ce1e <_dtoa_r+0xa6e>
 800ce42:	4651      	mov	r1, sl
 800ce44:	2201      	movs	r2, #1
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 fbae 	bl	800d5a8 <__lshift>
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4682      	mov	sl, r0
 800ce50:	f000 fc16 	bl	800d680 <__mcmp>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	dc03      	bgt.n	800ce60 <_dtoa_r+0xab0>
 800ce58:	d1e1      	bne.n	800ce1e <_dtoa_r+0xa6e>
 800ce5a:	f019 0f01 	tst.w	r9, #1
 800ce5e:	d0de      	beq.n	800ce1e <_dtoa_r+0xa6e>
 800ce60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce64:	d1d8      	bne.n	800ce18 <_dtoa_r+0xa68>
 800ce66:	9a01      	ldr	r2, [sp, #4]
 800ce68:	2339      	movs	r3, #57	; 0x39
 800ce6a:	7013      	strb	r3, [r2, #0]
 800ce6c:	462b      	mov	r3, r5
 800ce6e:	461d      	mov	r5, r3
 800ce70:	3b01      	subs	r3, #1
 800ce72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ce76:	2a39      	cmp	r2, #57	; 0x39
 800ce78:	d06c      	beq.n	800cf54 <_dtoa_r+0xba4>
 800ce7a:	3201      	adds	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
 800ce7e:	e747      	b.n	800cd10 <_dtoa_r+0x960>
 800ce80:	2a00      	cmp	r2, #0
 800ce82:	dd07      	ble.n	800ce94 <_dtoa_r+0xae4>
 800ce84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ce88:	d0ed      	beq.n	800ce66 <_dtoa_r+0xab6>
 800ce8a:	9a01      	ldr	r2, [sp, #4]
 800ce8c:	f109 0301 	add.w	r3, r9, #1
 800ce90:	7013      	strb	r3, [r2, #0]
 800ce92:	e73d      	b.n	800cd10 <_dtoa_r+0x960>
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	9a08      	ldr	r2, [sp, #32]
 800ce98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d043      	beq.n	800cf28 <_dtoa_r+0xb78>
 800cea0:	4651      	mov	r1, sl
 800cea2:	2300      	movs	r3, #0
 800cea4:	220a      	movs	r2, #10
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 f9d0 	bl	800d24c <__multadd>
 800ceac:	45b8      	cmp	r8, r7
 800ceae:	4682      	mov	sl, r0
 800ceb0:	f04f 0300 	mov.w	r3, #0
 800ceb4:	f04f 020a 	mov.w	r2, #10
 800ceb8:	4641      	mov	r1, r8
 800ceba:	4620      	mov	r0, r4
 800cebc:	d107      	bne.n	800cece <_dtoa_r+0xb1e>
 800cebe:	f000 f9c5 	bl	800d24c <__multadd>
 800cec2:	4680      	mov	r8, r0
 800cec4:	4607      	mov	r7, r0
 800cec6:	9b04      	ldr	r3, [sp, #16]
 800cec8:	3301      	adds	r3, #1
 800ceca:	9304      	str	r3, [sp, #16]
 800cecc:	e775      	b.n	800cdba <_dtoa_r+0xa0a>
 800cece:	f000 f9bd 	bl	800d24c <__multadd>
 800ced2:	4639      	mov	r1, r7
 800ced4:	4680      	mov	r8, r0
 800ced6:	2300      	movs	r3, #0
 800ced8:	220a      	movs	r2, #10
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 f9b6 	bl	800d24c <__multadd>
 800cee0:	4607      	mov	r7, r0
 800cee2:	e7f0      	b.n	800cec6 <_dtoa_r+0xb16>
 800cee4:	9b04      	ldr	r3, [sp, #16]
 800cee6:	9301      	str	r3, [sp, #4]
 800cee8:	9d00      	ldr	r5, [sp, #0]
 800ceea:	4631      	mov	r1, r6
 800ceec:	4650      	mov	r0, sl
 800ceee:	f7ff f9d4 	bl	800c29a <quorem>
 800cef2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cef6:	9b00      	ldr	r3, [sp, #0]
 800cef8:	f805 9b01 	strb.w	r9, [r5], #1
 800cefc:	1aea      	subs	r2, r5, r3
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	4293      	cmp	r3, r2
 800cf02:	dd07      	ble.n	800cf14 <_dtoa_r+0xb64>
 800cf04:	4651      	mov	r1, sl
 800cf06:	2300      	movs	r3, #0
 800cf08:	220a      	movs	r2, #10
 800cf0a:	4620      	mov	r0, r4
 800cf0c:	f000 f99e 	bl	800d24c <__multadd>
 800cf10:	4682      	mov	sl, r0
 800cf12:	e7ea      	b.n	800ceea <_dtoa_r+0xb3a>
 800cf14:	9b01      	ldr	r3, [sp, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	bfc8      	it	gt
 800cf1a:	461d      	movgt	r5, r3
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	bfd8      	it	le
 800cf20:	2501      	movle	r5, #1
 800cf22:	441d      	add	r5, r3
 800cf24:	f04f 0800 	mov.w	r8, #0
 800cf28:	4651      	mov	r1, sl
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	f000 fb3b 	bl	800d5a8 <__lshift>
 800cf32:	4631      	mov	r1, r6
 800cf34:	4682      	mov	sl, r0
 800cf36:	f000 fba3 	bl	800d680 <__mcmp>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	dc96      	bgt.n	800ce6c <_dtoa_r+0xabc>
 800cf3e:	d102      	bne.n	800cf46 <_dtoa_r+0xb96>
 800cf40:	f019 0f01 	tst.w	r9, #1
 800cf44:	d192      	bne.n	800ce6c <_dtoa_r+0xabc>
 800cf46:	462b      	mov	r3, r5
 800cf48:	461d      	mov	r5, r3
 800cf4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf4e:	2a30      	cmp	r2, #48	; 0x30
 800cf50:	d0fa      	beq.n	800cf48 <_dtoa_r+0xb98>
 800cf52:	e6dd      	b.n	800cd10 <_dtoa_r+0x960>
 800cf54:	9a00      	ldr	r2, [sp, #0]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d189      	bne.n	800ce6e <_dtoa_r+0xabe>
 800cf5a:	f10b 0b01 	add.w	fp, fp, #1
 800cf5e:	2331      	movs	r3, #49	; 0x31
 800cf60:	e796      	b.n	800ce90 <_dtoa_r+0xae0>
 800cf62:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <_dtoa_r+0xbdc>)
 800cf64:	f7ff ba99 	b.w	800c49a <_dtoa_r+0xea>
 800cf68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f47f aa6d 	bne.w	800c44a <_dtoa_r+0x9a>
 800cf70:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <_dtoa_r+0xbe0>)
 800cf72:	f7ff ba92 	b.w	800c49a <_dtoa_r+0xea>
 800cf76:	9b01      	ldr	r3, [sp, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	dcb5      	bgt.n	800cee8 <_dtoa_r+0xb38>
 800cf7c:	9b07      	ldr	r3, [sp, #28]
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	f73f aeb1 	bgt.w	800cce6 <_dtoa_r+0x936>
 800cf84:	e7b0      	b.n	800cee8 <_dtoa_r+0xb38>
 800cf86:	bf00      	nop
 800cf88:	0800e1b5 	.word	0x0800e1b5
 800cf8c:	0800e014 	.word	0x0800e014
 800cf90:	0800e139 	.word	0x0800e139

0800cf94 <_free_r>:
 800cf94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf96:	2900      	cmp	r1, #0
 800cf98:	d044      	beq.n	800d024 <_free_r+0x90>
 800cf9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf9e:	9001      	str	r0, [sp, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f1a1 0404 	sub.w	r4, r1, #4
 800cfa6:	bfb8      	it	lt
 800cfa8:	18e4      	addlt	r4, r4, r3
 800cfaa:	f7ff f85f 	bl	800c06c <__malloc_lock>
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <_free_r+0x94>)
 800cfb0:	9801      	ldr	r0, [sp, #4]
 800cfb2:	6813      	ldr	r3, [r2, #0]
 800cfb4:	b933      	cbnz	r3, 800cfc4 <_free_r+0x30>
 800cfb6:	6063      	str	r3, [r4, #4]
 800cfb8:	6014      	str	r4, [r2, #0]
 800cfba:	b003      	add	sp, #12
 800cfbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cfc0:	f7ff b85a 	b.w	800c078 <__malloc_unlock>
 800cfc4:	42a3      	cmp	r3, r4
 800cfc6:	d908      	bls.n	800cfda <_free_r+0x46>
 800cfc8:	6825      	ldr	r5, [r4, #0]
 800cfca:	1961      	adds	r1, r4, r5
 800cfcc:	428b      	cmp	r3, r1
 800cfce:	bf01      	itttt	eq
 800cfd0:	6819      	ldreq	r1, [r3, #0]
 800cfd2:	685b      	ldreq	r3, [r3, #4]
 800cfd4:	1949      	addeq	r1, r1, r5
 800cfd6:	6021      	streq	r1, [r4, #0]
 800cfd8:	e7ed      	b.n	800cfb6 <_free_r+0x22>
 800cfda:	461a      	mov	r2, r3
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	b10b      	cbz	r3, 800cfe4 <_free_r+0x50>
 800cfe0:	42a3      	cmp	r3, r4
 800cfe2:	d9fa      	bls.n	800cfda <_free_r+0x46>
 800cfe4:	6811      	ldr	r1, [r2, #0]
 800cfe6:	1855      	adds	r5, r2, r1
 800cfe8:	42a5      	cmp	r5, r4
 800cfea:	d10b      	bne.n	800d004 <_free_r+0x70>
 800cfec:	6824      	ldr	r4, [r4, #0]
 800cfee:	4421      	add	r1, r4
 800cff0:	1854      	adds	r4, r2, r1
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	6011      	str	r1, [r2, #0]
 800cff6:	d1e0      	bne.n	800cfba <_free_r+0x26>
 800cff8:	681c      	ldr	r4, [r3, #0]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	6053      	str	r3, [r2, #4]
 800cffe:	440c      	add	r4, r1
 800d000:	6014      	str	r4, [r2, #0]
 800d002:	e7da      	b.n	800cfba <_free_r+0x26>
 800d004:	d902      	bls.n	800d00c <_free_r+0x78>
 800d006:	230c      	movs	r3, #12
 800d008:	6003      	str	r3, [r0, #0]
 800d00a:	e7d6      	b.n	800cfba <_free_r+0x26>
 800d00c:	6825      	ldr	r5, [r4, #0]
 800d00e:	1961      	adds	r1, r4, r5
 800d010:	428b      	cmp	r3, r1
 800d012:	bf04      	itt	eq
 800d014:	6819      	ldreq	r1, [r3, #0]
 800d016:	685b      	ldreq	r3, [r3, #4]
 800d018:	6063      	str	r3, [r4, #4]
 800d01a:	bf04      	itt	eq
 800d01c:	1949      	addeq	r1, r1, r5
 800d01e:	6021      	streq	r1, [r4, #0]
 800d020:	6054      	str	r4, [r2, #4]
 800d022:	e7ca      	b.n	800cfba <_free_r+0x26>
 800d024:	b003      	add	sp, #12
 800d026:	bd30      	pop	{r4, r5, pc}
 800d028:	20000cb0 	.word	0x20000cb0

0800d02c <__sflush_r>:
 800d02c:	898a      	ldrh	r2, [r1, #12]
 800d02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	4605      	mov	r5, r0
 800d034:	0710      	lsls	r0, r2, #28
 800d036:	460c      	mov	r4, r1
 800d038:	d458      	bmi.n	800d0ec <__sflush_r+0xc0>
 800d03a:	684b      	ldr	r3, [r1, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	dc05      	bgt.n	800d04c <__sflush_r+0x20>
 800d040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d042:	2b00      	cmp	r3, #0
 800d044:	dc02      	bgt.n	800d04c <__sflush_r+0x20>
 800d046:	2000      	movs	r0, #0
 800d048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d04e:	2e00      	cmp	r6, #0
 800d050:	d0f9      	beq.n	800d046 <__sflush_r+0x1a>
 800d052:	2300      	movs	r3, #0
 800d054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d058:	682f      	ldr	r7, [r5, #0]
 800d05a:	6a21      	ldr	r1, [r4, #32]
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	d032      	beq.n	800d0c6 <__sflush_r+0x9a>
 800d060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	075a      	lsls	r2, r3, #29
 800d066:	d505      	bpl.n	800d074 <__sflush_r+0x48>
 800d068:	6863      	ldr	r3, [r4, #4]
 800d06a:	1ac0      	subs	r0, r0, r3
 800d06c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d06e:	b10b      	cbz	r3, 800d074 <__sflush_r+0x48>
 800d070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d072:	1ac0      	subs	r0, r0, r3
 800d074:	2300      	movs	r3, #0
 800d076:	4602      	mov	r2, r0
 800d078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d07a:	6a21      	ldr	r1, [r4, #32]
 800d07c:	4628      	mov	r0, r5
 800d07e:	47b0      	blx	r6
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	d106      	bne.n	800d094 <__sflush_r+0x68>
 800d086:	6829      	ldr	r1, [r5, #0]
 800d088:	291d      	cmp	r1, #29
 800d08a:	d82b      	bhi.n	800d0e4 <__sflush_r+0xb8>
 800d08c:	4a29      	ldr	r2, [pc, #164]	; (800d134 <__sflush_r+0x108>)
 800d08e:	410a      	asrs	r2, r1
 800d090:	07d6      	lsls	r6, r2, #31
 800d092:	d427      	bmi.n	800d0e4 <__sflush_r+0xb8>
 800d094:	2200      	movs	r2, #0
 800d096:	6062      	str	r2, [r4, #4]
 800d098:	04d9      	lsls	r1, r3, #19
 800d09a:	6922      	ldr	r2, [r4, #16]
 800d09c:	6022      	str	r2, [r4, #0]
 800d09e:	d504      	bpl.n	800d0aa <__sflush_r+0x7e>
 800d0a0:	1c42      	adds	r2, r0, #1
 800d0a2:	d101      	bne.n	800d0a8 <__sflush_r+0x7c>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b903      	cbnz	r3, 800d0aa <__sflush_r+0x7e>
 800d0a8:	6560      	str	r0, [r4, #84]	; 0x54
 800d0aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ac:	602f      	str	r7, [r5, #0]
 800d0ae:	2900      	cmp	r1, #0
 800d0b0:	d0c9      	beq.n	800d046 <__sflush_r+0x1a>
 800d0b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	d002      	beq.n	800d0c0 <__sflush_r+0x94>
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	f7ff ff6a 	bl	800cf94 <_free_r>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c4:	e7c0      	b.n	800d048 <__sflush_r+0x1c>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	47b0      	blx	r6
 800d0cc:	1c41      	adds	r1, r0, #1
 800d0ce:	d1c8      	bne.n	800d062 <__sflush_r+0x36>
 800d0d0:	682b      	ldr	r3, [r5, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0c5      	beq.n	800d062 <__sflush_r+0x36>
 800d0d6:	2b1d      	cmp	r3, #29
 800d0d8:	d001      	beq.n	800d0de <__sflush_r+0xb2>
 800d0da:	2b16      	cmp	r3, #22
 800d0dc:	d101      	bne.n	800d0e2 <__sflush_r+0xb6>
 800d0de:	602f      	str	r7, [r5, #0]
 800d0e0:	e7b1      	b.n	800d046 <__sflush_r+0x1a>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	e7ad      	b.n	800d048 <__sflush_r+0x1c>
 800d0ec:	690f      	ldr	r7, [r1, #16]
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d0a9      	beq.n	800d046 <__sflush_r+0x1a>
 800d0f2:	0793      	lsls	r3, r2, #30
 800d0f4:	680e      	ldr	r6, [r1, #0]
 800d0f6:	bf08      	it	eq
 800d0f8:	694b      	ldreq	r3, [r1, #20]
 800d0fa:	600f      	str	r7, [r1, #0]
 800d0fc:	bf18      	it	ne
 800d0fe:	2300      	movne	r3, #0
 800d100:	eba6 0807 	sub.w	r8, r6, r7
 800d104:	608b      	str	r3, [r1, #8]
 800d106:	f1b8 0f00 	cmp.w	r8, #0
 800d10a:	dd9c      	ble.n	800d046 <__sflush_r+0x1a>
 800d10c:	6a21      	ldr	r1, [r4, #32]
 800d10e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d110:	4643      	mov	r3, r8
 800d112:	463a      	mov	r2, r7
 800d114:	4628      	mov	r0, r5
 800d116:	47b0      	blx	r6
 800d118:	2800      	cmp	r0, #0
 800d11a:	dc06      	bgt.n	800d12a <__sflush_r+0xfe>
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d128:	e78e      	b.n	800d048 <__sflush_r+0x1c>
 800d12a:	4407      	add	r7, r0
 800d12c:	eba8 0800 	sub.w	r8, r8, r0
 800d130:	e7e9      	b.n	800d106 <__sflush_r+0xda>
 800d132:	bf00      	nop
 800d134:	dfbffffe 	.word	0xdfbffffe

0800d138 <_fflush_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	690b      	ldr	r3, [r1, #16]
 800d13c:	4605      	mov	r5, r0
 800d13e:	460c      	mov	r4, r1
 800d140:	b913      	cbnz	r3, 800d148 <_fflush_r+0x10>
 800d142:	2500      	movs	r5, #0
 800d144:	4628      	mov	r0, r5
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	b118      	cbz	r0, 800d152 <_fflush_r+0x1a>
 800d14a:	6a03      	ldr	r3, [r0, #32]
 800d14c:	b90b      	cbnz	r3, 800d152 <_fflush_r+0x1a>
 800d14e:	f7ff f825 	bl	800c19c <__sinit>
 800d152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0f3      	beq.n	800d142 <_fflush_r+0xa>
 800d15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d15c:	07d0      	lsls	r0, r2, #31
 800d15e:	d404      	bmi.n	800d16a <_fflush_r+0x32>
 800d160:	0599      	lsls	r1, r3, #22
 800d162:	d402      	bmi.n	800d16a <_fflush_r+0x32>
 800d164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d166:	f7ff f896 	bl	800c296 <__retarget_lock_acquire_recursive>
 800d16a:	4628      	mov	r0, r5
 800d16c:	4621      	mov	r1, r4
 800d16e:	f7ff ff5d 	bl	800d02c <__sflush_r>
 800d172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d174:	07da      	lsls	r2, r3, #31
 800d176:	4605      	mov	r5, r0
 800d178:	d4e4      	bmi.n	800d144 <_fflush_r+0xc>
 800d17a:	89a3      	ldrh	r3, [r4, #12]
 800d17c:	059b      	lsls	r3, r3, #22
 800d17e:	d4e1      	bmi.n	800d144 <_fflush_r+0xc>
 800d180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d182:	f7ff f889 	bl	800c298 <__retarget_lock_release_recursive>
 800d186:	e7dd      	b.n	800d144 <_fflush_r+0xc>

0800d188 <_Balloc>:
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	69c6      	ldr	r6, [r0, #28]
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	b976      	cbnz	r6, 800d1b0 <_Balloc+0x28>
 800d192:	2010      	movs	r0, #16
 800d194:	f7fe fd2a 	bl	800bbec <malloc>
 800d198:	4602      	mov	r2, r0
 800d19a:	61e0      	str	r0, [r4, #28]
 800d19c:	b920      	cbnz	r0, 800d1a8 <_Balloc+0x20>
 800d19e:	4b18      	ldr	r3, [pc, #96]	; (800d200 <_Balloc+0x78>)
 800d1a0:	4818      	ldr	r0, [pc, #96]	; (800d204 <_Balloc+0x7c>)
 800d1a2:	216b      	movs	r1, #107	; 0x6b
 800d1a4:	f000 fc04 	bl	800d9b0 <__assert_func>
 800d1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1ac:	6006      	str	r6, [r0, #0]
 800d1ae:	60c6      	str	r6, [r0, #12]
 800d1b0:	69e6      	ldr	r6, [r4, #28]
 800d1b2:	68f3      	ldr	r3, [r6, #12]
 800d1b4:	b183      	cbz	r3, 800d1d8 <_Balloc+0x50>
 800d1b6:	69e3      	ldr	r3, [r4, #28]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1be:	b9b8      	cbnz	r0, 800d1f0 <_Balloc+0x68>
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d1c6:	1d72      	adds	r2, r6, #5
 800d1c8:	0092      	lsls	r2, r2, #2
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	f000 fc0e 	bl	800d9ec <_calloc_r>
 800d1d0:	b160      	cbz	r0, 800d1ec <_Balloc+0x64>
 800d1d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1d6:	e00e      	b.n	800d1f6 <_Balloc+0x6e>
 800d1d8:	2221      	movs	r2, #33	; 0x21
 800d1da:	2104      	movs	r1, #4
 800d1dc:	4620      	mov	r0, r4
 800d1de:	f000 fc05 	bl	800d9ec <_calloc_r>
 800d1e2:	69e3      	ldr	r3, [r4, #28]
 800d1e4:	60f0      	str	r0, [r6, #12]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e4      	bne.n	800d1b6 <_Balloc+0x2e>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	6802      	ldr	r2, [r0, #0]
 800d1f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1fc:	e7f7      	b.n	800d1ee <_Balloc+0x66>
 800d1fe:	bf00      	nop
 800d200:	0800e146 	.word	0x0800e146
 800d204:	0800e1c6 	.word	0x0800e1c6

0800d208 <_Bfree>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	69c6      	ldr	r6, [r0, #28]
 800d20c:	4605      	mov	r5, r0
 800d20e:	460c      	mov	r4, r1
 800d210:	b976      	cbnz	r6, 800d230 <_Bfree+0x28>
 800d212:	2010      	movs	r0, #16
 800d214:	f7fe fcea 	bl	800bbec <malloc>
 800d218:	4602      	mov	r2, r0
 800d21a:	61e8      	str	r0, [r5, #28]
 800d21c:	b920      	cbnz	r0, 800d228 <_Bfree+0x20>
 800d21e:	4b09      	ldr	r3, [pc, #36]	; (800d244 <_Bfree+0x3c>)
 800d220:	4809      	ldr	r0, [pc, #36]	; (800d248 <_Bfree+0x40>)
 800d222:	218f      	movs	r1, #143	; 0x8f
 800d224:	f000 fbc4 	bl	800d9b0 <__assert_func>
 800d228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d22c:	6006      	str	r6, [r0, #0]
 800d22e:	60c6      	str	r6, [r0, #12]
 800d230:	b13c      	cbz	r4, 800d242 <_Bfree+0x3a>
 800d232:	69eb      	ldr	r3, [r5, #28]
 800d234:	6862      	ldr	r2, [r4, #4]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d23c:	6021      	str	r1, [r4, #0]
 800d23e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	0800e146 	.word	0x0800e146
 800d248:	0800e1c6 	.word	0x0800e1c6

0800d24c <__multadd>:
 800d24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d250:	690d      	ldr	r5, [r1, #16]
 800d252:	4607      	mov	r7, r0
 800d254:	460c      	mov	r4, r1
 800d256:	461e      	mov	r6, r3
 800d258:	f101 0c14 	add.w	ip, r1, #20
 800d25c:	2000      	movs	r0, #0
 800d25e:	f8dc 3000 	ldr.w	r3, [ip]
 800d262:	b299      	uxth	r1, r3
 800d264:	fb02 6101 	mla	r1, r2, r1, r6
 800d268:	0c1e      	lsrs	r6, r3, #16
 800d26a:	0c0b      	lsrs	r3, r1, #16
 800d26c:	fb02 3306 	mla	r3, r2, r6, r3
 800d270:	b289      	uxth	r1, r1
 800d272:	3001      	adds	r0, #1
 800d274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d278:	4285      	cmp	r5, r0
 800d27a:	f84c 1b04 	str.w	r1, [ip], #4
 800d27e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d282:	dcec      	bgt.n	800d25e <__multadd+0x12>
 800d284:	b30e      	cbz	r6, 800d2ca <__multadd+0x7e>
 800d286:	68a3      	ldr	r3, [r4, #8]
 800d288:	42ab      	cmp	r3, r5
 800d28a:	dc19      	bgt.n	800d2c0 <__multadd+0x74>
 800d28c:	6861      	ldr	r1, [r4, #4]
 800d28e:	4638      	mov	r0, r7
 800d290:	3101      	adds	r1, #1
 800d292:	f7ff ff79 	bl	800d188 <_Balloc>
 800d296:	4680      	mov	r8, r0
 800d298:	b928      	cbnz	r0, 800d2a6 <__multadd+0x5a>
 800d29a:	4602      	mov	r2, r0
 800d29c:	4b0c      	ldr	r3, [pc, #48]	; (800d2d0 <__multadd+0x84>)
 800d29e:	480d      	ldr	r0, [pc, #52]	; (800d2d4 <__multadd+0x88>)
 800d2a0:	21ba      	movs	r1, #186	; 0xba
 800d2a2:	f000 fb85 	bl	800d9b0 <__assert_func>
 800d2a6:	6922      	ldr	r2, [r4, #16]
 800d2a8:	3202      	adds	r2, #2
 800d2aa:	f104 010c 	add.w	r1, r4, #12
 800d2ae:	0092      	lsls	r2, r2, #2
 800d2b0:	300c      	adds	r0, #12
 800d2b2:	f000 fb6f 	bl	800d994 <memcpy>
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	4638      	mov	r0, r7
 800d2ba:	f7ff ffa5 	bl	800d208 <_Bfree>
 800d2be:	4644      	mov	r4, r8
 800d2c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	615e      	str	r6, [r3, #20]
 800d2c8:	6125      	str	r5, [r4, #16]
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d0:	0800e1b5 	.word	0x0800e1b5
 800d2d4:	0800e1c6 	.word	0x0800e1c6

0800d2d8 <__hi0bits>:
 800d2d8:	0c03      	lsrs	r3, r0, #16
 800d2da:	041b      	lsls	r3, r3, #16
 800d2dc:	b9d3      	cbnz	r3, 800d314 <__hi0bits+0x3c>
 800d2de:	0400      	lsls	r0, r0, #16
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d2e6:	bf04      	itt	eq
 800d2e8:	0200      	lsleq	r0, r0, #8
 800d2ea:	3308      	addeq	r3, #8
 800d2ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d2f0:	bf04      	itt	eq
 800d2f2:	0100      	lsleq	r0, r0, #4
 800d2f4:	3304      	addeq	r3, #4
 800d2f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d2fa:	bf04      	itt	eq
 800d2fc:	0080      	lsleq	r0, r0, #2
 800d2fe:	3302      	addeq	r3, #2
 800d300:	2800      	cmp	r0, #0
 800d302:	db05      	blt.n	800d310 <__hi0bits+0x38>
 800d304:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d308:	f103 0301 	add.w	r3, r3, #1
 800d30c:	bf08      	it	eq
 800d30e:	2320      	moveq	r3, #32
 800d310:	4618      	mov	r0, r3
 800d312:	4770      	bx	lr
 800d314:	2300      	movs	r3, #0
 800d316:	e7e4      	b.n	800d2e2 <__hi0bits+0xa>

0800d318 <__lo0bits>:
 800d318:	6803      	ldr	r3, [r0, #0]
 800d31a:	f013 0207 	ands.w	r2, r3, #7
 800d31e:	d00c      	beq.n	800d33a <__lo0bits+0x22>
 800d320:	07d9      	lsls	r1, r3, #31
 800d322:	d422      	bmi.n	800d36a <__lo0bits+0x52>
 800d324:	079a      	lsls	r2, r3, #30
 800d326:	bf49      	itett	mi
 800d328:	085b      	lsrmi	r3, r3, #1
 800d32a:	089b      	lsrpl	r3, r3, #2
 800d32c:	6003      	strmi	r3, [r0, #0]
 800d32e:	2201      	movmi	r2, #1
 800d330:	bf5c      	itt	pl
 800d332:	6003      	strpl	r3, [r0, #0]
 800d334:	2202      	movpl	r2, #2
 800d336:	4610      	mov	r0, r2
 800d338:	4770      	bx	lr
 800d33a:	b299      	uxth	r1, r3
 800d33c:	b909      	cbnz	r1, 800d342 <__lo0bits+0x2a>
 800d33e:	0c1b      	lsrs	r3, r3, #16
 800d340:	2210      	movs	r2, #16
 800d342:	b2d9      	uxtb	r1, r3
 800d344:	b909      	cbnz	r1, 800d34a <__lo0bits+0x32>
 800d346:	3208      	adds	r2, #8
 800d348:	0a1b      	lsrs	r3, r3, #8
 800d34a:	0719      	lsls	r1, r3, #28
 800d34c:	bf04      	itt	eq
 800d34e:	091b      	lsreq	r3, r3, #4
 800d350:	3204      	addeq	r2, #4
 800d352:	0799      	lsls	r1, r3, #30
 800d354:	bf04      	itt	eq
 800d356:	089b      	lsreq	r3, r3, #2
 800d358:	3202      	addeq	r2, #2
 800d35a:	07d9      	lsls	r1, r3, #31
 800d35c:	d403      	bmi.n	800d366 <__lo0bits+0x4e>
 800d35e:	085b      	lsrs	r3, r3, #1
 800d360:	f102 0201 	add.w	r2, r2, #1
 800d364:	d003      	beq.n	800d36e <__lo0bits+0x56>
 800d366:	6003      	str	r3, [r0, #0]
 800d368:	e7e5      	b.n	800d336 <__lo0bits+0x1e>
 800d36a:	2200      	movs	r2, #0
 800d36c:	e7e3      	b.n	800d336 <__lo0bits+0x1e>
 800d36e:	2220      	movs	r2, #32
 800d370:	e7e1      	b.n	800d336 <__lo0bits+0x1e>
	...

0800d374 <__i2b>:
 800d374:	b510      	push	{r4, lr}
 800d376:	460c      	mov	r4, r1
 800d378:	2101      	movs	r1, #1
 800d37a:	f7ff ff05 	bl	800d188 <_Balloc>
 800d37e:	4602      	mov	r2, r0
 800d380:	b928      	cbnz	r0, 800d38e <__i2b+0x1a>
 800d382:	4b05      	ldr	r3, [pc, #20]	; (800d398 <__i2b+0x24>)
 800d384:	4805      	ldr	r0, [pc, #20]	; (800d39c <__i2b+0x28>)
 800d386:	f240 1145 	movw	r1, #325	; 0x145
 800d38a:	f000 fb11 	bl	800d9b0 <__assert_func>
 800d38e:	2301      	movs	r3, #1
 800d390:	6144      	str	r4, [r0, #20]
 800d392:	6103      	str	r3, [r0, #16]
 800d394:	bd10      	pop	{r4, pc}
 800d396:	bf00      	nop
 800d398:	0800e1b5 	.word	0x0800e1b5
 800d39c:	0800e1c6 	.word	0x0800e1c6

0800d3a0 <__multiply>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	4691      	mov	r9, r2
 800d3a6:	690a      	ldr	r2, [r1, #16]
 800d3a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	bfb8      	it	lt
 800d3b0:	460b      	movlt	r3, r1
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	bfbc      	itt	lt
 800d3b6:	464c      	movlt	r4, r9
 800d3b8:	4699      	movlt	r9, r3
 800d3ba:	6927      	ldr	r7, [r4, #16]
 800d3bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d3c0:	68a3      	ldr	r3, [r4, #8]
 800d3c2:	6861      	ldr	r1, [r4, #4]
 800d3c4:	eb07 060a 	add.w	r6, r7, sl
 800d3c8:	42b3      	cmp	r3, r6
 800d3ca:	b085      	sub	sp, #20
 800d3cc:	bfb8      	it	lt
 800d3ce:	3101      	addlt	r1, #1
 800d3d0:	f7ff feda 	bl	800d188 <_Balloc>
 800d3d4:	b930      	cbnz	r0, 800d3e4 <__multiply+0x44>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	4b44      	ldr	r3, [pc, #272]	; (800d4ec <__multiply+0x14c>)
 800d3da:	4845      	ldr	r0, [pc, #276]	; (800d4f0 <__multiply+0x150>)
 800d3dc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d3e0:	f000 fae6 	bl	800d9b0 <__assert_func>
 800d3e4:	f100 0514 	add.w	r5, r0, #20
 800d3e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d3ec:	462b      	mov	r3, r5
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	4543      	cmp	r3, r8
 800d3f2:	d321      	bcc.n	800d438 <__multiply+0x98>
 800d3f4:	f104 0314 	add.w	r3, r4, #20
 800d3f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d3fc:	f109 0314 	add.w	r3, r9, #20
 800d400:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d404:	9202      	str	r2, [sp, #8]
 800d406:	1b3a      	subs	r2, r7, r4
 800d408:	3a15      	subs	r2, #21
 800d40a:	f022 0203 	bic.w	r2, r2, #3
 800d40e:	3204      	adds	r2, #4
 800d410:	f104 0115 	add.w	r1, r4, #21
 800d414:	428f      	cmp	r7, r1
 800d416:	bf38      	it	cc
 800d418:	2204      	movcc	r2, #4
 800d41a:	9201      	str	r2, [sp, #4]
 800d41c:	9a02      	ldr	r2, [sp, #8]
 800d41e:	9303      	str	r3, [sp, #12]
 800d420:	429a      	cmp	r2, r3
 800d422:	d80c      	bhi.n	800d43e <__multiply+0x9e>
 800d424:	2e00      	cmp	r6, #0
 800d426:	dd03      	ble.n	800d430 <__multiply+0x90>
 800d428:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d05b      	beq.n	800d4e8 <__multiply+0x148>
 800d430:	6106      	str	r6, [r0, #16]
 800d432:	b005      	add	sp, #20
 800d434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d438:	f843 2b04 	str.w	r2, [r3], #4
 800d43c:	e7d8      	b.n	800d3f0 <__multiply+0x50>
 800d43e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d442:	f1ba 0f00 	cmp.w	sl, #0
 800d446:	d024      	beq.n	800d492 <__multiply+0xf2>
 800d448:	f104 0e14 	add.w	lr, r4, #20
 800d44c:	46a9      	mov	r9, r5
 800d44e:	f04f 0c00 	mov.w	ip, #0
 800d452:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d456:	f8d9 1000 	ldr.w	r1, [r9]
 800d45a:	fa1f fb82 	uxth.w	fp, r2
 800d45e:	b289      	uxth	r1, r1
 800d460:	fb0a 110b 	mla	r1, sl, fp, r1
 800d464:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d468:	f8d9 2000 	ldr.w	r2, [r9]
 800d46c:	4461      	add	r1, ip
 800d46e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d472:	fb0a c20b 	mla	r2, sl, fp, ip
 800d476:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d47a:	b289      	uxth	r1, r1
 800d47c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d480:	4577      	cmp	r7, lr
 800d482:	f849 1b04 	str.w	r1, [r9], #4
 800d486:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d48a:	d8e2      	bhi.n	800d452 <__multiply+0xb2>
 800d48c:	9a01      	ldr	r2, [sp, #4]
 800d48e:	f845 c002 	str.w	ip, [r5, r2]
 800d492:	9a03      	ldr	r2, [sp, #12]
 800d494:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d498:	3304      	adds	r3, #4
 800d49a:	f1b9 0f00 	cmp.w	r9, #0
 800d49e:	d021      	beq.n	800d4e4 <__multiply+0x144>
 800d4a0:	6829      	ldr	r1, [r5, #0]
 800d4a2:	f104 0c14 	add.w	ip, r4, #20
 800d4a6:	46ae      	mov	lr, r5
 800d4a8:	f04f 0a00 	mov.w	sl, #0
 800d4ac:	f8bc b000 	ldrh.w	fp, [ip]
 800d4b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d4b4:	fb09 220b 	mla	r2, r9, fp, r2
 800d4b8:	4452      	add	r2, sl
 800d4ba:	b289      	uxth	r1, r1
 800d4bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d4c0:	f84e 1b04 	str.w	r1, [lr], #4
 800d4c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4cc:	f8be 1000 	ldrh.w	r1, [lr]
 800d4d0:	fb09 110a 	mla	r1, r9, sl, r1
 800d4d4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d4d8:	4567      	cmp	r7, ip
 800d4da:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d4de:	d8e5      	bhi.n	800d4ac <__multiply+0x10c>
 800d4e0:	9a01      	ldr	r2, [sp, #4]
 800d4e2:	50a9      	str	r1, [r5, r2]
 800d4e4:	3504      	adds	r5, #4
 800d4e6:	e799      	b.n	800d41c <__multiply+0x7c>
 800d4e8:	3e01      	subs	r6, #1
 800d4ea:	e79b      	b.n	800d424 <__multiply+0x84>
 800d4ec:	0800e1b5 	.word	0x0800e1b5
 800d4f0:	0800e1c6 	.word	0x0800e1c6

0800d4f4 <__pow5mult>:
 800d4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4f8:	4615      	mov	r5, r2
 800d4fa:	f012 0203 	ands.w	r2, r2, #3
 800d4fe:	4606      	mov	r6, r0
 800d500:	460f      	mov	r7, r1
 800d502:	d007      	beq.n	800d514 <__pow5mult+0x20>
 800d504:	4c25      	ldr	r4, [pc, #148]	; (800d59c <__pow5mult+0xa8>)
 800d506:	3a01      	subs	r2, #1
 800d508:	2300      	movs	r3, #0
 800d50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d50e:	f7ff fe9d 	bl	800d24c <__multadd>
 800d512:	4607      	mov	r7, r0
 800d514:	10ad      	asrs	r5, r5, #2
 800d516:	d03d      	beq.n	800d594 <__pow5mult+0xa0>
 800d518:	69f4      	ldr	r4, [r6, #28]
 800d51a:	b97c      	cbnz	r4, 800d53c <__pow5mult+0x48>
 800d51c:	2010      	movs	r0, #16
 800d51e:	f7fe fb65 	bl	800bbec <malloc>
 800d522:	4602      	mov	r2, r0
 800d524:	61f0      	str	r0, [r6, #28]
 800d526:	b928      	cbnz	r0, 800d534 <__pow5mult+0x40>
 800d528:	4b1d      	ldr	r3, [pc, #116]	; (800d5a0 <__pow5mult+0xac>)
 800d52a:	481e      	ldr	r0, [pc, #120]	; (800d5a4 <__pow5mult+0xb0>)
 800d52c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d530:	f000 fa3e 	bl	800d9b0 <__assert_func>
 800d534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d538:	6004      	str	r4, [r0, #0]
 800d53a:	60c4      	str	r4, [r0, #12]
 800d53c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d544:	b94c      	cbnz	r4, 800d55a <__pow5mult+0x66>
 800d546:	f240 2171 	movw	r1, #625	; 0x271
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ff12 	bl	800d374 <__i2b>
 800d550:	2300      	movs	r3, #0
 800d552:	f8c8 0008 	str.w	r0, [r8, #8]
 800d556:	4604      	mov	r4, r0
 800d558:	6003      	str	r3, [r0, #0]
 800d55a:	f04f 0900 	mov.w	r9, #0
 800d55e:	07eb      	lsls	r3, r5, #31
 800d560:	d50a      	bpl.n	800d578 <__pow5mult+0x84>
 800d562:	4639      	mov	r1, r7
 800d564:	4622      	mov	r2, r4
 800d566:	4630      	mov	r0, r6
 800d568:	f7ff ff1a 	bl	800d3a0 <__multiply>
 800d56c:	4639      	mov	r1, r7
 800d56e:	4680      	mov	r8, r0
 800d570:	4630      	mov	r0, r6
 800d572:	f7ff fe49 	bl	800d208 <_Bfree>
 800d576:	4647      	mov	r7, r8
 800d578:	106d      	asrs	r5, r5, #1
 800d57a:	d00b      	beq.n	800d594 <__pow5mult+0xa0>
 800d57c:	6820      	ldr	r0, [r4, #0]
 800d57e:	b938      	cbnz	r0, 800d590 <__pow5mult+0x9c>
 800d580:	4622      	mov	r2, r4
 800d582:	4621      	mov	r1, r4
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff ff0b 	bl	800d3a0 <__multiply>
 800d58a:	6020      	str	r0, [r4, #0]
 800d58c:	f8c0 9000 	str.w	r9, [r0]
 800d590:	4604      	mov	r4, r0
 800d592:	e7e4      	b.n	800d55e <__pow5mult+0x6a>
 800d594:	4638      	mov	r0, r7
 800d596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59a:	bf00      	nop
 800d59c:	0800e310 	.word	0x0800e310
 800d5a0:	0800e146 	.word	0x0800e146
 800d5a4:	0800e1c6 	.word	0x0800e1c6

0800d5a8 <__lshift>:
 800d5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	6849      	ldr	r1, [r1, #4]
 800d5b0:	6923      	ldr	r3, [r4, #16]
 800d5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5b6:	68a3      	ldr	r3, [r4, #8]
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	4691      	mov	r9, r2
 800d5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5c0:	f108 0601 	add.w	r6, r8, #1
 800d5c4:	42b3      	cmp	r3, r6
 800d5c6:	db0b      	blt.n	800d5e0 <__lshift+0x38>
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f7ff fddd 	bl	800d188 <_Balloc>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	b948      	cbnz	r0, 800d5e6 <__lshift+0x3e>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	4b28      	ldr	r3, [pc, #160]	; (800d678 <__lshift+0xd0>)
 800d5d6:	4829      	ldr	r0, [pc, #164]	; (800d67c <__lshift+0xd4>)
 800d5d8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d5dc:	f000 f9e8 	bl	800d9b0 <__assert_func>
 800d5e0:	3101      	adds	r1, #1
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	e7ee      	b.n	800d5c4 <__lshift+0x1c>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f100 0114 	add.w	r1, r0, #20
 800d5ec:	f100 0210 	add.w	r2, r0, #16
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	4553      	cmp	r3, sl
 800d5f4:	db33      	blt.n	800d65e <__lshift+0xb6>
 800d5f6:	6920      	ldr	r0, [r4, #16]
 800d5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5fc:	f104 0314 	add.w	r3, r4, #20
 800d600:	f019 091f 	ands.w	r9, r9, #31
 800d604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d60c:	d02b      	beq.n	800d666 <__lshift+0xbe>
 800d60e:	f1c9 0e20 	rsb	lr, r9, #32
 800d612:	468a      	mov	sl, r1
 800d614:	2200      	movs	r2, #0
 800d616:	6818      	ldr	r0, [r3, #0]
 800d618:	fa00 f009 	lsl.w	r0, r0, r9
 800d61c:	4310      	orrs	r0, r2
 800d61e:	f84a 0b04 	str.w	r0, [sl], #4
 800d622:	f853 2b04 	ldr.w	r2, [r3], #4
 800d626:	459c      	cmp	ip, r3
 800d628:	fa22 f20e 	lsr.w	r2, r2, lr
 800d62c:	d8f3      	bhi.n	800d616 <__lshift+0x6e>
 800d62e:	ebac 0304 	sub.w	r3, ip, r4
 800d632:	3b15      	subs	r3, #21
 800d634:	f023 0303 	bic.w	r3, r3, #3
 800d638:	3304      	adds	r3, #4
 800d63a:	f104 0015 	add.w	r0, r4, #21
 800d63e:	4584      	cmp	ip, r0
 800d640:	bf38      	it	cc
 800d642:	2304      	movcc	r3, #4
 800d644:	50ca      	str	r2, [r1, r3]
 800d646:	b10a      	cbz	r2, 800d64c <__lshift+0xa4>
 800d648:	f108 0602 	add.w	r6, r8, #2
 800d64c:	3e01      	subs	r6, #1
 800d64e:	4638      	mov	r0, r7
 800d650:	612e      	str	r6, [r5, #16]
 800d652:	4621      	mov	r1, r4
 800d654:	f7ff fdd8 	bl	800d208 <_Bfree>
 800d658:	4628      	mov	r0, r5
 800d65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d662:	3301      	adds	r3, #1
 800d664:	e7c5      	b.n	800d5f2 <__lshift+0x4a>
 800d666:	3904      	subs	r1, #4
 800d668:	f853 2b04 	ldr.w	r2, [r3], #4
 800d66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d670:	459c      	cmp	ip, r3
 800d672:	d8f9      	bhi.n	800d668 <__lshift+0xc0>
 800d674:	e7ea      	b.n	800d64c <__lshift+0xa4>
 800d676:	bf00      	nop
 800d678:	0800e1b5 	.word	0x0800e1b5
 800d67c:	0800e1c6 	.word	0x0800e1c6

0800d680 <__mcmp>:
 800d680:	b530      	push	{r4, r5, lr}
 800d682:	6902      	ldr	r2, [r0, #16]
 800d684:	690c      	ldr	r4, [r1, #16]
 800d686:	1b12      	subs	r2, r2, r4
 800d688:	d10e      	bne.n	800d6a8 <__mcmp+0x28>
 800d68a:	f100 0314 	add.w	r3, r0, #20
 800d68e:	3114      	adds	r1, #20
 800d690:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d694:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d698:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d69c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d6a0:	42a5      	cmp	r5, r4
 800d6a2:	d003      	beq.n	800d6ac <__mcmp+0x2c>
 800d6a4:	d305      	bcc.n	800d6b2 <__mcmp+0x32>
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	bd30      	pop	{r4, r5, pc}
 800d6ac:	4283      	cmp	r3, r0
 800d6ae:	d3f3      	bcc.n	800d698 <__mcmp+0x18>
 800d6b0:	e7fa      	b.n	800d6a8 <__mcmp+0x28>
 800d6b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6b6:	e7f7      	b.n	800d6a8 <__mcmp+0x28>

0800d6b8 <__mdiff>:
 800d6b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6bc:	460c      	mov	r4, r1
 800d6be:	4606      	mov	r6, r0
 800d6c0:	4611      	mov	r1, r2
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	4690      	mov	r8, r2
 800d6c6:	f7ff ffdb 	bl	800d680 <__mcmp>
 800d6ca:	1e05      	subs	r5, r0, #0
 800d6cc:	d110      	bne.n	800d6f0 <__mdiff+0x38>
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	f7ff fd59 	bl	800d188 <_Balloc>
 800d6d6:	b930      	cbnz	r0, 800d6e6 <__mdiff+0x2e>
 800d6d8:	4b3a      	ldr	r3, [pc, #232]	; (800d7c4 <__mdiff+0x10c>)
 800d6da:	4602      	mov	r2, r0
 800d6dc:	f240 2137 	movw	r1, #567	; 0x237
 800d6e0:	4839      	ldr	r0, [pc, #228]	; (800d7c8 <__mdiff+0x110>)
 800d6e2:	f000 f965 	bl	800d9b0 <__assert_func>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f0:	bfa4      	itt	ge
 800d6f2:	4643      	movge	r3, r8
 800d6f4:	46a0      	movge	r8, r4
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6fc:	bfa6      	itte	ge
 800d6fe:	461c      	movge	r4, r3
 800d700:	2500      	movge	r5, #0
 800d702:	2501      	movlt	r5, #1
 800d704:	f7ff fd40 	bl	800d188 <_Balloc>
 800d708:	b920      	cbnz	r0, 800d714 <__mdiff+0x5c>
 800d70a:	4b2e      	ldr	r3, [pc, #184]	; (800d7c4 <__mdiff+0x10c>)
 800d70c:	4602      	mov	r2, r0
 800d70e:	f240 2145 	movw	r1, #581	; 0x245
 800d712:	e7e5      	b.n	800d6e0 <__mdiff+0x28>
 800d714:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d718:	6926      	ldr	r6, [r4, #16]
 800d71a:	60c5      	str	r5, [r0, #12]
 800d71c:	f104 0914 	add.w	r9, r4, #20
 800d720:	f108 0514 	add.w	r5, r8, #20
 800d724:	f100 0e14 	add.w	lr, r0, #20
 800d728:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d72c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d730:	f108 0210 	add.w	r2, r8, #16
 800d734:	46f2      	mov	sl, lr
 800d736:	2100      	movs	r1, #0
 800d738:	f859 3b04 	ldr.w	r3, [r9], #4
 800d73c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d740:	fa11 f88b 	uxtah	r8, r1, fp
 800d744:	b299      	uxth	r1, r3
 800d746:	0c1b      	lsrs	r3, r3, #16
 800d748:	eba8 0801 	sub.w	r8, r8, r1
 800d74c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d750:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d754:	fa1f f888 	uxth.w	r8, r8
 800d758:	1419      	asrs	r1, r3, #16
 800d75a:	454e      	cmp	r6, r9
 800d75c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d760:	f84a 3b04 	str.w	r3, [sl], #4
 800d764:	d8e8      	bhi.n	800d738 <__mdiff+0x80>
 800d766:	1b33      	subs	r3, r6, r4
 800d768:	3b15      	subs	r3, #21
 800d76a:	f023 0303 	bic.w	r3, r3, #3
 800d76e:	3304      	adds	r3, #4
 800d770:	3415      	adds	r4, #21
 800d772:	42a6      	cmp	r6, r4
 800d774:	bf38      	it	cc
 800d776:	2304      	movcc	r3, #4
 800d778:	441d      	add	r5, r3
 800d77a:	4473      	add	r3, lr
 800d77c:	469e      	mov	lr, r3
 800d77e:	462e      	mov	r6, r5
 800d780:	4566      	cmp	r6, ip
 800d782:	d30e      	bcc.n	800d7a2 <__mdiff+0xea>
 800d784:	f10c 0203 	add.w	r2, ip, #3
 800d788:	1b52      	subs	r2, r2, r5
 800d78a:	f022 0203 	bic.w	r2, r2, #3
 800d78e:	3d03      	subs	r5, #3
 800d790:	45ac      	cmp	ip, r5
 800d792:	bf38      	it	cc
 800d794:	2200      	movcc	r2, #0
 800d796:	4413      	add	r3, r2
 800d798:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d79c:	b17a      	cbz	r2, 800d7be <__mdiff+0x106>
 800d79e:	6107      	str	r7, [r0, #16]
 800d7a0:	e7a4      	b.n	800d6ec <__mdiff+0x34>
 800d7a2:	f856 8b04 	ldr.w	r8, [r6], #4
 800d7a6:	fa11 f288 	uxtah	r2, r1, r8
 800d7aa:	1414      	asrs	r4, r2, #16
 800d7ac:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d7b0:	b292      	uxth	r2, r2
 800d7b2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d7b6:	f84e 2b04 	str.w	r2, [lr], #4
 800d7ba:	1421      	asrs	r1, r4, #16
 800d7bc:	e7e0      	b.n	800d780 <__mdiff+0xc8>
 800d7be:	3f01      	subs	r7, #1
 800d7c0:	e7ea      	b.n	800d798 <__mdiff+0xe0>
 800d7c2:	bf00      	nop
 800d7c4:	0800e1b5 	.word	0x0800e1b5
 800d7c8:	0800e1c6 	.word	0x0800e1c6

0800d7cc <__d2b>:
 800d7cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7d0:	460f      	mov	r7, r1
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	ec59 8b10 	vmov	r8, r9, d0
 800d7d8:	4616      	mov	r6, r2
 800d7da:	f7ff fcd5 	bl	800d188 <_Balloc>
 800d7de:	4604      	mov	r4, r0
 800d7e0:	b930      	cbnz	r0, 800d7f0 <__d2b+0x24>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	4b24      	ldr	r3, [pc, #144]	; (800d878 <__d2b+0xac>)
 800d7e6:	4825      	ldr	r0, [pc, #148]	; (800d87c <__d2b+0xb0>)
 800d7e8:	f240 310f 	movw	r1, #783	; 0x30f
 800d7ec:	f000 f8e0 	bl	800d9b0 <__assert_func>
 800d7f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7f8:	bb2d      	cbnz	r5, 800d846 <__d2b+0x7a>
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	f1b8 0300 	subs.w	r3, r8, #0
 800d800:	d026      	beq.n	800d850 <__d2b+0x84>
 800d802:	4668      	mov	r0, sp
 800d804:	9300      	str	r3, [sp, #0]
 800d806:	f7ff fd87 	bl	800d318 <__lo0bits>
 800d80a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d80e:	b1e8      	cbz	r0, 800d84c <__d2b+0x80>
 800d810:	f1c0 0320 	rsb	r3, r0, #32
 800d814:	fa02 f303 	lsl.w	r3, r2, r3
 800d818:	430b      	orrs	r3, r1
 800d81a:	40c2      	lsrs	r2, r0
 800d81c:	6163      	str	r3, [r4, #20]
 800d81e:	9201      	str	r2, [sp, #4]
 800d820:	9b01      	ldr	r3, [sp, #4]
 800d822:	61a3      	str	r3, [r4, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	bf14      	ite	ne
 800d828:	2202      	movne	r2, #2
 800d82a:	2201      	moveq	r2, #1
 800d82c:	6122      	str	r2, [r4, #16]
 800d82e:	b1bd      	cbz	r5, 800d860 <__d2b+0x94>
 800d830:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d834:	4405      	add	r5, r0
 800d836:	603d      	str	r5, [r7, #0]
 800d838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d83c:	6030      	str	r0, [r6, #0]
 800d83e:	4620      	mov	r0, r4
 800d840:	b003      	add	sp, #12
 800d842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d84a:	e7d6      	b.n	800d7fa <__d2b+0x2e>
 800d84c:	6161      	str	r1, [r4, #20]
 800d84e:	e7e7      	b.n	800d820 <__d2b+0x54>
 800d850:	a801      	add	r0, sp, #4
 800d852:	f7ff fd61 	bl	800d318 <__lo0bits>
 800d856:	9b01      	ldr	r3, [sp, #4]
 800d858:	6163      	str	r3, [r4, #20]
 800d85a:	3020      	adds	r0, #32
 800d85c:	2201      	movs	r2, #1
 800d85e:	e7e5      	b.n	800d82c <__d2b+0x60>
 800d860:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d868:	6038      	str	r0, [r7, #0]
 800d86a:	6918      	ldr	r0, [r3, #16]
 800d86c:	f7ff fd34 	bl	800d2d8 <__hi0bits>
 800d870:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d874:	e7e2      	b.n	800d83c <__d2b+0x70>
 800d876:	bf00      	nop
 800d878:	0800e1b5 	.word	0x0800e1b5
 800d87c:	0800e1c6 	.word	0x0800e1c6

0800d880 <__sread>:
 800d880:	b510      	push	{r4, lr}
 800d882:	460c      	mov	r4, r1
 800d884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d888:	f000 f860 	bl	800d94c <_read_r>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	bfab      	itete	ge
 800d890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d892:	89a3      	ldrhlt	r3, [r4, #12]
 800d894:	181b      	addge	r3, r3, r0
 800d896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d89a:	bfac      	ite	ge
 800d89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d89e:	81a3      	strhlt	r3, [r4, #12]
 800d8a0:	bd10      	pop	{r4, pc}

0800d8a2 <__swrite>:
 800d8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a6:	461f      	mov	r7, r3
 800d8a8:	898b      	ldrh	r3, [r1, #12]
 800d8aa:	05db      	lsls	r3, r3, #23
 800d8ac:	4605      	mov	r5, r0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	d505      	bpl.n	800d8c0 <__swrite+0x1e>
 800d8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b8:	2302      	movs	r3, #2
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f000 f834 	bl	800d928 <_lseek_r>
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ca:	81a3      	strh	r3, [r4, #12]
 800d8cc:	4632      	mov	r2, r6
 800d8ce:	463b      	mov	r3, r7
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8d6:	f000 b84b 	b.w	800d970 <_write_r>

0800d8da <__sseek>:
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	460c      	mov	r4, r1
 800d8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e2:	f000 f821 	bl	800d928 <_lseek_r>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	bf15      	itete	ne
 800d8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8f6:	81a3      	strheq	r3, [r4, #12]
 800d8f8:	bf18      	it	ne
 800d8fa:	81a3      	strhne	r3, [r4, #12]
 800d8fc:	bd10      	pop	{r4, pc}

0800d8fe <__sclose>:
 800d8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d902:	f000 b801 	b.w	800d908 <_close_r>
	...

0800d908 <_close_r>:
 800d908:	b538      	push	{r3, r4, r5, lr}
 800d90a:	4d06      	ldr	r5, [pc, #24]	; (800d924 <_close_r+0x1c>)
 800d90c:	2300      	movs	r3, #0
 800d90e:	4604      	mov	r4, r0
 800d910:	4608      	mov	r0, r1
 800d912:	602b      	str	r3, [r5, #0]
 800d914:	f7f4 fc47 	bl	80021a6 <_close>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d102      	bne.n	800d922 <_close_r+0x1a>
 800d91c:	682b      	ldr	r3, [r5, #0]
 800d91e:	b103      	cbz	r3, 800d922 <_close_r+0x1a>
 800d920:	6023      	str	r3, [r4, #0]
 800d922:	bd38      	pop	{r3, r4, r5, pc}
 800d924:	20000df8 	.word	0x20000df8

0800d928 <_lseek_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_lseek_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f4 fc5c 	bl	80021f4 <_lseek>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_lseek_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_lseek_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	20000df8 	.word	0x20000df8

0800d94c <_read_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d07      	ldr	r5, [pc, #28]	; (800d96c <_read_r+0x20>)
 800d950:	4604      	mov	r4, r0
 800d952:	4608      	mov	r0, r1
 800d954:	4611      	mov	r1, r2
 800d956:	2200      	movs	r2, #0
 800d958:	602a      	str	r2, [r5, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	f7f4 fbea 	bl	8002134 <_read>
 800d960:	1c43      	adds	r3, r0, #1
 800d962:	d102      	bne.n	800d96a <_read_r+0x1e>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	b103      	cbz	r3, 800d96a <_read_r+0x1e>
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	bd38      	pop	{r3, r4, r5, pc}
 800d96c:	20000df8 	.word	0x20000df8

0800d970 <_write_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	; (800d990 <_write_r+0x20>)
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	4611      	mov	r1, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	602a      	str	r2, [r5, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	f7f4 fbf5 	bl	800216e <_write>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_write_r+0x1e>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_write_r+0x1e>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20000df8 	.word	0x20000df8

0800d994 <memcpy>:
 800d994:	440a      	add	r2, r1
 800d996:	4291      	cmp	r1, r2
 800d998:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d99c:	d100      	bne.n	800d9a0 <memcpy+0xc>
 800d99e:	4770      	bx	lr
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9aa:	4291      	cmp	r1, r2
 800d9ac:	d1f9      	bne.n	800d9a2 <memcpy+0xe>
 800d9ae:	bd10      	pop	{r4, pc}

0800d9b0 <__assert_func>:
 800d9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9b2:	4614      	mov	r4, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <__assert_func+0x2c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	68d8      	ldr	r0, [r3, #12]
 800d9be:	b14c      	cbz	r4, 800d9d4 <__assert_func+0x24>
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <__assert_func+0x30>)
 800d9c2:	9100      	str	r1, [sp, #0]
 800d9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9c8:	4906      	ldr	r1, [pc, #24]	; (800d9e4 <__assert_func+0x34>)
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	f000 f836 	bl	800da3c <fiprintf>
 800d9d0:	f000 f853 	bl	800da7a <abort>
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <__assert_func+0x38>)
 800d9d6:	461c      	mov	r4, r3
 800d9d8:	e7f3      	b.n	800d9c2 <__assert_func+0x12>
 800d9da:	bf00      	nop
 800d9dc:	200000a8 	.word	0x200000a8
 800d9e0:	0800e326 	.word	0x0800e326
 800d9e4:	0800e333 	.word	0x0800e333
 800d9e8:	0800e361 	.word	0x0800e361

0800d9ec <_calloc_r>:
 800d9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800d9f2:	b94c      	cbnz	r4, 800da08 <_calloc_r+0x1c>
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	9201      	str	r2, [sp, #4]
 800d9f8:	f7fe f928 	bl	800bc4c <_malloc_r>
 800d9fc:	9a01      	ldr	r2, [sp, #4]
 800d9fe:	4605      	mov	r5, r0
 800da00:	b930      	cbnz	r0, 800da10 <_calloc_r+0x24>
 800da02:	4628      	mov	r0, r5
 800da04:	b003      	add	sp, #12
 800da06:	bd30      	pop	{r4, r5, pc}
 800da08:	220c      	movs	r2, #12
 800da0a:	6002      	str	r2, [r0, #0]
 800da0c:	2500      	movs	r5, #0
 800da0e:	e7f8      	b.n	800da02 <_calloc_r+0x16>
 800da10:	4621      	mov	r1, r4
 800da12:	f7fe fbf9 	bl	800c208 <memset>
 800da16:	e7f4      	b.n	800da02 <_calloc_r+0x16>

0800da18 <__ascii_mbtowc>:
 800da18:	b082      	sub	sp, #8
 800da1a:	b901      	cbnz	r1, 800da1e <__ascii_mbtowc+0x6>
 800da1c:	a901      	add	r1, sp, #4
 800da1e:	b142      	cbz	r2, 800da32 <__ascii_mbtowc+0x1a>
 800da20:	b14b      	cbz	r3, 800da36 <__ascii_mbtowc+0x1e>
 800da22:	7813      	ldrb	r3, [r2, #0]
 800da24:	600b      	str	r3, [r1, #0]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	1e10      	subs	r0, r2, #0
 800da2a:	bf18      	it	ne
 800da2c:	2001      	movne	r0, #1
 800da2e:	b002      	add	sp, #8
 800da30:	4770      	bx	lr
 800da32:	4610      	mov	r0, r2
 800da34:	e7fb      	b.n	800da2e <__ascii_mbtowc+0x16>
 800da36:	f06f 0001 	mvn.w	r0, #1
 800da3a:	e7f8      	b.n	800da2e <__ascii_mbtowc+0x16>

0800da3c <fiprintf>:
 800da3c:	b40e      	push	{r1, r2, r3}
 800da3e:	b503      	push	{r0, r1, lr}
 800da40:	4601      	mov	r1, r0
 800da42:	ab03      	add	r3, sp, #12
 800da44:	4805      	ldr	r0, [pc, #20]	; (800da5c <fiprintf+0x20>)
 800da46:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4a:	6800      	ldr	r0, [r0, #0]
 800da4c:	9301      	str	r3, [sp, #4]
 800da4e:	f000 f845 	bl	800dadc <_vfiprintf_r>
 800da52:	b002      	add	sp, #8
 800da54:	f85d eb04 	ldr.w	lr, [sp], #4
 800da58:	b003      	add	sp, #12
 800da5a:	4770      	bx	lr
 800da5c:	200000a8 	.word	0x200000a8

0800da60 <__ascii_wctomb>:
 800da60:	b149      	cbz	r1, 800da76 <__ascii_wctomb+0x16>
 800da62:	2aff      	cmp	r2, #255	; 0xff
 800da64:	bf85      	ittet	hi
 800da66:	238a      	movhi	r3, #138	; 0x8a
 800da68:	6003      	strhi	r3, [r0, #0]
 800da6a:	700a      	strbls	r2, [r1, #0]
 800da6c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800da70:	bf98      	it	ls
 800da72:	2001      	movls	r0, #1
 800da74:	4770      	bx	lr
 800da76:	4608      	mov	r0, r1
 800da78:	4770      	bx	lr

0800da7a <abort>:
 800da7a:	b508      	push	{r3, lr}
 800da7c:	2006      	movs	r0, #6
 800da7e:	f000 fa89 	bl	800df94 <raise>
 800da82:	2001      	movs	r0, #1
 800da84:	f7f4 fb4c 	bl	8002120 <_exit>

0800da88 <__sfputc_r>:
 800da88:	6893      	ldr	r3, [r2, #8]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	b410      	push	{r4}
 800da90:	6093      	str	r3, [r2, #8]
 800da92:	da08      	bge.n	800daa6 <__sfputc_r+0x1e>
 800da94:	6994      	ldr	r4, [r2, #24]
 800da96:	42a3      	cmp	r3, r4
 800da98:	db01      	blt.n	800da9e <__sfputc_r+0x16>
 800da9a:	290a      	cmp	r1, #10
 800da9c:	d103      	bne.n	800daa6 <__sfputc_r+0x1e>
 800da9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa2:	f000 b935 	b.w	800dd10 <__swbuf_r>
 800daa6:	6813      	ldr	r3, [r2, #0]
 800daa8:	1c58      	adds	r0, r3, #1
 800daaa:	6010      	str	r0, [r2, #0]
 800daac:	7019      	strb	r1, [r3, #0]
 800daae:	4608      	mov	r0, r1
 800dab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dab4:	4770      	bx	lr

0800dab6 <__sfputs_r>:
 800dab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab8:	4606      	mov	r6, r0
 800daba:	460f      	mov	r7, r1
 800dabc:	4614      	mov	r4, r2
 800dabe:	18d5      	adds	r5, r2, r3
 800dac0:	42ac      	cmp	r4, r5
 800dac2:	d101      	bne.n	800dac8 <__sfputs_r+0x12>
 800dac4:	2000      	movs	r0, #0
 800dac6:	e007      	b.n	800dad8 <__sfputs_r+0x22>
 800dac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dacc:	463a      	mov	r2, r7
 800dace:	4630      	mov	r0, r6
 800dad0:	f7ff ffda 	bl	800da88 <__sfputc_r>
 800dad4:	1c43      	adds	r3, r0, #1
 800dad6:	d1f3      	bne.n	800dac0 <__sfputs_r+0xa>
 800dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dadc <_vfiprintf_r>:
 800dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dae0:	460d      	mov	r5, r1
 800dae2:	b09d      	sub	sp, #116	; 0x74
 800dae4:	4614      	mov	r4, r2
 800dae6:	4698      	mov	r8, r3
 800dae8:	4606      	mov	r6, r0
 800daea:	b118      	cbz	r0, 800daf4 <_vfiprintf_r+0x18>
 800daec:	6a03      	ldr	r3, [r0, #32]
 800daee:	b90b      	cbnz	r3, 800daf4 <_vfiprintf_r+0x18>
 800daf0:	f7fe fb54 	bl	800c19c <__sinit>
 800daf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daf6:	07d9      	lsls	r1, r3, #31
 800daf8:	d405      	bmi.n	800db06 <_vfiprintf_r+0x2a>
 800dafa:	89ab      	ldrh	r3, [r5, #12]
 800dafc:	059a      	lsls	r2, r3, #22
 800dafe:	d402      	bmi.n	800db06 <_vfiprintf_r+0x2a>
 800db00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db02:	f7fe fbc8 	bl	800c296 <__retarget_lock_acquire_recursive>
 800db06:	89ab      	ldrh	r3, [r5, #12]
 800db08:	071b      	lsls	r3, r3, #28
 800db0a:	d501      	bpl.n	800db10 <_vfiprintf_r+0x34>
 800db0c:	692b      	ldr	r3, [r5, #16]
 800db0e:	b99b      	cbnz	r3, 800db38 <_vfiprintf_r+0x5c>
 800db10:	4629      	mov	r1, r5
 800db12:	4630      	mov	r0, r6
 800db14:	f000 f93a 	bl	800dd8c <__swsetup_r>
 800db18:	b170      	cbz	r0, 800db38 <_vfiprintf_r+0x5c>
 800db1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db1c:	07dc      	lsls	r4, r3, #31
 800db1e:	d504      	bpl.n	800db2a <_vfiprintf_r+0x4e>
 800db20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db24:	b01d      	add	sp, #116	; 0x74
 800db26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db2a:	89ab      	ldrh	r3, [r5, #12]
 800db2c:	0598      	lsls	r0, r3, #22
 800db2e:	d4f7      	bmi.n	800db20 <_vfiprintf_r+0x44>
 800db30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db32:	f7fe fbb1 	bl	800c298 <__retarget_lock_release_recursive>
 800db36:	e7f3      	b.n	800db20 <_vfiprintf_r+0x44>
 800db38:	2300      	movs	r3, #0
 800db3a:	9309      	str	r3, [sp, #36]	; 0x24
 800db3c:	2320      	movs	r3, #32
 800db3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db42:	f8cd 800c 	str.w	r8, [sp, #12]
 800db46:	2330      	movs	r3, #48	; 0x30
 800db48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dcfc <_vfiprintf_r+0x220>
 800db4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db50:	f04f 0901 	mov.w	r9, #1
 800db54:	4623      	mov	r3, r4
 800db56:	469a      	mov	sl, r3
 800db58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db5c:	b10a      	cbz	r2, 800db62 <_vfiprintf_r+0x86>
 800db5e:	2a25      	cmp	r2, #37	; 0x25
 800db60:	d1f9      	bne.n	800db56 <_vfiprintf_r+0x7a>
 800db62:	ebba 0b04 	subs.w	fp, sl, r4
 800db66:	d00b      	beq.n	800db80 <_vfiprintf_r+0xa4>
 800db68:	465b      	mov	r3, fp
 800db6a:	4622      	mov	r2, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	4630      	mov	r0, r6
 800db70:	f7ff ffa1 	bl	800dab6 <__sfputs_r>
 800db74:	3001      	adds	r0, #1
 800db76:	f000 80a9 	beq.w	800dccc <_vfiprintf_r+0x1f0>
 800db7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db7c:	445a      	add	r2, fp
 800db7e:	9209      	str	r2, [sp, #36]	; 0x24
 800db80:	f89a 3000 	ldrb.w	r3, [sl]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f000 80a1 	beq.w	800dccc <_vfiprintf_r+0x1f0>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db94:	f10a 0a01 	add.w	sl, sl, #1
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	9307      	str	r3, [sp, #28]
 800db9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dba0:	931a      	str	r3, [sp, #104]	; 0x68
 800dba2:	4654      	mov	r4, sl
 800dba4:	2205      	movs	r2, #5
 800dba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbaa:	4854      	ldr	r0, [pc, #336]	; (800dcfc <_vfiprintf_r+0x220>)
 800dbac:	f7f2 fb18 	bl	80001e0 <memchr>
 800dbb0:	9a04      	ldr	r2, [sp, #16]
 800dbb2:	b9d8      	cbnz	r0, 800dbec <_vfiprintf_r+0x110>
 800dbb4:	06d1      	lsls	r1, r2, #27
 800dbb6:	bf44      	itt	mi
 800dbb8:	2320      	movmi	r3, #32
 800dbba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbbe:	0713      	lsls	r3, r2, #28
 800dbc0:	bf44      	itt	mi
 800dbc2:	232b      	movmi	r3, #43	; 0x2b
 800dbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbc8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbcc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbce:	d015      	beq.n	800dbfc <_vfiprintf_r+0x120>
 800dbd0:	9a07      	ldr	r2, [sp, #28]
 800dbd2:	4654      	mov	r4, sl
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	f04f 0c0a 	mov.w	ip, #10
 800dbda:	4621      	mov	r1, r4
 800dbdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbe0:	3b30      	subs	r3, #48	; 0x30
 800dbe2:	2b09      	cmp	r3, #9
 800dbe4:	d94d      	bls.n	800dc82 <_vfiprintf_r+0x1a6>
 800dbe6:	b1b0      	cbz	r0, 800dc16 <_vfiprintf_r+0x13a>
 800dbe8:	9207      	str	r2, [sp, #28]
 800dbea:	e014      	b.n	800dc16 <_vfiprintf_r+0x13a>
 800dbec:	eba0 0308 	sub.w	r3, r0, r8
 800dbf0:	fa09 f303 	lsl.w	r3, r9, r3
 800dbf4:	4313      	orrs	r3, r2
 800dbf6:	9304      	str	r3, [sp, #16]
 800dbf8:	46a2      	mov	sl, r4
 800dbfa:	e7d2      	b.n	800dba2 <_vfiprintf_r+0xc6>
 800dbfc:	9b03      	ldr	r3, [sp, #12]
 800dbfe:	1d19      	adds	r1, r3, #4
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	9103      	str	r1, [sp, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	bfbb      	ittet	lt
 800dc08:	425b      	neglt	r3, r3
 800dc0a:	f042 0202 	orrlt.w	r2, r2, #2
 800dc0e:	9307      	strge	r3, [sp, #28]
 800dc10:	9307      	strlt	r3, [sp, #28]
 800dc12:	bfb8      	it	lt
 800dc14:	9204      	strlt	r2, [sp, #16]
 800dc16:	7823      	ldrb	r3, [r4, #0]
 800dc18:	2b2e      	cmp	r3, #46	; 0x2e
 800dc1a:	d10c      	bne.n	800dc36 <_vfiprintf_r+0x15a>
 800dc1c:	7863      	ldrb	r3, [r4, #1]
 800dc1e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc20:	d134      	bne.n	800dc8c <_vfiprintf_r+0x1b0>
 800dc22:	9b03      	ldr	r3, [sp, #12]
 800dc24:	1d1a      	adds	r2, r3, #4
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	9203      	str	r2, [sp, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	bfb8      	it	lt
 800dc2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc32:	3402      	adds	r4, #2
 800dc34:	9305      	str	r3, [sp, #20]
 800dc36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dd0c <_vfiprintf_r+0x230>
 800dc3a:	7821      	ldrb	r1, [r4, #0]
 800dc3c:	2203      	movs	r2, #3
 800dc3e:	4650      	mov	r0, sl
 800dc40:	f7f2 face 	bl	80001e0 <memchr>
 800dc44:	b138      	cbz	r0, 800dc56 <_vfiprintf_r+0x17a>
 800dc46:	9b04      	ldr	r3, [sp, #16]
 800dc48:	eba0 000a 	sub.w	r0, r0, sl
 800dc4c:	2240      	movs	r2, #64	; 0x40
 800dc4e:	4082      	lsls	r2, r0
 800dc50:	4313      	orrs	r3, r2
 800dc52:	3401      	adds	r4, #1
 800dc54:	9304      	str	r3, [sp, #16]
 800dc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc5a:	4829      	ldr	r0, [pc, #164]	; (800dd00 <_vfiprintf_r+0x224>)
 800dc5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc60:	2206      	movs	r2, #6
 800dc62:	f7f2 fabd 	bl	80001e0 <memchr>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d03f      	beq.n	800dcea <_vfiprintf_r+0x20e>
 800dc6a:	4b26      	ldr	r3, [pc, #152]	; (800dd04 <_vfiprintf_r+0x228>)
 800dc6c:	bb1b      	cbnz	r3, 800dcb6 <_vfiprintf_r+0x1da>
 800dc6e:	9b03      	ldr	r3, [sp, #12]
 800dc70:	3307      	adds	r3, #7
 800dc72:	f023 0307 	bic.w	r3, r3, #7
 800dc76:	3308      	adds	r3, #8
 800dc78:	9303      	str	r3, [sp, #12]
 800dc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc7c:	443b      	add	r3, r7
 800dc7e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc80:	e768      	b.n	800db54 <_vfiprintf_r+0x78>
 800dc82:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc86:	460c      	mov	r4, r1
 800dc88:	2001      	movs	r0, #1
 800dc8a:	e7a6      	b.n	800dbda <_vfiprintf_r+0xfe>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	3401      	adds	r4, #1
 800dc90:	9305      	str	r3, [sp, #20]
 800dc92:	4619      	mov	r1, r3
 800dc94:	f04f 0c0a 	mov.w	ip, #10
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc9e:	3a30      	subs	r2, #48	; 0x30
 800dca0:	2a09      	cmp	r2, #9
 800dca2:	d903      	bls.n	800dcac <_vfiprintf_r+0x1d0>
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d0c6      	beq.n	800dc36 <_vfiprintf_r+0x15a>
 800dca8:	9105      	str	r1, [sp, #20]
 800dcaa:	e7c4      	b.n	800dc36 <_vfiprintf_r+0x15a>
 800dcac:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e7f0      	b.n	800dc98 <_vfiprintf_r+0x1bc>
 800dcb6:	ab03      	add	r3, sp, #12
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	462a      	mov	r2, r5
 800dcbc:	4b12      	ldr	r3, [pc, #72]	; (800dd08 <_vfiprintf_r+0x22c>)
 800dcbe:	a904      	add	r1, sp, #16
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f7fd fd5d 	bl	800b780 <_printf_float>
 800dcc6:	4607      	mov	r7, r0
 800dcc8:	1c78      	adds	r0, r7, #1
 800dcca:	d1d6      	bne.n	800dc7a <_vfiprintf_r+0x19e>
 800dccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcce:	07d9      	lsls	r1, r3, #31
 800dcd0:	d405      	bmi.n	800dcde <_vfiprintf_r+0x202>
 800dcd2:	89ab      	ldrh	r3, [r5, #12]
 800dcd4:	059a      	lsls	r2, r3, #22
 800dcd6:	d402      	bmi.n	800dcde <_vfiprintf_r+0x202>
 800dcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcda:	f7fe fadd 	bl	800c298 <__retarget_lock_release_recursive>
 800dcde:	89ab      	ldrh	r3, [r5, #12]
 800dce0:	065b      	lsls	r3, r3, #25
 800dce2:	f53f af1d 	bmi.w	800db20 <_vfiprintf_r+0x44>
 800dce6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dce8:	e71c      	b.n	800db24 <_vfiprintf_r+0x48>
 800dcea:	ab03      	add	r3, sp, #12
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	462a      	mov	r2, r5
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <_vfiprintf_r+0x22c>)
 800dcf2:	a904      	add	r1, sp, #16
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f7fe f897 	bl	800be28 <_printf_i>
 800dcfa:	e7e4      	b.n	800dcc6 <_vfiprintf_r+0x1ea>
 800dcfc:	0800e362 	.word	0x0800e362
 800dd00:	0800e36c 	.word	0x0800e36c
 800dd04:	0800b781 	.word	0x0800b781
 800dd08:	0800dab7 	.word	0x0800dab7
 800dd0c:	0800e368 	.word	0x0800e368

0800dd10 <__swbuf_r>:
 800dd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd12:	460e      	mov	r6, r1
 800dd14:	4614      	mov	r4, r2
 800dd16:	4605      	mov	r5, r0
 800dd18:	b118      	cbz	r0, 800dd22 <__swbuf_r+0x12>
 800dd1a:	6a03      	ldr	r3, [r0, #32]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <__swbuf_r+0x12>
 800dd1e:	f7fe fa3d 	bl	800c19c <__sinit>
 800dd22:	69a3      	ldr	r3, [r4, #24]
 800dd24:	60a3      	str	r3, [r4, #8]
 800dd26:	89a3      	ldrh	r3, [r4, #12]
 800dd28:	071a      	lsls	r2, r3, #28
 800dd2a:	d525      	bpl.n	800dd78 <__swbuf_r+0x68>
 800dd2c:	6923      	ldr	r3, [r4, #16]
 800dd2e:	b31b      	cbz	r3, 800dd78 <__swbuf_r+0x68>
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	6922      	ldr	r2, [r4, #16]
 800dd34:	1a98      	subs	r0, r3, r2
 800dd36:	6963      	ldr	r3, [r4, #20]
 800dd38:	b2f6      	uxtb	r6, r6
 800dd3a:	4283      	cmp	r3, r0
 800dd3c:	4637      	mov	r7, r6
 800dd3e:	dc04      	bgt.n	800dd4a <__swbuf_r+0x3a>
 800dd40:	4621      	mov	r1, r4
 800dd42:	4628      	mov	r0, r5
 800dd44:	f7ff f9f8 	bl	800d138 <_fflush_r>
 800dd48:	b9e0      	cbnz	r0, 800dd84 <__swbuf_r+0x74>
 800dd4a:	68a3      	ldr	r3, [r4, #8]
 800dd4c:	3b01      	subs	r3, #1
 800dd4e:	60a3      	str	r3, [r4, #8]
 800dd50:	6823      	ldr	r3, [r4, #0]
 800dd52:	1c5a      	adds	r2, r3, #1
 800dd54:	6022      	str	r2, [r4, #0]
 800dd56:	701e      	strb	r6, [r3, #0]
 800dd58:	6962      	ldr	r2, [r4, #20]
 800dd5a:	1c43      	adds	r3, r0, #1
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d004      	beq.n	800dd6a <__swbuf_r+0x5a>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	07db      	lsls	r3, r3, #31
 800dd64:	d506      	bpl.n	800dd74 <__swbuf_r+0x64>
 800dd66:	2e0a      	cmp	r6, #10
 800dd68:	d104      	bne.n	800dd74 <__swbuf_r+0x64>
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f7ff f9e3 	bl	800d138 <_fflush_r>
 800dd72:	b938      	cbnz	r0, 800dd84 <__swbuf_r+0x74>
 800dd74:	4638      	mov	r0, r7
 800dd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd78:	4621      	mov	r1, r4
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f000 f806 	bl	800dd8c <__swsetup_r>
 800dd80:	2800      	cmp	r0, #0
 800dd82:	d0d5      	beq.n	800dd30 <__swbuf_r+0x20>
 800dd84:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd88:	e7f4      	b.n	800dd74 <__swbuf_r+0x64>
	...

0800dd8c <__swsetup_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4b2a      	ldr	r3, [pc, #168]	; (800de38 <__swsetup_r+0xac>)
 800dd90:	4605      	mov	r5, r0
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	460c      	mov	r4, r1
 800dd96:	b118      	cbz	r0, 800dda0 <__swsetup_r+0x14>
 800dd98:	6a03      	ldr	r3, [r0, #32]
 800dd9a:	b90b      	cbnz	r3, 800dda0 <__swsetup_r+0x14>
 800dd9c:	f7fe f9fe 	bl	800c19c <__sinit>
 800dda0:	89a3      	ldrh	r3, [r4, #12]
 800dda2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dda6:	0718      	lsls	r0, r3, #28
 800dda8:	d422      	bmi.n	800ddf0 <__swsetup_r+0x64>
 800ddaa:	06d9      	lsls	r1, r3, #27
 800ddac:	d407      	bmi.n	800ddbe <__swsetup_r+0x32>
 800ddae:	2309      	movs	r3, #9
 800ddb0:	602b      	str	r3, [r5, #0]
 800ddb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddb6:	81a3      	strh	r3, [r4, #12]
 800ddb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddbc:	e034      	b.n	800de28 <__swsetup_r+0x9c>
 800ddbe:	0758      	lsls	r0, r3, #29
 800ddc0:	d512      	bpl.n	800dde8 <__swsetup_r+0x5c>
 800ddc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc4:	b141      	cbz	r1, 800ddd8 <__swsetup_r+0x4c>
 800ddc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddca:	4299      	cmp	r1, r3
 800ddcc:	d002      	beq.n	800ddd4 <__swsetup_r+0x48>
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f7ff f8e0 	bl	800cf94 <_free_r>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	6363      	str	r3, [r4, #52]	; 0x34
 800ddd8:	89a3      	ldrh	r3, [r4, #12]
 800ddda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	2300      	movs	r3, #0
 800dde2:	6063      	str	r3, [r4, #4]
 800dde4:	6923      	ldr	r3, [r4, #16]
 800dde6:	6023      	str	r3, [r4, #0]
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	f043 0308 	orr.w	r3, r3, #8
 800ddee:	81a3      	strh	r3, [r4, #12]
 800ddf0:	6923      	ldr	r3, [r4, #16]
 800ddf2:	b94b      	cbnz	r3, 800de08 <__swsetup_r+0x7c>
 800ddf4:	89a3      	ldrh	r3, [r4, #12]
 800ddf6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddfe:	d003      	beq.n	800de08 <__swsetup_r+0x7c>
 800de00:	4621      	mov	r1, r4
 800de02:	4628      	mov	r0, r5
 800de04:	f000 f840 	bl	800de88 <__smakebuf_r>
 800de08:	89a0      	ldrh	r0, [r4, #12]
 800de0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de0e:	f010 0301 	ands.w	r3, r0, #1
 800de12:	d00a      	beq.n	800de2a <__swsetup_r+0x9e>
 800de14:	2300      	movs	r3, #0
 800de16:	60a3      	str	r3, [r4, #8]
 800de18:	6963      	ldr	r3, [r4, #20]
 800de1a:	425b      	negs	r3, r3
 800de1c:	61a3      	str	r3, [r4, #24]
 800de1e:	6923      	ldr	r3, [r4, #16]
 800de20:	b943      	cbnz	r3, 800de34 <__swsetup_r+0xa8>
 800de22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de26:	d1c4      	bne.n	800ddb2 <__swsetup_r+0x26>
 800de28:	bd38      	pop	{r3, r4, r5, pc}
 800de2a:	0781      	lsls	r1, r0, #30
 800de2c:	bf58      	it	pl
 800de2e:	6963      	ldrpl	r3, [r4, #20]
 800de30:	60a3      	str	r3, [r4, #8]
 800de32:	e7f4      	b.n	800de1e <__swsetup_r+0x92>
 800de34:	2000      	movs	r0, #0
 800de36:	e7f7      	b.n	800de28 <__swsetup_r+0x9c>
 800de38:	200000a8 	.word	0x200000a8

0800de3c <__swhatbuf_r>:
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	460c      	mov	r4, r1
 800de40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de44:	2900      	cmp	r1, #0
 800de46:	b096      	sub	sp, #88	; 0x58
 800de48:	4615      	mov	r5, r2
 800de4a:	461e      	mov	r6, r3
 800de4c:	da0d      	bge.n	800de6a <__swhatbuf_r+0x2e>
 800de4e:	89a3      	ldrh	r3, [r4, #12]
 800de50:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de54:	f04f 0100 	mov.w	r1, #0
 800de58:	bf0c      	ite	eq
 800de5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de5e:	2340      	movne	r3, #64	; 0x40
 800de60:	2000      	movs	r0, #0
 800de62:	6031      	str	r1, [r6, #0]
 800de64:	602b      	str	r3, [r5, #0]
 800de66:	b016      	add	sp, #88	; 0x58
 800de68:	bd70      	pop	{r4, r5, r6, pc}
 800de6a:	466a      	mov	r2, sp
 800de6c:	f000 f848 	bl	800df00 <_fstat_r>
 800de70:	2800      	cmp	r0, #0
 800de72:	dbec      	blt.n	800de4e <__swhatbuf_r+0x12>
 800de74:	9901      	ldr	r1, [sp, #4]
 800de76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de7e:	4259      	negs	r1, r3
 800de80:	4159      	adcs	r1, r3
 800de82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de86:	e7eb      	b.n	800de60 <__swhatbuf_r+0x24>

0800de88 <__smakebuf_r>:
 800de88:	898b      	ldrh	r3, [r1, #12]
 800de8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de8c:	079d      	lsls	r5, r3, #30
 800de8e:	4606      	mov	r6, r0
 800de90:	460c      	mov	r4, r1
 800de92:	d507      	bpl.n	800dea4 <__smakebuf_r+0x1c>
 800de94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de98:	6023      	str	r3, [r4, #0]
 800de9a:	6123      	str	r3, [r4, #16]
 800de9c:	2301      	movs	r3, #1
 800de9e:	6163      	str	r3, [r4, #20]
 800dea0:	b002      	add	sp, #8
 800dea2:	bd70      	pop	{r4, r5, r6, pc}
 800dea4:	ab01      	add	r3, sp, #4
 800dea6:	466a      	mov	r2, sp
 800dea8:	f7ff ffc8 	bl	800de3c <__swhatbuf_r>
 800deac:	9900      	ldr	r1, [sp, #0]
 800deae:	4605      	mov	r5, r0
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7fd fecb 	bl	800bc4c <_malloc_r>
 800deb6:	b948      	cbnz	r0, 800decc <__smakebuf_r+0x44>
 800deb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800debc:	059a      	lsls	r2, r3, #22
 800debe:	d4ef      	bmi.n	800dea0 <__smakebuf_r+0x18>
 800dec0:	f023 0303 	bic.w	r3, r3, #3
 800dec4:	f043 0302 	orr.w	r3, r3, #2
 800dec8:	81a3      	strh	r3, [r4, #12]
 800deca:	e7e3      	b.n	800de94 <__smakebuf_r+0xc>
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	6020      	str	r0, [r4, #0]
 800ded0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ded4:	81a3      	strh	r3, [r4, #12]
 800ded6:	9b00      	ldr	r3, [sp, #0]
 800ded8:	6163      	str	r3, [r4, #20]
 800deda:	9b01      	ldr	r3, [sp, #4]
 800dedc:	6120      	str	r0, [r4, #16]
 800dede:	b15b      	cbz	r3, 800def8 <__smakebuf_r+0x70>
 800dee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dee4:	4630      	mov	r0, r6
 800dee6:	f000 f81d 	bl	800df24 <_isatty_r>
 800deea:	b128      	cbz	r0, 800def8 <__smakebuf_r+0x70>
 800deec:	89a3      	ldrh	r3, [r4, #12]
 800deee:	f023 0303 	bic.w	r3, r3, #3
 800def2:	f043 0301 	orr.w	r3, r3, #1
 800def6:	81a3      	strh	r3, [r4, #12]
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	431d      	orrs	r5, r3
 800defc:	81a5      	strh	r5, [r4, #12]
 800defe:	e7cf      	b.n	800dea0 <__smakebuf_r+0x18>

0800df00 <_fstat_r>:
 800df00:	b538      	push	{r3, r4, r5, lr}
 800df02:	4d07      	ldr	r5, [pc, #28]	; (800df20 <_fstat_r+0x20>)
 800df04:	2300      	movs	r3, #0
 800df06:	4604      	mov	r4, r0
 800df08:	4608      	mov	r0, r1
 800df0a:	4611      	mov	r1, r2
 800df0c:	602b      	str	r3, [r5, #0]
 800df0e:	f7f4 f956 	bl	80021be <_fstat>
 800df12:	1c43      	adds	r3, r0, #1
 800df14:	d102      	bne.n	800df1c <_fstat_r+0x1c>
 800df16:	682b      	ldr	r3, [r5, #0]
 800df18:	b103      	cbz	r3, 800df1c <_fstat_r+0x1c>
 800df1a:	6023      	str	r3, [r4, #0]
 800df1c:	bd38      	pop	{r3, r4, r5, pc}
 800df1e:	bf00      	nop
 800df20:	20000df8 	.word	0x20000df8

0800df24 <_isatty_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	4d06      	ldr	r5, [pc, #24]	; (800df40 <_isatty_r+0x1c>)
 800df28:	2300      	movs	r3, #0
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	602b      	str	r3, [r5, #0]
 800df30:	f7f4 f955 	bl	80021de <_isatty>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d102      	bne.n	800df3e <_isatty_r+0x1a>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	b103      	cbz	r3, 800df3e <_isatty_r+0x1a>
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	bd38      	pop	{r3, r4, r5, pc}
 800df40:	20000df8 	.word	0x20000df8

0800df44 <_raise_r>:
 800df44:	291f      	cmp	r1, #31
 800df46:	b538      	push	{r3, r4, r5, lr}
 800df48:	4604      	mov	r4, r0
 800df4a:	460d      	mov	r5, r1
 800df4c:	d904      	bls.n	800df58 <_raise_r+0x14>
 800df4e:	2316      	movs	r3, #22
 800df50:	6003      	str	r3, [r0, #0]
 800df52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df56:	bd38      	pop	{r3, r4, r5, pc}
 800df58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800df5a:	b112      	cbz	r2, 800df62 <_raise_r+0x1e>
 800df5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df60:	b94b      	cbnz	r3, 800df76 <_raise_r+0x32>
 800df62:	4620      	mov	r0, r4
 800df64:	f000 f830 	bl	800dfc8 <_getpid_r>
 800df68:	462a      	mov	r2, r5
 800df6a:	4601      	mov	r1, r0
 800df6c:	4620      	mov	r0, r4
 800df6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df72:	f000 b817 	b.w	800dfa4 <_kill_r>
 800df76:	2b01      	cmp	r3, #1
 800df78:	d00a      	beq.n	800df90 <_raise_r+0x4c>
 800df7a:	1c59      	adds	r1, r3, #1
 800df7c:	d103      	bne.n	800df86 <_raise_r+0x42>
 800df7e:	2316      	movs	r3, #22
 800df80:	6003      	str	r3, [r0, #0]
 800df82:	2001      	movs	r0, #1
 800df84:	e7e7      	b.n	800df56 <_raise_r+0x12>
 800df86:	2400      	movs	r4, #0
 800df88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df8c:	4628      	mov	r0, r5
 800df8e:	4798      	blx	r3
 800df90:	2000      	movs	r0, #0
 800df92:	e7e0      	b.n	800df56 <_raise_r+0x12>

0800df94 <raise>:
 800df94:	4b02      	ldr	r3, [pc, #8]	; (800dfa0 <raise+0xc>)
 800df96:	4601      	mov	r1, r0
 800df98:	6818      	ldr	r0, [r3, #0]
 800df9a:	f7ff bfd3 	b.w	800df44 <_raise_r>
 800df9e:	bf00      	nop
 800dfa0:	200000a8 	.word	0x200000a8

0800dfa4 <_kill_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4d07      	ldr	r5, [pc, #28]	; (800dfc4 <_kill_r+0x20>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4604      	mov	r4, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	4611      	mov	r1, r2
 800dfb0:	602b      	str	r3, [r5, #0]
 800dfb2:	f7f4 f8a5 	bl	8002100 <_kill>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d102      	bne.n	800dfc0 <_kill_r+0x1c>
 800dfba:	682b      	ldr	r3, [r5, #0]
 800dfbc:	b103      	cbz	r3, 800dfc0 <_kill_r+0x1c>
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	bd38      	pop	{r3, r4, r5, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20000df8 	.word	0x20000df8

0800dfc8 <_getpid_r>:
 800dfc8:	f7f4 b892 	b.w	80020f0 <_getpid>

0800dfcc <_init>:
 800dfcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfce:	bf00      	nop
 800dfd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfd2:	bc08      	pop	{r3}
 800dfd4:	469e      	mov	lr, r3
 800dfd6:	4770      	bx	lr

0800dfd8 <_fini>:
 800dfd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfda:	bf00      	nop
 800dfdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dfde:	bc08      	pop	{r3}
 800dfe0:	469e      	mov	lr, r3
 800dfe2:	4770      	bx	lr
