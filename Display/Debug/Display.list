
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  0800ac70  0800ac70  0001ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b404  0800b404  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b404  0800b404  0001b404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b40c  0800b40c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800b414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce8  2000009c  0800b4b0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d84  0800b4b0  00020d84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ecb  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477b  00000000  00000000  00038fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  0003d758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2b  00000000  00000000  0003eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9d4  00000000  00000000  0003fa9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd05  00000000  00000000  0005a46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090a7a  00000000  00000000  00076174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000577c  00000000  00000000  00106bf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010c36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000009c 	.word	0x2000009c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac58 	.word	0x0800ac58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a0 	.word	0x200000a0
 80001dc:	0800ac58 	.word	0x0800ac58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	4b75      	ldr	r3, [pc, #468]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a74      	ldr	r2, [pc, #464]	; (800076c <MX_GPIO_Init+0x1f0>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b72      	ldr	r3, [pc, #456]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b6e      	ldr	r3, [pc, #440]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a6d      	ldr	r2, [pc, #436]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b67      	ldr	r3, [pc, #412]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a66      	ldr	r2, [pc, #408]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b64      	ldr	r3, [pc, #400]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b60      	ldr	r3, [pc, #384]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a5f      	ldr	r2, [pc, #380]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b5d      	ldr	r3, [pc, #372]	; (800076c <MX_GPIO_Init+0x1f0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a58      	ldr	r2, [pc, #352]	; (800076c <MX_GPIO_Init+0x1f0>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b52      	ldr	r3, [pc, #328]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a51      	ldr	r2, [pc, #324]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b4f      	ldr	r3, [pc, #316]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800063a:	2200      	movs	r2, #0
 800063c:	f647 7188 	movw	r1, #32648	; 0x7f88
 8000640:	484b      	ldr	r0, [pc, #300]	; (8000770 <MX_GPIO_Init+0x1f4>)
 8000642:	f001 fd4d 	bl	80020e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2101      	movs	r1, #1
 800064a:	484a      	ldr	r0, [pc, #296]	; (8000774 <MX_GPIO_Init+0x1f8>)
 800064c:	f001 fd48 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	210c      	movs	r1, #12
 8000654:	4848      	ldr	r0, [pc, #288]	; (8000778 <MX_GPIO_Init+0x1fc>)
 8000656:	f001 fd43 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2101      	movs	r1, #1
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <MX_GPIO_Init+0x200>)
 8000660:	f001 fd3e 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000664:	2200      	movs	r2, #0
 8000666:	f64f 711f 	movw	r1, #65311	; 0xff1f
 800066a:	4845      	ldr	r0, [pc, #276]	; (8000780 <MX_GPIO_Init+0x204>)
 800066c:	f001 fd38 	bl	80020e0 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000670:	2304      	movs	r3, #4
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	483b      	ldr	r0, [pc, #236]	; (8000770 <MX_GPIO_Init+0x1f4>)
 8000684:	f001 fba8 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000688:	f647 7388 	movw	r3, #32648	; 0x7f88
 800068c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4833      	ldr	r0, [pc, #204]	; (8000770 <MX_GPIO_Init+0x1f4>)
 80006a2:	f001 fb99 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80006a6:	2332      	movs	r3, #50	; 0x32
 80006a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006aa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	482d      	ldr	r0, [pc, #180]	; (8000770 <MX_GPIO_Init+0x1f4>)
 80006bc:	f001 fb8c 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4827      	ldr	r0, [pc, #156]	; (8000774 <MX_GPIO_Init+0x1f8>)
 80006d8:	f001 fb7e 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006dc:	2301      	movs	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4821      	ldr	r0, [pc, #132]	; (8000778 <MX_GPIO_Init+0x1fc>)
 80006f2:	f001 fb71 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230c      	movs	r3, #12
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000702:	2300      	movs	r3, #0
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_GPIO_Init+0x1fc>)
 800070e:	f001 fb63 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000712:	2301      	movs	r3, #1
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_GPIO_Init+0x200>)
 800072a:	f001 fb55 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PDPin PDPin PDPin PDPin
                           PD0 PD1 PD2 PD3
                           PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800072e:	f64f 731f 	movw	r3, #65311	; 0xff1f
 8000732:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <MX_GPIO_Init+0x204>)
 8000748:	f001 fb46 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800074c:	2320      	movs	r3, #32
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_GPIO_Init+0x204>)
 8000760:	f001 fb3a 	bl	8001dd8 <HAL_GPIO_Init>

}
 8000764:	bf00      	nop
 8000766:	3730      	adds	r7, #48	; 0x30
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40021000 	.word	0x40021000
 8000774:	40020800 	.word	0x40020800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400
 8000780:	40020c00 	.word	0x40020c00

08000784 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f003 fdc1 	bl	8004348 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f001 f80a 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000b8 	.word	0x200000b8
 80007d8:	40005400 	.word	0x40005400
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C3_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_I2C3_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C3_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_I2C3_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C3_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C3_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_I2C3_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C3_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2C3_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_I2C3_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2C3_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C3_Init+0x50>)
 800081e:	f003 fd93 	bl	8004348 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 ffdc 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	2000010c 	.word	0x2000010c
 8000834:	40005c00 	.word	0x40005c00
 8000838:	000186a0 	.word	0x000186a0

0800083c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a42      	ldr	r2, [pc, #264]	; (8000964 <HAL_I2C_MspInit+0x128>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d12d      	bne.n	80008ba <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
 8000862:	4b41      	ldr	r3, [pc, #260]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a40      	ldr	r2, [pc, #256]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800087a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000880:	2312      	movs	r3, #18
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800088c:	2304      	movs	r3, #4
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4835      	ldr	r0, [pc, #212]	; (800096c <HAL_I2C_MspInit+0x130>)
 8000898:	f001 fa9e 	bl	8001dd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a30      	ldr	r2, [pc, #192]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80008b8:	e050      	b.n	800095c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a2c      	ldr	r2, [pc, #176]	; (8000970 <HAL_I2C_MspInit+0x134>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d14b      	bne.n	800095c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008cc:	4a26      	ldr	r2, [pc, #152]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6313      	str	r3, [r2, #48]	; 0x30
 80008d4:	4b24      	ldr	r3, [pc, #144]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	6313      	str	r3, [r2, #48]	; 0x30
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000902:	2312      	movs	r3, #18
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800090e:	2304      	movs	r3, #4
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4816      	ldr	r0, [pc, #88]	; (8000974 <HAL_I2C_MspInit+0x138>)
 800091a:	f001 fa5d 	bl	8001dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800091e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000930:	2304      	movs	r3, #4
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <HAL_I2C_MspInit+0x13c>)
 800093c:	f001 fa4c 	bl	8001dd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 800094a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_I2C_MspInit+0x12c>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
}
 800095c:	bf00      	nop
 800095e:	3730      	adds	r7, #48	; 0x30
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400
 8000970:	40005c00 	.word	0x40005c00
 8000974:	40020800 	.word	0x40020800
 8000978:	40020000 	.word	0x40020000

0800097c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <MX_I2S2_Init+0x50>)
 8000982:	4a13      	ldr	r2, [pc, #76]	; (80009d0 <MX_I2S2_Init+0x54>)
 8000984:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <MX_I2S2_Init+0x50>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <MX_I2S2_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000994:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <MX_I2S2_Init+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <MX_I2S2_Init+0x50>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <MX_I2S2_Init+0x50>)
 80009a2:	4a0c      	ldr	r2, [pc, #48]	; (80009d4 <MX_I2S2_Init+0x58>)
 80009a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <MX_I2S2_Init+0x50>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <MX_I2S2_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <MX_I2S2_Init+0x50>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_I2S2_Init+0x50>)
 80009ba:	f004 fb11 	bl	8004fe0 <HAL_I2S_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80009c4:	f000 ff0e 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000160 	.word	0x20000160
 80009d0:	40003800 	.word	0x40003800
 80009d4:	00017700 	.word	0x00017700

080009d8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <MX_I2S3_Init+0x58>)
 80009e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_I2S3_Init+0x54>)
 80009f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <MX_I2S3_Init+0x5c>)
 8000a02:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_I2S3_Init+0x54>)
 8000a18:	f004 fae2 	bl	8004fe0 <HAL_I2S_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a22:	f000 fedf 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001a8 	.word	0x200001a8
 8000a30:	40003c00 	.word	0x40003c00
 8000a34:	00017700 	.word	0x00017700

08000a38 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	; 0x38
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a59      	ldr	r2, [pc, #356]	; (8000bbc <HAL_I2S_MspInit+0x184>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d15b      	bne.n	8000b12 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
 8000a5e:	4b58      	ldr	r3, [pc, #352]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a57      	ldr	r2, [pc, #348]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	623b      	str	r3, [r7, #32]
 8000a74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
 8000a7a:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b4e      	ldr	r3, [pc, #312]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a49      	ldr	r2, [pc, #292]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000abe:	2306      	movs	r3, #6
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	483e      	ldr	r0, [pc, #248]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000aca:	f001 f985 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000aea:	f001 f975 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000aee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	2300      	movs	r3, #0
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b00:	2305      	movs	r3, #5
 8000b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <HAL_I2S_MspInit+0x190>)
 8000b0c:	f001 f964 	bl	8001dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b10:	e04f      	b.n	8000bb2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <HAL_I2S_MspInit+0x194>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d14a      	bne.n	8000bb2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6313      	str	r3, [r2, #48]	; 0x30
 8000b64:	4b16      	ldr	r3, [pc, #88]	; (8000bc0 <HAL_I2S_MspInit+0x188>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b70:	2310      	movs	r3, #16
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b80:	2306      	movs	r3, #6
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4811      	ldr	r0, [pc, #68]	; (8000bd0 <HAL_I2S_MspInit+0x198>)
 8000b8c:	f001 f924 	bl	8001dd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b90:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba2:	2306      	movs	r3, #6
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_I2S_MspInit+0x18c>)
 8000bae:	f001 f913 	bl	8001dd8 <HAL_GPIO_Init>
}
 8000bb2:	bf00      	nop
 8000bb4:	3738      	adds	r7, #56	; 0x38
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40003800 	.word	0x40003800
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020400 	.word	0x40020400
 8000bcc:	40003c00 	.word	0x40003c00
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 fbad 	bl	800133e <LCD5110_refresh_ll>
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f000 f880 	bl	8000d08 <LCD5110_wset_cursor>
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f936 	bl	8000e8c <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	2100      	movs	r1, #0
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ffe1 	bl	8000bec <LCD5110_set_cursor>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b084      	sub	sp, #16
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	68f8      	ldr	r0, [r7, #12]
 8000c4a:	f000 f893 	bl	8000d74 <LCD5110_wprint>
}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5a:	b08b      	sub	sp, #44	; 0x2c
 8000c5c:	af04      	add	r7, sp, #16
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	4613      	mov	r3, r2
 8000c66:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db41      	blt.n	8000cf6 <LCD5110_wputchar+0x9e>
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db3c      	blt.n	8000cf6 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000c82:	461a      	mov	r2, r3
 8000c84:	2306      	movs	r3, #6
 8000c86:	4413      	add	r3, r2
 8000c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c8a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d833      	bhi.n	8000cfa <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c94:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	4413      	add	r3, r2
 8000c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ca0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d828      	bhi.n	8000cfa <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <LCD5110_wputchar+0xac>)
 8000caa:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	18d0      	adds	r0, r2, r3
 8000cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2206      	movs	r2, #6
 8000cc8:	fb02 f303 	mul.w	r3, r2, r3
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	441a      	add	r2, r3
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	461e      	mov	r6, r3
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	461c      	mov	r4, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461d      	mov	r5, r3
 8000ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ce8:	9302      	str	r3, [sp, #8]
 8000cea:	9501      	str	r5, [sp, #4]
 8000cec:	9400      	str	r4, [sp, #0]
 8000cee:	4633      	mov	r3, r6
 8000cf0:	f000 f927 	bl	8000f42 <LCD5110_drawBitmap>
 8000cf4:	e002      	b.n	8000cfc <LCD5110_wputchar+0xa4>
		return;
 8000cf6:	bf00      	nop
 8000cf8:	e000      	b.n	8000cfc <LCD5110_wputchar+0xa4>
		return;
 8000cfa:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000cfc:	371c      	adds	r7, #28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	0800aca8 	.word	0x0800aca8

08000d08 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	815a      	strh	r2, [r3, #10]
}
 8000d26:	bf00      	nop
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	2308      	movs	r3, #8
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4413      	add	r3, r2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2202      	movs	r2, #2
 8000d5a:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f7ff ff35 	bl	8000bd4 <LCD5110_refresh>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af02      	add	r7, sp, #8
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000d82:	e053      	b.n	8000e2c <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b0a      	cmp	r3, #10
 8000d8a:	d010      	beq.n	8000dae <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000d92:	4618      	mov	r0, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f7ff ff55 	bl	8000c58 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	2306      	movs	r3, #6
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2306      	movs	r3, #6
 8000dce:	4413      	add	r3, r2
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d904      	bls.n	8000de4 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8000de0:	2b0a      	cmp	r3, #10
 8000de2:	d103      	bne.n	8000dec <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b0a      	cmp	r3, #10
 8000dea:	d111      	bne.n	8000e10 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff ff9f 	bl	8000d32 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	3301      	adds	r3, #1
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <LCD5110_wprint+0xcc>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <LCD5110_wprint+0x9c>
				++str;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000e16:	461a      	mov	r2, r3
 8000e18:	2308      	movs	r3, #8
 8000e1a:	4413      	add	r3, r2
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d807      	bhi.n	8000e36 <LCD5110_wprint+0xc2>
			break;
		str++;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1a7      	bne.n	8000d84 <LCD5110_wprint+0x10>

	}
}
 8000e34:	e000      	b.n	8000e38 <LCD5110_wprint+0xc4>
			break;
 8000e36:	bf00      	nop
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	0800b2d0 	.word	0x0800b2d0

08000e44 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	10db      	asrs	r3, r3, #3
 8000e54:	2254      	movs	r2, #84	; 0x54
 8000e56:	fb03 f202 	mul.w	r2, r3, r2
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	2201      	movs	r2, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	753b      	strb	r3, [r7, #20]

	return res;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	461a      	mov	r2, r3
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e7c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	371c      	adds	r7, #28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	e008      	b.n	8000eac <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	331c      	adds	r3, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000eb2:	dbf2      	blt.n	8000e9a <LCD5110_clrscr+0xe>
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db31      	blt.n	8000f3a <LCD5110_putpix+0x78>
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db2e      	blt.n	8000f3a <LCD5110_putpix+0x78>
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b53      	cmp	r3, #83	; 0x53
 8000ee0:	dc2b      	bgt.n	8000f3a <LCD5110_putpix+0x78>
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ee6:	dc28      	bgt.n	8000f3a <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	68f9      	ldr	r1, [r7, #12]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ffa7 	bl	8000e44 <xy_to_pix>

	if (color)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00c      	beq.n	8000f16 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	4413      	add	r3, r2
 8000f02:	7f19      	ldrb	r1, [r3, #28]
 8000f04:	7d3a      	ldrb	r2, [r7, #20]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	b2d1      	uxtb	r1, r2
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	460a      	mov	r2, r1
 8000f12:	771a      	strb	r2, [r3, #28]
 8000f14:	e012      	b.n	8000f3c <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	7f1b      	ldrb	r3, [r3, #28]
 8000f1e:	b25a      	sxtb	r2, r3
 8000f20:	7d3b      	ldrb	r3, [r7, #20]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b2d1      	uxtb	r1, r2
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	460a      	mov	r2, r1
 8000f36:	771a      	strb	r2, [r3, #28]
 8000f38:	e000      	b.n	8000f3c <LCD5110_putpix+0x7a>
		return;
 8000f3a:	bf00      	nop
}
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b088      	sub	sp, #32
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
 8000f54:	e03d      	b.n	8000fd2 <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	e033      	b.n	8000fc4 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	da00      	bge.n	8000f64 <LCD5110_drawBitmap+0x22>
 8000f62:	3307      	adds	r3, #7
 8000f64:	10db      	asrs	r3, r3, #3
 8000f66:	461a      	mov	r2, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	fb03 f202 	mul.w	r2, r3, r2
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	4413      	add	r3, r2
 8000f72:	461a      	mov	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	b25a      	sxtb	r2, r3
 8000f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	18d0      	adds	r0, r2, r3
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	18d1      	adds	r1, r2, r3
 8000fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d007      	beq.n	8000fb6 <LCD5110_drawBitmap+0x74>
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	bf0c      	ite	eq
 8000fac:	2301      	moveq	r3, #1
 8000fae:	2300      	movne	r3, #0
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	e000      	b.n	8000fb8 <LCD5110_drawBitmap+0x76>
 8000fb6:	7dfa      	ldrb	r2, [r7, #23]
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fba:	f7ff ff82 	bl	8000ec2 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbc7      	blt.n	8000f5c <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dbbd      	blt.n	8000f56 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	1df9      	adds	r1, r7, #7
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f005 faef 	bl	80065de <HAL_SPI_Transmit>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	460b      	mov	r3, r1
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6818      	ldr	r0, [r3, #0]
 800101c:	897a      	ldrh	r2, [r7, #10]
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	68f9      	ldr	r1, [r7, #12]
 8001024:	f005 fadb 	bl	80065de <HAL_SPI_Transmit>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6898      	ldr	r0, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	889b      	ldrh	r3, [r3, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	f001 f84b 	bl	80020e0 <HAL_GPIO_WritePin>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6998      	ldr	r0, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8a9b      	ldrh	r3, [r3, #20]
 8001062:	2201      	movs	r2, #1
 8001064:	4619      	mov	r1, r3
 8001066:	f001 f83b 	bl	80020e0 <HAL_GPIO_WritePin>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6998      	ldr	r0, [r3, #24]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8a9b      	ldrh	r3, [r3, #20]
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	f001 f82b 	bl	80020e0 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6918      	ldr	r0, [r3, #16]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	899b      	ldrh	r3, [r3, #12]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	f001 f81b 	bl	80020e0 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6918      	ldr	r0, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	899b      	ldrh	r3, [r3, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	4619      	mov	r1, r3
 80010c6:	f001 f80b 	bl	80020e0 <HAL_GPIO_WritePin>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	6039      	str	r1, [r7, #0]
 80010dc:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f023 0320 	bic.w	r3, r3, #32
 80010e4:	2b07      	cmp	r3, #7
 80010e6:	dd01      	ble.n	80010ec <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e008      	b.n	80010fe <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff74 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	6039      	str	r1, [r7, #0]
 8001110:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f023 030d 	bic.w	r3, r3, #13
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 800111c:	2302      	movs	r3, #2
 800111e:	e005      	b.n	800112c <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	6839      	ldr	r1, [r7, #0]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff5d 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da01      	bge.n	800114c <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001148:	2303      	movs	r3, #3
 800114a:	e008      	b.n	800115e <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001152:	b2db      	uxtb	r3, r3
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff44 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	4603      	mov	r3, r0
 800116e:	6039      	str	r1, [r7, #0]
 8001170:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d901      	bls.n	800117c <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8001178:	2304      	movs	r3, #4
 800117a:	e008      	b.n	800118e <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	b2db      	uxtb	r3, r3
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff2c 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	6039      	str	r1, [r7, #0]
 80011a0:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	d901      	bls.n	80011ac <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 80011a8:	2305      	movs	r3, #5
 80011aa:	e008      	b.n	80011be <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff14 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	6039      	str	r1, [r7, #0]
 80011d0:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80011d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	db03      	blt.n	80011e2 <LCD5110_set_X_base+0x1c>
 80011da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011de:	2b53      	cmp	r3, #83	; 0x53
 80011e0:	dd01      	ble.n	80011e6 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00a      	b.n	80011fc <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fef5 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8001210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001214:	2b00      	cmp	r3, #0
 8001216:	db03      	blt.n	8001220 <LCD5110_set_Y_base+0x1c>
 8001218:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800121c:	2b05      	cmp	r3, #5
 800121e:	dd01      	ble.n	8001224 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8001220:	2307      	movs	r3, #7
 8001222:	e00a      	b.n	800123a <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	b25b      	sxtb	r3, r3
 800122e:	b2db      	uxtb	r3, r3
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fed6 	bl	8000fe4 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	603a      	str	r2, [r7, #0]
 800124c:	80fb      	strh	r3, [r7, #6]
 800124e:	460b      	mov	r3, r1
 8001250:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffb4 	bl	80011c6 <LCD5110_set_X_base>
 800125e:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <LCD5110_set_XY_base+0x28>
		return res;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	e00c      	b.n	8001284 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 800126a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800126e:	6839      	ldr	r1, [r7, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ffc7 	bl	8001204 <LCD5110_set_Y_base>
 8001276:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <LCD5110_set_XY_base+0x40>
		return res;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	e000      	b.n	8001284 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	70fb      	strb	r3, [r7, #3]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70bb      	strb	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffdc 	bl	800128c <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff feac 	bl	8001032 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fee9 	bl	80010b2 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 80012e0:	2364      	movs	r3, #100	; 0x64
 80012e2:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80012e4:	bf00      	nop
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1fa      	bne.n	80012e6 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fece 	bl	8001092 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff febb 	bl	8001072 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	2001      	movs	r0, #1
 8001300:	f7ff fee7 	bl	80010d2 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8001304:	78bb      	ldrb	r3, [r7, #2]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff13 	bl	8001134 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800130e:	787b      	ldrb	r3, [r7, #1]
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff27 	bl	8001166 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001318:	7e3b      	ldrb	r3, [r7, #24]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff3a 	bl	8001196 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	2000      	movs	r0, #0
 8001326:	f7ff fed4 	bl	80010d2 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fee9 	bl	8001106 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001334:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe73 	bl	8001032 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fe90 	bl	8001072 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	2100      	movs	r1, #0
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff73 	bl	8001242 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fe78 	bl	8001052 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	331c      	adds	r3, #28
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fe4c 	bl	800100a <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	b2db      	uxtb	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	461a      	mov	r2, r3
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	f003 030f 	and.w	r3, r3, #15
 800139c:	4413      	add	r3, r2
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c3, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c3, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	2307      	movs	r3, #7
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	463b      	mov	r3, r7
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2200      	movs	r2, #0
 80013c4:	21d0      	movs	r1, #208	; 0xd0
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <Get_Time+0x98>)
 80013c8:	f003 f902 	bl	80045d0 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80013cc:	783b      	ldrb	r3, [r7, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ffd3 	bl	800137a <bcdToDec>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <Get_Time+0x9c>)
 80013da:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ffcb 	bl	800137a <bcdToDec>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <Get_Time+0x9c>)
 80013ea:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 80013ec:	78bb      	ldrb	r3, [r7, #2]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ffc3 	bl	800137a <bcdToDec>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <Get_Time+0x9c>)
 80013fa:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffbb 	bl	800137a <bcdToDec>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <Get_Time+0x9c>)
 800140a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800140c:	793b      	ldrb	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ffb3 	bl	800137a <bcdToDec>
 8001414:	4603      	mov	r3, r0
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <Get_Time+0x9c>)
 800141a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800141c:	797b      	ldrb	r3, [r7, #5]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff ffab 	bl	800137a <bcdToDec>
 8001424:	4603      	mov	r3, r0
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <Get_Time+0x9c>)
 800142a:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff ffa3 	bl	800137a <bcdToDec>
 8001434:	4603      	mov	r3, r0
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <Get_Time+0x9c>)
 800143a:	719a      	strb	r2, [r3, #6]
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000010c 	.word	0x2000010c
 8001448:	20000418 	.word	0x20000418

0800144c <decimal_to_binary>:

void decimal_to_binary(uint8_t number, uint8_t *binary_value)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = number;
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 4; i++)
 800145c:	2300      	movs	r3, #0
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	e00d      	b.n	800147e <decimal_to_binary+0x32>
	{
		binary_value[i] = temp % 2;
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	4413      	add	r3, r2
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	f002 0201 	and.w	r2, r2, #1
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
		temp = temp / 2;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < 4; i++)
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	3301      	adds	r3, #1
 800147c:	73bb      	strb	r3, [r7, #14]
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d9ee      	bls.n	8001462 <decimal_to_binary+0x16>
	}
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3714      	adds	r7, #20
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b08d      	sub	sp, #52	; 0x34
 8001498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149a:	f000 faf5 	bl	8001a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f919 	bl	80016d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014a2:	f000 f97f 	bl	80017a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a6:	f7ff f869 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014aa:	f7ff f96b 	bl	8000784 <MX_I2C1_Init>
  MX_I2S2_Init();
 80014ae:	f7ff fa65 	bl	800097c <MX_I2S2_Init>
  MX_I2S3_Init();
 80014b2:	f7ff fa91 	bl	80009d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80014b6:	f000 f99b 	bl	80017f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80014ba:	f008 fc0f 	bl	8009cdc <MX_USB_HOST_Init>
  MX_I2C3_Init();
 80014be:	f7ff f98f 	bl	80007e0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  lcd1.hw_conf.spi_handle = &hspi1;
 80014c2:	4b74      	ldr	r3, [pc, #464]	; (8001694 <main+0x200>)
 80014c4:	4a74      	ldr	r2, [pc, #464]	; (8001698 <main+0x204>)
 80014c6:	601a      	str	r2, [r3, #0]
  lcd1.hw_conf.spi_cs_pin =  GPIO_PIN_2;
 80014c8:	4b72      	ldr	r3, [pc, #456]	; (8001694 <main+0x200>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	809a      	strh	r2, [r3, #4]
  lcd1.hw_conf.spi_cs_port = GPIOA;
 80014ce:	4b71      	ldr	r3, [pc, #452]	; (8001694 <main+0x200>)
 80014d0:	4a72      	ldr	r2, [pc, #456]	; (800169c <main+0x208>)
 80014d2:	609a      	str	r2, [r3, #8]
  lcd1.hw_conf.rst_pin =  GPIO_PIN_0;
 80014d4:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <main+0x200>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	819a      	strh	r2, [r3, #12]
  lcd1.hw_conf.rst_port = GPIOB;
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <main+0x200>)
 80014dc:	4a70      	ldr	r2, [pc, #448]	; (80016a0 <main+0x20c>)
 80014de:	611a      	str	r2, [r3, #16]
  lcd1.hw_conf.dc_pin =  GPIO_PIN_3;
 80014e0:	4b6c      	ldr	r3, [pc, #432]	; (8001694 <main+0x200>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	829a      	strh	r2, [r3, #20]
  lcd1.hw_conf.dc_port = GPIOA;
 80014e6:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <main+0x200>)
 80014e8:	4a6c      	ldr	r2, [pc, #432]	; (800169c <main+0x208>)
 80014ea:	619a      	str	r2, [r3, #24]
  lcd1.def_scr = lcd5110_def_scr;
 80014ec:	4b69      	ldr	r3, [pc, #420]	; (8001694 <main+0x200>)
 80014ee:	4a6d      	ldr	r2, [pc, #436]	; (80016a4 <main+0x210>)
 80014f0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80014f4:	4614      	mov	r4, r2
 80014f6:	6820      	ldr	r0, [r4, #0]
 80014f8:	6861      	ldr	r1, [r4, #4]
 80014fa:	68a2      	ldr	r2, [r4, #8]
 80014fc:	c307      	stmia	r3!, {r0, r1, r2}
 80014fe:	89a2      	ldrh	r2, [r4, #12]
 8001500:	801a      	strh	r2, [r3, #0]
  LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001502:	2303      	movs	r3, #3
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2302      	movs	r3, #2
 8001508:	2240      	movs	r2, #64	; 0x40
 800150a:	210c      	movs	r1, #12
 800150c:	4861      	ldr	r0, [pc, #388]	; (8001694 <main+0x200>)
 800150e:	f7ff fed1 	bl	80012b4 <LCD5110_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  char buffer[20];
	  Get_Time();
 8001512:	f7ff ff4b 	bl	80013ac <Get_Time>
	  sprintf(buffer, "TIME: %02d:%02d:%02d\n", time.hour, time.minutes, time.seconds);
 8001516:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <main+0x214>)
 8001518:	789b      	ldrb	r3, [r3, #2]
 800151a:	461a      	mov	r2, r3
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <main+0x214>)
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	4619      	mov	r1, r3
 8001522:	4b61      	ldr	r3, [pc, #388]	; (80016a8 <main+0x214>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	1d38      	adds	r0, r7, #4
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	460b      	mov	r3, r1
 800152c:	495f      	ldr	r1, [pc, #380]	; (80016ac <main+0x218>)
 800152e:	f008 ff9b 	bl	800a468 <siprintf>
	  LCD5110_print(buffer, BLACK, &lcd1);
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	4a57      	ldr	r2, [pc, #348]	; (8001694 <main+0x200>)
 8001536:	2101      	movs	r1, #1
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fb7a 	bl	8000c32 <LCD5110_print>
	  sprintf(buffer, "DATE: \n%02d.%02d.20%02d\n", time.dayofmonth, time.month, time.year);
 800153e:	4b5a      	ldr	r3, [pc, #360]	; (80016a8 <main+0x214>)
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	461a      	mov	r2, r3
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <main+0x214>)
 8001546:	795b      	ldrb	r3, [r3, #5]
 8001548:	4619      	mov	r1, r3
 800154a:	4b57      	ldr	r3, [pc, #348]	; (80016a8 <main+0x214>)
 800154c:	799b      	ldrb	r3, [r3, #6]
 800154e:	1d38      	adds	r0, r7, #4
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	460b      	mov	r3, r1
 8001554:	4956      	ldr	r1, [pc, #344]	; (80016b0 <main+0x21c>)
 8001556:	f008 ff87 	bl	800a468 <siprintf>
	  LCD5110_print(buffer, BLACK, &lcd1);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4a4d      	ldr	r2, [pc, #308]	; (8001694 <main+0x200>)
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fb66 	bl	8000c32 <LCD5110_print>
	  decimal_to_binary(time.seconds % 10, bin_value);
 8001566:	4b50      	ldr	r3, [pc, #320]	; (80016a8 <main+0x214>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <main+0x220>)
 800156c:	fba3 1302 	umull	r1, r3, r3, r2
 8001570:	08d9      	lsrs	r1, r3, #3
 8001572:	460b      	mov	r3, r1
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	494e      	ldr	r1, [pc, #312]	; (80016b8 <main+0x224>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff63 	bl	800144c <decimal_to_binary>
	  for (int i = 0; i < 4; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	e00e      	b.n	80015aa <main+0x116>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOD, pins_first_second[i], bin_value[i]);
 800158c:	4a4b      	ldr	r2, [pc, #300]	; (80016bc <main+0x228>)
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001594:	4a48      	ldr	r2, [pc, #288]	; (80016b8 <main+0x224>)
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	4848      	ldr	r0, [pc, #288]	; (80016c0 <main+0x22c>)
 80015a0:	f000 fd9e 	bl	80020e0 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 4; i++)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3301      	adds	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	dded      	ble.n	800158c <main+0xf8>
	  	  }
	  decimal_to_binary(time.seconds / 10, bin_value);
 80015b0:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <main+0x214>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4a3f      	ldr	r2, [pc, #252]	; (80016b4 <main+0x220>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	493e      	ldr	r1, [pc, #248]	; (80016b8 <main+0x224>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff43 	bl	800144c <decimal_to_binary>
	  for (int i = 0; i < 4; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	e00e      	b.n	80015ea <main+0x156>
		  {
			  HAL_GPIO_WritePin(GPIOE, pins_second_second[i], bin_value[i]);
 80015cc:	4a3d      	ldr	r2, [pc, #244]	; (80016c4 <main+0x230>)
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <main+0x224>)
 80015d6:	6a3b      	ldr	r3, [r7, #32]
 80015d8:	4413      	add	r3, r2
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	483a      	ldr	r0, [pc, #232]	; (80016c8 <main+0x234>)
 80015e0:	f000 fd7e 	bl	80020e0 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 4; i++)
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	3301      	adds	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	dded      	ble.n	80015cc <main+0x138>
		  }
	  decimal_to_binary(time.minutes % 10, bin_value);
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <main+0x214>)
 80015f2:	785a      	ldrb	r2, [r3, #1]
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <main+0x220>)
 80015f6:	fba3 1302 	umull	r1, r3, r3, r2
 80015fa:	08d9      	lsrs	r1, r3, #3
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	492b      	ldr	r1, [pc, #172]	; (80016b8 <main+0x224>)
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff1e 	bl	800144c <decimal_to_binary>
	  for (int i = 0; i < 4; i++)
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	e00e      	b.n	8001634 <main+0x1a0>
		  {
			  HAL_GPIO_WritePin(GPIOE, pins_first_minute[i], bin_value[i]);
 8001616:	4a2d      	ldr	r2, [pc, #180]	; (80016cc <main+0x238>)
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800161e:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <main+0x224>)
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4827      	ldr	r0, [pc, #156]	; (80016c8 <main+0x234>)
 800162a:	f000 fd59 	bl	80020e0 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 4; i++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b03      	cmp	r3, #3
 8001638:	dded      	ble.n	8001616 <main+0x182>
		  }
	  decimal_to_binary(time.minutes / 10, bin_value);
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <main+0x214>)
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <main+0x220>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	491b      	ldr	r1, [pc, #108]	; (80016b8 <main+0x224>)
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fefe 	bl	800144c <decimal_to_binary>
	  for (int i = 0; i < 4; i++)
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	e00e      	b.n	8001674 <main+0x1e0>
		  {
			  HAL_GPIO_WritePin(GPIOD, pins_second_minute[i], bin_value[i]);
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <main+0x23c>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <main+0x224>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <main+0x22c>)
 800166a:	f000 fd39 	bl	80020e0 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 4; i++)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	3301      	adds	r3, #1
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b03      	cmp	r3, #3
 8001678:	dded      	ble.n	8001656 <main+0x1c2>
		  }

	  HAL_Delay(500);
 800167a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800167e:	f000 fa75 	bl	8001b6c <HAL_Delay>
	  LCD5110_refresh(&lcd1.hw_conf);
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <main+0x200>)
 8001684:	f7ff faa6 	bl	8000bd4 <LCD5110_refresh>
	  LCD5110_clear_scr(&lcd1.hw_conf);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <main+0x200>)
 800168a:	f7ff fac1 	bl	8000c10 <LCD5110_clear_scr>

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800168e:	f008 fb4b 	bl	8009d28 <MX_USB_HOST_Process>
  {
 8001692:	e73e      	b.n	8001512 <main+0x7e>
 8001694:	200001f4 	.word	0x200001f4
 8001698:	20000420 	.word	0x20000420
 800169c:	40020000 	.word	0x40020000
 80016a0:	40020400 	.word	0x40020400
 80016a4:	0800b2a8 	.word	0x0800b2a8
 80016a8:	20000418 	.word	0x20000418
 80016ac:	0800ac70 	.word	0x0800ac70
 80016b0:	0800ac88 	.word	0x0800ac88
 80016b4:	cccccccd 	.word	0xcccccccd
 80016b8:	200001f0 	.word	0x200001f0
 80016bc:	20000018 	.word	0x20000018
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	20000010 	.word	0x20000010
 80016c8:	40021000 	.word	0x40021000
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000000 	.word	0x20000000

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f008 fee0 	bl	800a4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b27      	ldr	r3, [pc, #156]	; (800179c <SystemClock_Config+0xc8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a26      	ldr	r2, [pc, #152]	; (800179c <SystemClock_Config+0xc8>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b24      	ldr	r3, [pc, #144]	; (800179c <SystemClock_Config+0xc8>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <SystemClock_Config+0xcc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a20      	ldr	r2, [pc, #128]	; (80017a0 <SystemClock_Config+0xcc>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <SystemClock_Config+0xcc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001748:	23c0      	movs	r3, #192	; 0xc0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800174c:	2304      	movs	r3, #4
 800174e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001750:	2308      	movs	r3, #8
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4618      	mov	r0, r3
 800175a:	f004 f8e1 	bl	8005920 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001764:	f000 f83e 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2103      	movs	r1, #3
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fb43 	bl	8005e10 <HAL_RCC_ClockConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001790:	f000 f828 	bl	80017e4 <Error_Handler>
  }
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	; 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017ba:	2301      	movs	r3, #1
 80017bc:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80017be:	23c8      	movs	r3, #200	; 0xc8
 80017c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80017c2:	2305      	movs	r3, #5
 80017c4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80017c6:	2302      	movs	r3, #2
 80017c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ca:	463b      	mov	r3, r7
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fd2b 	bl	8006228 <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017d8:	f000 f804 	bl	80017e4 <Error_Handler>
  }
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_SPI1_Init+0x64>)
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <MX_SPI1_Init+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_SPI1_Init+0x64>)
 80017fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001802:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_SPI1_Init+0x64>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_SPI1_Init+0x64>)
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_SPI1_Init+0x64>)
 8001824:	2220      	movs	r2, #32
 8001826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001828:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <MX_SPI1_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_SPI1_Init+0x64>)
 8001830:	2200      	movs	r2, #0
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <MX_SPI1_Init+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_SPI1_Init+0x64>)
 800183c:	220a      	movs	r2, #10
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_SPI1_Init+0x64>)
 8001842:	f004 fe43 	bl	80064cc <HAL_SPI_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800184c:	f7ff ffca 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000420 	.word	0x20000420
 8001858:	40013000 	.word	0x40013000

0800185c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08a      	sub	sp, #40	; 0x28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 0314 	add.w	r3, r7, #20
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_SPI_MspInit+0x84>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d12b      	bne.n	80018d6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 8001888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a10      	ldr	r2, [pc, #64]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_SPI_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018b6:	23e0      	movs	r3, #224	; 0xe0
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c2:	2303      	movs	r3, #3
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018c6:	2305      	movs	r3, #5
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_SPI_MspInit+0x8c>)
 80018d2:	f000 fa81 	bl	8001dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018d6:	bf00      	nop
 80018d8:	3728      	adds	r7, #40	; 0x28
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40013000 	.word	0x40013000
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800192a:	2007      	movs	r0, #7
 800192c:	f000 fa12 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	e7fe      	b.n	8001940 <NMI_Handler+0x4>

08001942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001946:	e7fe      	b.n	8001946 <HardFault_Handler+0x4>

08001948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800194c:	e7fe      	b.n	800194c <MemManage_Handler+0x4>

0800194e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <UsageFault_Handler+0x4>

0800195a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001988:	f000 f8d0 	bl	8001b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}

08001990 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <OTG_FS_IRQHandler+0x10>)
 8001996:	f000 fe9d 	bl	80026d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000085c 	.word	0x2000085c

080019a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ac:	4a14      	ldr	r2, [pc, #80]	; (8001a00 <_sbrk+0x5c>)
 80019ae:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <_sbrk+0x60>)
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <_sbrk+0x64>)
 80019c2:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <_sbrk+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <_sbrk+0x64>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d207      	bcs.n	80019e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d4:	f008 fd80 	bl	800a4d8 <__errno>
 80019d8:	4603      	mov	r3, r0
 80019da:	220c      	movs	r2, #12
 80019dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019e2:	e009      	b.n	80019f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <_sbrk+0x64>)
 80019f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f6:	68fb      	ldr	r3, [r7, #12]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20020000 	.word	0x20020000
 8001a04:	00000400 	.word	0x00000400
 8001a08:	20000478 	.word	0x20000478
 8001a0c:	20000d88 	.word	0x20000d88

08001a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <SystemInit+0x20>)
 8001a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a1a:	4a05      	ldr	r2, [pc, #20]	; (8001a30 <SystemInit+0x20>)
 8001a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a38:	f7ff ffea 	bl	8001a10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3e:	490d      	ldr	r1, [pc, #52]	; (8001a74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a44:	e002      	b.n	8001a4c <LoopCopyDataInit>

08001a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4a:	3304      	adds	r3, #4

08001a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a50:	d3f9      	bcc.n	8001a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a54:	4c0a      	ldr	r4, [pc, #40]	; (8001a80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a58:	e001      	b.n	8001a5e <LoopFillZerobss>

08001a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a5c:	3204      	adds	r2, #4

08001a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a60:	d3fb      	bcc.n	8001a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a62:	f008 fd3f 	bl	800a4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a66:	f7ff fd15 	bl	8001494 <main>
  bx  lr    
 8001a6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a74:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001a78:	0800b414 	.word	0x0800b414
  ldr r2, =_sbss
 8001a7c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001a80:	20000d84 	.word	0x20000d84

08001a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a84:	e7fe      	b.n	8001a84 <ADC_IRQHandler>
	...

08001a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_Init+0x40>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_Init+0x40>)
 8001a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_Init+0x40>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_Init+0x40>)
 8001a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_Init+0x40>)
 8001aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f000 f94f 	bl	8001d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f000 f808 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abc:	f7ff ff16 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023c00 	.word	0x40023c00

08001acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x54>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_InitTick+0x58>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	4619      	mov	r1, r3
 8001ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f967 	bl	8001dbe <HAL_SYSTICK_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d80a      	bhi.n	8001b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b08:	f000 f92f 	bl	8001d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b0c:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_InitTick+0x5c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e000      	b.n	8001b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000020 	.word	0x20000020
 8001b24:	20000028 	.word	0x20000028
 8001b28:	20000024 	.word	0x20000024

08001b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x20>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_IncTick+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <HAL_IncTick+0x24>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000028 	.word	0x20000028
 8001b50:	2000047c 	.word	0x2000047c

08001b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return uwTick;
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <HAL_GetTick+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	2000047c 	.word	0x2000047c

08001b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b74:	f7ff ffee 	bl	8001b54 <HAL_GetTick>
 8001b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b84:	d005      	beq.n	8001b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_Delay+0x44>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b92:	bf00      	nop
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d8f7      	bhi.n	8001b94 <HAL_Delay+0x28>
  {
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000028 	.word	0x20000028

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db0b      	blt.n	8001c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	f003 021f 	and.w	r2, r3, #31
 8001c30:	4907      	ldr	r1, [pc, #28]	; (8001c50 <__NVIC_EnableIRQ+0x38>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	095b      	lsrs	r3, r3, #5
 8001c38:	2001      	movs	r0, #1
 8001c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000e100 	.word	0xe000e100

08001c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	db0a      	blt.n	8001c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <__NVIC_SetPriority+0x4c>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	0112      	lsls	r2, r2, #4
 8001c74:	b2d2      	uxtb	r2, r2
 8001c76:	440b      	add	r3, r1
 8001c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c7c:	e00a      	b.n	8001c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4908      	ldr	r1, [pc, #32]	; (8001ca4 <__NVIC_SetPriority+0x50>)
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	3b04      	subs	r3, #4
 8001c8c:	0112      	lsls	r2, r2, #4
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	761a      	strb	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000e100 	.word	0xe000e100
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f1c3 0307 	rsb	r3, r3, #7
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	bf28      	it	cs
 8001cc6:	2304      	movcs	r3, #4
 8001cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3304      	adds	r3, #4
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d902      	bls.n	8001cd8 <NVIC_EncodePriority+0x30>
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3b03      	subs	r3, #3
 8001cd6:	e000      	b.n	8001cda <NVIC_EncodePriority+0x32>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43da      	mvns	r2, r3
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	401a      	ands	r2, r3
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfa:	43d9      	mvns	r1, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	4313      	orrs	r3, r2
         );
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d20:	d301      	bcc.n	8001d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00f      	b.n	8001d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <SysTick_Config+0x40>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2e:	210f      	movs	r1, #15
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	f7ff ff8e 	bl	8001c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <SysTick_Config+0x40>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <SysTick_Config+0x40>)
 8001d40:	2207      	movs	r2, #7
 8001d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010

08001d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff29 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d7c:	f7ff ff3e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f7ff ff8e 	bl	8001ca8 <NVIC_EncodePriority>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff5d 	bl	8001c54 <__NVIC_SetPriority>
}
 8001d9a:	bf00      	nop
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff31 	bl	8001c18 <__NVIC_EnableIRQ>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffa2 	bl	8001d10 <SysTick_Config>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e159      	b.n	80020a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8148 	bne.w	80020a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d005      	beq.n	8001e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d130      	bne.n	8001e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80a2 	beq.w	80020a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	4a56      	ldr	r2, [pc, #344]	; (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6e:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <HAL_GPIO_Init+0x2e8>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7a:	4a52      	ldr	r2, [pc, #328]	; (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	3302      	adds	r3, #2
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a49      	ldr	r2, [pc, #292]	; (80020c8 <HAL_GPIO_Init+0x2f0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d019      	beq.n	8001fda <HAL_GPIO_Init+0x202>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a48      	ldr	r2, [pc, #288]	; (80020cc <HAL_GPIO_Init+0x2f4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d013      	beq.n	8001fd6 <HAL_GPIO_Init+0x1fe>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a47      	ldr	r2, [pc, #284]	; (80020d0 <HAL_GPIO_Init+0x2f8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_GPIO_Init+0x1fa>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a46      	ldr	r2, [pc, #280]	; (80020d4 <HAL_GPIO_Init+0x2fc>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <HAL_GPIO_Init+0x1f6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a45      	ldr	r2, [pc, #276]	; (80020d8 <HAL_GPIO_Init+0x300>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_GPIO_Init+0x1f2>
 8001fc6:	2304      	movs	r3, #4
 8001fc8:	e008      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x204>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	69fa      	ldr	r2, [r7, #28]
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fec:	4935      	ldr	r1, [pc, #212]	; (80020c4 <HAL_GPIO_Init+0x2ec>)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <HAL_GPIO_Init+0x304>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800201e:	4a2f      	ldr	r2, [pc, #188]	; (80020dc <HAL_GPIO_Init+0x304>)
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002024:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <HAL_GPIO_Init+0x304>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002048:	4a24      	ldr	r2, [pc, #144]	; (80020dc <HAL_GPIO_Init+0x304>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_GPIO_Init+0x304>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002072:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_GPIO_Init+0x304>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002078:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_GPIO_Init+0x304>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209c:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <HAL_GPIO_Init+0x304>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3301      	adds	r3, #1
 80020a6:	61fb      	str	r3, [r7, #28]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b0f      	cmp	r3, #15
 80020ac:	f67f aea2 	bls.w	8001df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3724      	adds	r7, #36	; 0x24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40020000 	.word	0x40020000
 80020cc:	40020400 	.word	0x40020400
 80020d0:	40020800 	.word	0x40020800
 80020d4:	40020c00 	.word	0x40020c00
 80020d8:	40021000 	.word	0x40021000
 80020dc:	40013c00 	.word	0x40013c00

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020fc:	e003      	b.n	8002106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020fe:	887b      	ldrh	r3, [r7, #2]
 8002100:	041a      	lsls	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	619a      	str	r2, [r3, #24]
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af02      	add	r7, sp, #8
 8002118:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e059      	b.n	80021d8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d106      	bne.n	8002144 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f007 fe2a 	bl	8009d98 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2203      	movs	r2, #3
 8002148:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002152:	d102      	bne.n	800215a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f004 fcd1 	bl	8006b06 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	7c1a      	ldrb	r2, [r3, #16]
 800216c:	f88d 2000 	strb.w	r2, [sp]
 8002170:	3304      	adds	r3, #4
 8002172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002174:	f004 fc52 	bl	8006a1c <USB_CoreInit>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e026      	b.n	80021d8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2101      	movs	r1, #1
 8002190:	4618      	mov	r0, r3
 8002192:	f004 fcc9 	bl	8006b28 <USB_SetCurrentMode>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e017      	b.n	80021d8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7c1a      	ldrb	r2, [r3, #16]
 80021b0:	f88d 2000 	strb.w	r2, [sp]
 80021b4:	3304      	adds	r3, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	f004 fe6c 	bl	8006e94 <USB_HostInit>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e004      	b.n	80021d8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b08b      	sub	sp, #44	; 0x2c
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	4608      	mov	r0, r1
 80021ea:	4611      	mov	r1, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	70fb      	strb	r3, [r7, #3]
 80021f2:	460b      	mov	r3, r1
 80021f4:	70bb      	strb	r3, [r7, #2]
 80021f6:	4613      	mov	r3, r2
 80021f8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80021fc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002204:	2b01      	cmp	r3, #1
 8002206:	d101      	bne.n	800220c <HAL_HCD_HC_Init+0x2c>
 8002208:	2302      	movs	r3, #2
 800220a:	e09d      	b.n	8002348 <HAL_HCD_HC_Init+0x168>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3319      	adds	r3, #25
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	3314      	adds	r3, #20
 8002238:	787a      	ldrb	r2, [r7, #1]
 800223a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	3315      	adds	r3, #21
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3326      	adds	r3, #38	; 0x26
 8002260:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002264:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	78bb      	ldrb	r3, [r7, #2]
 800226a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800226e:	b2d8      	uxtb	r0, r3
 8002270:	6879      	ldr	r1, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	1a9b      	subs	r3, r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3316      	adds	r3, #22
 800227e:	4602      	mov	r2, r0
 8002280:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fbc8 	bl	8002a1c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800228c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0a      	bge.n	80022aa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3317      	adds	r3, #23
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e009      	b.n	80022be <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3317      	adds	r3, #23
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f004 ff34 	bl	8007130 <USB_GetHostSpeed>
 80022c8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80022ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10b      	bne.n	80022ea <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_HCD_HC_Init+0x10a>
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d104      	bne.n	80022ea <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2bbc      	cmp	r3, #188	; 0xbc
 80022e4:	d901      	bls.n	80022ea <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80022e6:	23bc      	movs	r3, #188	; 0xbc
 80022e8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80022ea:	78fa      	ldrb	r2, [r7, #3]
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	1a9b      	subs	r3, r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	3318      	adds	r3, #24
 80022fa:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80022fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	b298      	uxth	r0, r3
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	3328      	adds	r3, #40	; 0x28
 8002314:	4602      	mov	r2, r0
 8002316:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	b29b      	uxth	r3, r3
 8002320:	787c      	ldrb	r4, [r7, #1]
 8002322:	78ba      	ldrb	r2, [r7, #2]
 8002324:	78f9      	ldrb	r1, [r7, #3]
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4623      	mov	r3, r4
 8002336:	f004 ff23 	bl	8007180 <USB_HC_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002366:	2b01      	cmp	r3, #1
 8002368:	d101      	bne.n	800236e <HAL_HCD_HC_Halt+0x1e>
 800236a:	2302      	movs	r3, #2
 800236c:	e00f      	b.n	800238e <HAL_HCD_HC_Halt+0x3e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fa69 	bl	8007856 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return status;
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	70fb      	strb	r3, [r7, #3]
 80023aa:	460b      	mov	r3, r1
 80023ac:	70bb      	strb	r3, [r7, #2]
 80023ae:	4613      	mov	r3, r2
 80023b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3317      	adds	r3, #23
 80023c2:	78ba      	ldrb	r2, [r7, #2]
 80023c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3326      	adds	r3, #38	; 0x26
 80023d6:	787a      	ldrb	r2, [r7, #1]
 80023d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023da:	7c3b      	ldrb	r3, [r7, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d114      	bne.n	800240a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	332a      	adds	r3, #42	; 0x2a
 80023f0:	2203      	movs	r2, #3
 80023f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	3319      	adds	r3, #25
 8002404:	7f3a      	ldrb	r2, [r7, #28]
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e009      	b.n	800241e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	332a      	adds	r3, #42	; 0x2a
 800241a:	2202      	movs	r2, #2
 800241c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	2b03      	cmp	r3, #3
 8002422:	f200 8102 	bhi.w	800262a <HAL_HCD_HC_SubmitRequest+0x292>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	0800243d 	.word	0x0800243d
 8002430:	08002615 	.word	0x08002615
 8002434:	08002501 	.word	0x08002501
 8002438:	0800258b 	.word	0x0800258b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800243c:	7c3b      	ldrb	r3, [r7, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	f040 80f5 	bne.w	800262e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002444:	78bb      	ldrb	r3, [r7, #2]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12d      	bne.n	80024a6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800244a:	8b3b      	ldrh	r3, [r7, #24]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002450:	78fa      	ldrb	r2, [r7, #3]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	333d      	adds	r3, #61	; 0x3d
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	333d      	adds	r3, #61	; 0x3d
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10a      	bne.n	8002490 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	332a      	adds	r3, #42	; 0x2a
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800248e:	e0ce      	b.n	800262e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	332a      	adds	r3, #42	; 0x2a
 80024a0:	2202      	movs	r2, #2
 80024a2:	701a      	strb	r2, [r3, #0]
      break;
 80024a4:	e0c3      	b.n	800262e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80024a6:	78fa      	ldrb	r2, [r7, #3]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	331a      	adds	r3, #26
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f040 80b8 	bne.w	800262e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80024be:	78fa      	ldrb	r2, [r7, #3]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	333c      	adds	r3, #60	; 0x3c
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	332a      	adds	r3, #42	; 0x2a
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
      break;
 80024e8:	e0a1      	b.n	800262e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	332a      	adds	r3, #42	; 0x2a
 80024fa:	2202      	movs	r2, #2
 80024fc:	701a      	strb	r2, [r3, #0]
      break;
 80024fe:	e096      	b.n	800262e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002500:	78bb      	ldrb	r3, [r7, #2]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d120      	bne.n	8002548 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	333d      	adds	r3, #61	; 0x3d
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	332a      	adds	r3, #42	; 0x2a
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002530:	e07e      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	332a      	adds	r3, #42	; 0x2a
 8002542:	2202      	movs	r2, #2
 8002544:	701a      	strb	r2, [r3, #0]
      break;
 8002546:	e073      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	333c      	adds	r3, #60	; 0x3c
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10a      	bne.n	8002574 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	332a      	adds	r3, #42	; 0x2a
 800256e:	2200      	movs	r2, #0
 8002570:	701a      	strb	r2, [r3, #0]
      break;
 8002572:	e05d      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	332a      	adds	r3, #42	; 0x2a
 8002584:	2202      	movs	r2, #2
 8002586:	701a      	strb	r2, [r3, #0]
      break;
 8002588:	e052      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800258a:	78bb      	ldrb	r3, [r7, #2]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d120      	bne.n	80025d2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	333d      	adds	r3, #61	; 0x3d
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	332a      	adds	r3, #42	; 0x2a
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025ba:	e039      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	332a      	adds	r3, #42	; 0x2a
 80025cc:	2202      	movs	r2, #2
 80025ce:	701a      	strb	r2, [r3, #0]
      break;
 80025d0:	e02e      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	333c      	adds	r3, #60	; 0x3c
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	332a      	adds	r3, #42	; 0x2a
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
      break;
 80025fc:	e018      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	332a      	adds	r3, #42	; 0x2a
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e00d      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	332a      	adds	r3, #42	; 0x2a
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
      break;
 8002628:	e002      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800262e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	332c      	adds	r3, #44	; 0x2c
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	8b39      	ldrh	r1, [r7, #24]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4403      	add	r3, r0
 8002654:	3334      	adds	r3, #52	; 0x34
 8002656:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	; 0x4c
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800266c:	78fa      	ldrb	r2, [r7, #3]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	1a9b      	subs	r3, r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	3338      	adds	r3, #56	; 0x38
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002680:	78fa      	ldrb	r2, [r7, #3]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	1a9b      	subs	r3, r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3315      	adds	r3, #21
 8002690:	78fa      	ldrb	r2, [r7, #3]
 8002692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	334d      	adds	r3, #77	; 0x4d
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3310      	adds	r3, #16
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	1d19      	adds	r1, r3, #4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	799b      	ldrb	r3, [r3, #6]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f004 fe72 	bl	80073ac <USB_HC_StartXfer>
 80026c8:	4603      	mov	r3, r0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop

080026d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 fb92 	bl	8006e14 <USB_GetMode>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 80fb 	bne.w	80028ee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f004 fb55 	bl	8006dac <USB_ReadInterrupts>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80f1 	beq.w	80028ec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fb4c 	bl	8006dac <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271e:	d104      	bne.n	800272a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fb3c 	bl	8006dac <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273e:	d104      	bne.n	800274a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fb2c 	bl	8006dac <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800275e:	d104      	bne.n	800276a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002768:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fb1c 	bl	8006dac <USB_ReadInterrupts>
 8002774:	4603      	mov	r3, r0
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b02      	cmp	r3, #2
 800277c:	d103      	bne.n	8002786 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fb0e 	bl	8006dac <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279a:	d120      	bne.n	80027de <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d113      	bne.n	80027de <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027b6:	2110      	movs	r1, #16
 80027b8:	6938      	ldr	r0, [r7, #16]
 80027ba:	f004 fa01 	bl	8006bc0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027be:	6938      	ldr	r0, [r7, #16]
 80027c0:	f004 fa30 	bl	8006c24 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7a5b      	ldrb	r3, [r3, #9]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d105      	bne.n	80027d8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fc0c 	bl	8006ff0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f007 fb5b 	bl	8009e94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fae2 	bl	8006dac <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f2:	d102      	bne.n	80027fa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 fd33 	bl	8004260 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fad4 	bl	8006dac <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b08      	cmp	r3, #8
 800280c:	d106      	bne.n	800281c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f007 fb24 	bl	8009e5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f004 fac3 	bl	8006dac <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002830:	d139      	bne.n	80028a6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f004 fffc 	bl	8007834 <USB_HC_ReadInterrupt>
 800283c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e025      	b.n	8002890 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d018      	beq.n	800288a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286e:	d106      	bne.n	800287e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f905 	bl	8002a86 <HCD_HC_IN_IRQHandler>
 800287c:	e005      	b.n	800288a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	4619      	mov	r1, r3
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 ff67 	bl	8003758 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	3301      	adds	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	795b      	ldrb	r3, [r3, #5]
 8002894:	461a      	mov	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	4293      	cmp	r3, r2
 800289a:	d3d3      	bcc.n	8002844 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f004 fa7e 	bl	8006dac <USB_ReadInterrupts>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d101      	bne.n	80028be <HAL_HCD_IRQHandler+0x1ea>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_HCD_IRQHandler+0x1ec>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d014      	beq.n	80028ee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0210 	bic.w	r2, r2, #16
 80028d2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 fbe4 	bl	80040a2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	619a      	str	r2, [r3, #24]
 80028ea:	e000      	b.n	80028ee <HAL_HCD_IRQHandler+0x21a>
      return;
 80028ec:	bf00      	nop
    }
  }
}
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_HCD_Start+0x16>
 8002906:	2302      	movs	r3, #2
 8002908:	e013      	b.n	8002932 <HAL_HCD_Start+0x3e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2101      	movs	r1, #1
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fbd0 	bl	80070be <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f004 f8de 	bl	8006ae4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_HCD_Stop+0x16>
 800294c:	2302      	movs	r3, #2
 800294e:	e00d      	b.n	800296c <HAL_HCD_Stop+0x32>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f005 f89a 	bl	8007a96 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f004 fb72 	bl	800706a <USB_ResetPort>
 8002986:	4603      	mov	r3, r0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	334c      	adds	r3, #76	; 0x4c
 80029ac:	781b      	ldrb	r3, [r3, #0]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fbb4 	bl	800715e <USB_GetCurrentFrame>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fb8f 	bl	8007130 <USB_GetHostSpeed>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	331a      	adds	r3, #26
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	331b      	adds	r3, #27
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3325      	adds	r3, #37	; 0x25
 8002a60:	2200      	movs	r2, #0
 8002a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3324      	adds	r3, #36	; 0x24
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f004 f994 	bl	8006dd2 <USB_ReadChInterrupts>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11a      	bne.n	8002aea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	015a      	lsls	r2, r3, #5
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4413      	add	r3, r2
 8002abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	334d      	adds	r3, #77	; 0x4d
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 feb7 	bl	8007856 <USB_HC_Halt>
 8002ae8:	e09e      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f96d 	bl	8006dd2 <USB_ReadChInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b02:	d11b      	bne.n	8002b3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	461a      	mov	r2, r3
 8002b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334d      	adds	r3, #77	; 0x4d
 8002b28:	2208      	movs	r2, #8
 8002b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fe8e 	bl	8007856 <USB_HC_Halt>
 8002b3a:	e075      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f004 f944 	bl	8006dd2 <USB_ReadChInterrupts>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d11a      	bne.n	8002b8a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b60:	461a      	mov	r2, r3
 8002b62:	2308      	movs	r3, #8
 8002b64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	334d      	adds	r3, #77	; 0x4d
 8002b76:	2206      	movs	r2, #6
 8002b78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 fe67 	bl	8007856 <USB_HC_Halt>
 8002b88:	e04e      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 f91d 	bl	8006dd2 <USB_ReadChInterrupts>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba2:	d11b      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ba4:	78fb      	ldrb	r3, [r7, #3]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334d      	adds	r3, #77	; 0x4d
 8002bc8:	2209      	movs	r2, #9
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fe3e 	bl	8007856 <USB_HC_Halt>
 8002bda:	e025      	b.n	8002c28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f004 f8f4 	bl	8006dd2 <USB_ReadChInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b80      	cmp	r3, #128	; 0x80
 8002bf2:	d119      	bne.n	8002c28 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334d      	adds	r3, #77	; 0x4d
 8002c16:	2207      	movs	r2, #7
 8002c18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f004 fe17 	bl	8007856 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	78fa      	ldrb	r2, [r7, #3]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f004 f8ce 	bl	8006dd2 <USB_ReadChInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d112      	bne.n	8002c68 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fe03 	bl	8007856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c62:	6093      	str	r3, [r2, #8]
 8002c64:	f000 bd75 	b.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	4611      	mov	r1, r2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f004 f8ae 	bl	8006dd2 <USB_ReadChInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 8128 	bne.w	8002ed2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2320      	movs	r3, #32
 8002c92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	331b      	adds	r3, #27
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d119      	bne.n	8002cde <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	331b      	adds	r3, #27
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	0151      	lsls	r1, r2, #5
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	440a      	add	r2, r1
 8002cd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	799b      	ldrb	r3, [r3, #6]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d01b      	beq.n	8002d1e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3330      	adds	r3, #48	; 0x30
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	1ac9      	subs	r1, r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4403      	add	r3, r0
 8002d1a:	3338      	adds	r3, #56	; 0x38
 8002d1c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	334d      	adds	r3, #77	; 0x4d
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3344      	adds	r3, #68	; 0x44
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	2301      	movs	r3, #1
 8002d56:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3326      	adds	r3, #38	; 0x26
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3326      	adds	r3, #38	; 0x26
 8002d7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d110      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 fd62 	bl	8007856 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2310      	movs	r3, #16
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e03d      	b.n	8002e22 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3326      	adds	r3, #38	; 0x26
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d00a      	beq.n	8002dd2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3326      	adds	r3, #38	; 0x26
 8002dcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d127      	bne.n	8002e22 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	0151      	lsls	r1, r2, #5
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	440a      	add	r2, r1
 8002de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002df0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	334c      	adds	r3, #76	; 0x4c
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	334c      	adds	r3, #76	; 0x4c
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f007 f847 	bl	8009eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	799b      	ldrb	r3, [r3, #6]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d13b      	bne.n	8002ea2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	1a9b      	subs	r3, r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	3338      	adds	r3, #56	; 0x38
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4403      	add	r3, r0
 8002e4a:	3328      	adds	r3, #40	; 0x28
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	440b      	add	r3, r1
 8002e50:	1e59      	subs	r1, r3, #1
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4403      	add	r3, r0
 8002e60:	3328      	adds	r3, #40	; 0x28
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8470 	beq.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	333c      	adds	r3, #60	; 0x3c
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	333c      	adds	r3, #60	; 0x3c
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	f000 bc58 	b.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	333c      	adds	r3, #60	; 0x3c
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2d8      	uxtb	r0, r3
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	333c      	adds	r3, #60	; 0x3c
 8002eca:	4602      	mov	r2, r0
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	f000 bc40 	b.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 ff79 	bl	8006dd2 <USB_ReadChInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d131      	bne.n	8002f4e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2320      	movs	r3, #32
 8002efa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331a      	adds	r3, #26
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 841f 	bne.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	331b      	adds	r3, #27
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334d      	adds	r3, #77	; 0x4d
 8002f38:	2203      	movs	r2, #3
 8002f3a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 fc86 	bl	8007856 <USB_HC_Halt>
 8002f4a:	f000 bc02 	b.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4611      	mov	r1, r2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 ff3b 	bl	8006dd2 <USB_ReadChInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	f040 8305 	bne.w	8003572 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	2302      	movs	r3, #2
 8002f78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	334d      	adds	r3, #77	; 0x4d
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d114      	bne.n	8002fba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334d      	adds	r3, #77	; 0x4d
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	; 0x4c
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
 8002fb8:	e2cc      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334d      	adds	r3, #77	; 0x4d
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b06      	cmp	r3, #6
 8002fce:	d114      	bne.n	8002ffa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fd0:	78fa      	ldrb	r2, [r7, #3]
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	334d      	adds	r3, #77	; 0x4d
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002fe4:	78fa      	ldrb	r2, [r7, #3]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	1a9b      	subs	r3, r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	; 0x4c
 8002ff4:	2205      	movs	r2, #5
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e2ac      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	334d      	adds	r3, #77	; 0x4d
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b07      	cmp	r3, #7
 800300e:	d00b      	beq.n	8003028 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334d      	adds	r3, #77	; 0x4d
 8003020:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003022:	2b09      	cmp	r3, #9
 8003024:	f040 80a6 	bne.w	8003174 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334d      	adds	r3, #77	; 0x4d
 8003038:	2202      	movs	r2, #2
 800303a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	3344      	adds	r3, #68	; 0x44
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1c59      	adds	r1, r3, #1
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4403      	add	r3, r0
 800305c:	3344      	adds	r3, #68	; 0x44
 800305e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3344      	adds	r3, #68	; 0x44
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d943      	bls.n	80030fe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3344      	adds	r3, #68	; 0x44
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	331a      	adds	r3, #26
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d123      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	331b      	adds	r3, #27
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	331c      	adds	r3, #28
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030c8:	78fb      	ldrb	r3, [r7, #3]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334c      	adds	r3, #76	; 0x4c
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030fc:	e229      	b.n	8003552 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334c      	adds	r3, #76	; 0x4c
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3326      	adds	r3, #38	; 0x26
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00b      	beq.n	8003140 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3326      	adds	r3, #38	; 0x26
 8003138:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800313a:	2b02      	cmp	r3, #2
 800313c:	f040 8209 	bne.w	8003552 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003156:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800315e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316c:	461a      	mov	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003172:	e1ee      	b.n	8003552 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003174:	78fa      	ldrb	r2, [r7, #3]
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	4613      	mov	r3, r2
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	334d      	adds	r3, #77	; 0x4d
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b05      	cmp	r3, #5
 8003188:	f040 80c8 	bne.w	800331c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334d      	adds	r3, #77	; 0x4d
 800319c:	2202      	movs	r2, #2
 800319e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	331b      	adds	r3, #27
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f040 81ce 	bne.w	8003554 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	; 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d16b      	bne.n	80032a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3348      	adds	r3, #72	; 0x48
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1c59      	adds	r1, r3, #1
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4403      	add	r3, r0
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3348      	adds	r3, #72	; 0x48
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d943      	bls.n	8003290 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3348      	adds	r3, #72	; 0x48
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	331b      	adds	r3, #27
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3344      	adds	r3, #68	; 0x44
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d809      	bhi.n	800325a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	331c      	adds	r3, #28
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	0151      	lsls	r1, r2, #5
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	440a      	add	r2, r1
 8003270:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003278:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	334c      	adds	r3, #76	; 0x4c
 800328a:	2204      	movs	r2, #4
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e014      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334c      	adds	r3, #76	; 0x4c
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e009      	b.n	80032ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	334c      	adds	r3, #76	; 0x4c
 80032b6:	2202      	movs	r2, #2
 80032b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	3326      	adds	r3, #38	; 0x26
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	3326      	adds	r3, #38	; 0x26
 80032e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	f040 8136 	bne.w	8003554 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003306:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	461a      	mov	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e11b      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	334d      	adds	r3, #77	; 0x4d
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b03      	cmp	r3, #3
 8003330:	f040 8081 	bne.w	8003436 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334d      	adds	r3, #77	; 0x4d
 8003344:	2202      	movs	r2, #2
 8003346:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	331b      	adds	r3, #27
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	f040 80fa 	bne.w	8003554 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	334c      	adds	r3, #76	; 0x4c
 8003370:	2202      	movs	r2, #2
 8003372:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	0151      	lsls	r1, r2, #5
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	440a      	add	r2, r1
 800338a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80033b4:	78fb      	ldrb	r3, [r7, #3]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	0151      	lsls	r1, r2, #5
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	440a      	add	r2, r1
 80033ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033ce:	f023 0320 	bic.w	r3, r3, #32
 80033d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3326      	adds	r3, #38	; 0x26
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3326      	adds	r3, #38	; 0x26
 80033fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	f040 80a9 	bne.w	8003554 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003418:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003420:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	e08e      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	334d      	adds	r3, #77	; 0x4d
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d143      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800344c:	78fa      	ldrb	r2, [r7, #3]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	334d      	adds	r3, #77	; 0x4d
 800345c:	2202      	movs	r2, #2
 800345e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334c      	adds	r3, #76	; 0x4c
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3326      	adds	r3, #38	; 0x26
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3326      	adds	r3, #38	; 0x26
 800349a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800349c:	2b02      	cmp	r3, #2
 800349e:	d159      	bne.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	461a      	mov	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e03f      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	; 0x4d
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d126      	bne.n	8003538 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334d      	adds	r3, #77	; 0x4d
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3344      	adds	r3, #68	; 0x44
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	1c59      	adds	r1, r3, #1
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	3344      	adds	r3, #68	; 0x44
 8003520:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	334c      	adds	r3, #76	; 0x4c
 8003532:	2204      	movs	r2, #4
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e00d      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334d      	adds	r3, #77	; 0x4d
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b02      	cmp	r3, #2
 800354c:	f000 8100 	beq.w	8003750 <HCD_HC_IN_IRQHandler+0xcca>
 8003550:	e000      	b.n	8003554 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003552:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334c      	adds	r3, #76	; 0x4c
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	78fb      	ldrb	r3, [r7, #3]
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f006 fca0 	bl	8009eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003570:	e0ef      	b.n	8003752 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f003 fc29 	bl	8006dd2 <USB_ReadChInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d12f      	bne.n	80035ea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2340      	movs	r3, #64	; 0x40
 800359a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	1a9b      	subs	r3, r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	334d      	adds	r3, #77	; 0x4d
 80035ac:	2205      	movs	r2, #5
 80035ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	331a      	adds	r3, #26
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	3344      	adds	r3, #68	; 0x44
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f004 f937 	bl	8007856 <USB_HC_Halt>
 80035e8:	e0b3      	b.n	8003752 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fbed 	bl	8006dd2 <USB_ReadChInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	f040 80a7 	bne.w	8003752 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3326      	adds	r3, #38	; 0x26
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d11b      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3344      	adds	r3, #68	; 0x44
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	; 0x4d
 800363e:	2204      	movs	r2, #4
 8003640:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f004 f903 	bl	8007856 <USB_HC_Halt>
 8003650:	e03f      	b.n	80036d2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3326      	adds	r3, #38	; 0x26
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3326      	adds	r3, #38	; 0x26
 8003678:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800367a:	2b02      	cmp	r3, #2
 800367c:	d129      	bne.n	80036d2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3344      	adds	r3, #68	; 0x44
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	799b      	ldrb	r3, [r3, #6]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HCD_HC_IN_IRQHandler+0xc2a>
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331b      	adds	r3, #27
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d110      	bne.n	80036d2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80036b0:	78fa      	ldrb	r2, [r7, #3]
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	440b      	add	r3, r1
 80036be:	334d      	adds	r3, #77	; 0x4d
 80036c0:	2204      	movs	r2, #4
 80036c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f004 f8c2 	bl	8007856 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	331b      	adds	r3, #27
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d129      	bne.n	800373c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	331b      	adds	r3, #27
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	440a      	add	r2, r1
 8003712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	440a      	add	r2, r1
 8003732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2310      	movs	r3, #16
 800374c:	6093      	str	r3, [r2, #8]
 800374e:	e000      	b.n	8003752 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003750:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f003 fb2b 	bl	8006dd2 <USB_ReadChInterrupts>
 800377c:	4603      	mov	r3, r0
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b04      	cmp	r3, #4
 8003784:	d11b      	bne.n	80037be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003786:	78fb      	ldrb	r3, [r7, #3]
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4413      	add	r3, r2
 800378e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003792:	461a      	mov	r2, r3
 8003794:	2304      	movs	r3, #4
 8003796:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	334d      	adds	r3, #77	; 0x4d
 80037a8:	2207      	movs	r2, #7
 80037aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 f84e 	bl	8007856 <USB_HC_Halt>
 80037ba:	f000 bc6f 	b.w	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fb03 	bl	8006dd2 <USB_ReadChInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	f040 8082 	bne.w	80038dc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2320      	movs	r3, #32
 80037e8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	3319      	adds	r3, #25
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d124      	bne.n	800384a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3319      	adds	r3, #25
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	334c      	adds	r3, #76	; 0x4c
 8003824:	2202      	movs	r2, #2
 8003826:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334d      	adds	r3, #77	; 0x4d
 8003838:	2203      	movs	r2, #3
 800383a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f004 f806 	bl	8007856 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	331a      	adds	r3, #26
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	f040 841d 	bne.w	800409c <HCD_HC_OUT_IRQHandler+0x944>
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	331b      	adds	r3, #27
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f040 8411 	bne.w	800409c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3326      	adds	r3, #38	; 0x26
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d009      	beq.n	80038a4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	331b      	adds	r3, #27
 80038a0:	2201      	movs	r2, #1
 80038a2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80038a4:	78fa      	ldrb	r2, [r7, #3]
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	1a9b      	subs	r3, r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	334d      	adds	r3, #77	; 0x4d
 80038b4:	2203      	movs	r2, #3
 80038b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 ffc8 	bl	8007856 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	3344      	adds	r3, #68	; 0x44
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e3df      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f003 fa74 	bl	8006dd2 <USB_ReadChInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f4:	d111      	bne.n	800391a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003908:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f003 ff9f 	bl	8007856 <USB_HC_Halt>
 8003918:	e3c0      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	4611      	mov	r1, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f003 fa55 	bl	8006dd2 <USB_ReadChInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d168      	bne.n	8003a04 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3344      	adds	r3, #68	; 0x44
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f003 fa3f 	bl	8006dd2 <USB_ReadChInterrupts>
 8003954:	4603      	mov	r3, r0
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d112      	bne.n	8003984 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3319      	adds	r3, #25
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	331b      	adds	r3, #27
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d019      	beq.n	80039ce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	4613      	mov	r3, r2
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	331b      	adds	r3, #27
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	2301      	movs	r3, #1
 80039de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334d      	adds	r3, #77	; 0x4d
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	78fa      	ldrb	r2, [r7, #3]
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 ff2a 	bl	8007856 <USB_HC_Halt>
 8003a02:	e34b      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 f9e0 	bl	8006dd2 <USB_ReadChInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b40      	cmp	r3, #64	; 0x40
 8003a1a:	d139      	bne.n	8003a90 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	334d      	adds	r3, #77	; 0x4d
 8003a2c:	2205      	movs	r2, #5
 8003a2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	331a      	adds	r3, #26
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3319      	adds	r3, #25
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3344      	adds	r3, #68	; 0x44
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 feed 	bl	8007856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2340      	movs	r3, #64	; 0x40
 8003a8c:	6093      	str	r3, [r2, #8]
 8003a8e:	e305      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f003 f99a 	bl	8006dd2 <USB_ReadChInterrupts>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d11a      	bne.n	8003ade <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	334d      	adds	r3, #77	; 0x4d
 8003aca:	2206      	movs	r2, #6
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f003 febd 	bl	8007856 <USB_HC_Halt>
 8003adc:	e2de      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f973 	bl	8006dd2 <USB_ReadChInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d144      	bne.n	8003b80 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3344      	adds	r3, #68	; 0x44
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334d      	adds	r3, #77	; 0x4d
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3319      	adds	r3, #25
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d114      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3318      	adds	r3, #24
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3319      	adds	r3, #25
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 fe75 	bl	8007856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2310      	movs	r3, #16
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	e28d      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 f922 	bl	8006dd2 <USB_ReadChInterrupts>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d169      	bne.n	8003c6c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	799b      	ldrb	r3, [r3, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d111      	bne.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	1a9b      	subs	r3, r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	440b      	add	r3, r1
 8003bae:	334d      	adds	r3, #77	; 0x4d
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	4611      	mov	r1, r2
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fe4a 	bl	8007856 <USB_HC_Halt>
 8003bc2:	e049      	b.n	8003c58 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	3344      	adds	r3, #68	; 0x44
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	1c59      	adds	r1, r3, #1
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4403      	add	r3, r0
 8003be4:	3344      	adds	r3, #68	; 0x44
 8003be6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3344      	adds	r3, #68	; 0x44
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d922      	bls.n	8003c44 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3344      	adds	r3, #68	; 0x44
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	334c      	adds	r3, #76	; 0x4c
 8003c22:	2204      	movs	r2, #4
 8003c24:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334c      	adds	r3, #76	; 0x4c
 8003c36:	781a      	ldrb	r2, [r3, #0]
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f006 f937 	bl	8009eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c42:	e009      	b.n	8003c58 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	334c      	adds	r3, #76	; 0x4c
 8003c54:	2202      	movs	r2, #2
 8003c56:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	6093      	str	r3, [r2, #8]
 8003c6a:	e217      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f003 f8ac 	bl	8006dd2 <USB_ReadChInterrupts>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c84:	d11b      	bne.n	8003cbe <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	334d      	adds	r3, #77	; 0x4d
 8003c96:	2209      	movs	r2, #9
 8003c98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f003 fdd7 	bl	8007856 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cba:	6093      	str	r3, [r2, #8]
 8003cbc:	e1ee      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 f883 	bl	8006dd2 <USB_ReadChInterrupts>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	f040 81df 	bne.w	8004096 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	334d      	adds	r3, #77	; 0x4d
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f040 8093 	bne.w	8003e28 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	; 0x4d
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	334c      	adds	r3, #76	; 0x4c
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3326      	adds	r3, #38	; 0x26
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d00b      	beq.n	8003d58 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3326      	adds	r3, #38	; 0x26
 8003d50:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	f040 8190 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	799b      	ldrb	r3, [r3, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d115      	bne.n	8003d8c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	333d      	adds	r3, #61	; 0x3d
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	f083 0301 	eor.w	r3, r3, #1
 8003d78:	b2d8      	uxtb	r0, r3
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	333d      	adds	r3, #61	; 0x3d
 8003d88:	4602      	mov	r2, r0
 8003d8a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	799b      	ldrb	r3, [r3, #6]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f040 8171 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3334      	adds	r3, #52	; 0x34
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 8165 	beq.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	3334      	adds	r3, #52	; 0x34
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4403      	add	r3, r0
 8003dce:	3328      	adds	r3, #40	; 0x28
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	440b      	add	r3, r1
 8003dd4:	1e59      	subs	r1, r3, #1
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4403      	add	r3, r0
 8003de4:	3328      	adds	r3, #40	; 0x28
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dec:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 813f 	beq.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	333d      	adds	r3, #61	; 0x3d
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	f083 0301 	eor.w	r3, r3, #1
 8003e12:	b2d8      	uxtb	r0, r3
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	333d      	adds	r3, #61	; 0x3d
 8003e22:	4602      	mov	r2, r0
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e127      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334d      	adds	r3, #77	; 0x4d
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d120      	bne.n	8003e80 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	334d      	adds	r3, #77	; 0x4d
 8003e4e:	2202      	movs	r2, #2
 8003e50:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	331b      	adds	r3, #27
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 8107 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	334c      	adds	r3, #76	; 0x4c
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	701a      	strb	r2, [r3, #0]
 8003e7e:	e0fb      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	334d      	adds	r3, #77	; 0x4d
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d13a      	bne.n	8003f0c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	334d      	adds	r3, #77	; 0x4d
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	334c      	adds	r3, #76	; 0x4c
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	331b      	adds	r3, #27
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	f040 80d1 	bne.w	8004078 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	331b      	adds	r3, #27
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	0151      	lsls	r1, r2, #5
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	440a      	add	r2, r1
 8003f00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f08:	6053      	str	r3, [r2, #4]
 8003f0a:	e0b5      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334d      	adds	r3, #77	; 0x4d
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d114      	bne.n	8003f4c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	334d      	adds	r3, #77	; 0x4d
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	334c      	adds	r3, #76	; 0x4c
 8003f46:	2202      	movs	r2, #2
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e095      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	334d      	adds	r3, #77	; 0x4d
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d114      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334d      	adds	r3, #77	; 0x4d
 8003f72:	2202      	movs	r2, #2
 8003f74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334c      	adds	r3, #76	; 0x4c
 8003f86:	2205      	movs	r2, #5
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e075      	b.n	8004078 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334d      	adds	r3, #77	; 0x4d
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b07      	cmp	r3, #7
 8003fa0:	d00a      	beq.n	8003fb8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	334d      	adds	r3, #77	; 0x4d
 8003fb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	d170      	bne.n	800409a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334d      	adds	r3, #77	; 0x4d
 8003fc8:	2202      	movs	r2, #2
 8003fca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3344      	adds	r3, #68	; 0x44
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4403      	add	r3, r0
 8003fec:	3344      	adds	r3, #68	; 0x44
 8003fee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3344      	adds	r3, #68	; 0x44
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d914      	bls.n	8004030 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3344      	adds	r3, #68	; 0x44
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	334c      	adds	r3, #76	; 0x4c
 800402a:	2204      	movs	r2, #4
 800402c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800402e:	e022      	b.n	8004076 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	334c      	adds	r3, #76	; 0x4c
 8004040:	2202      	movs	r2, #2
 8004042:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	4413      	add	r3, r2
 800404c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800405a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004062:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004076:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334c      	adds	r3, #76	; 0x4c
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f005 ff0e 	bl	8009eb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004094:	e002      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800409a:	bf00      	nop
  }
}
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b08a      	sub	sp, #40	; 0x28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	0c5b      	lsrs	r3, r3, #17
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d004      	beq.n	80040e8 <HCD_RXQLVL_IRQHandler+0x46>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2b05      	cmp	r3, #5
 80040e2:	f000 80b6 	beq.w	8004252 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040e6:	e0b7      	b.n	8004258 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80b3 	beq.w	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	332c      	adds	r3, #44	; 0x2c
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80a7 	beq.w	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	3338      	adds	r3, #56	; 0x38
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	18d1      	adds	r1, r2, r3
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4613      	mov	r3, r2
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	1a9b      	subs	r3, r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	3334      	adds	r3, #52	; 0x34
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4299      	cmp	r1, r3
 8004132:	f200 8083 	bhi.w	800423c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	332c      	adds	r3, #44	; 0x2c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	b292      	uxth	r2, r2
 8004150:	4619      	mov	r1, r3
 8004152:	f002 fdd3 	bl	8006cfc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	332c      	adds	r3, #44	; 0x2c
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	18d1      	adds	r1, r2, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4403      	add	r3, r0
 800417a:	332c      	adds	r3, #44	; 0x2c
 800417c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3338      	adds	r3, #56	; 0x38
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	18d1      	adds	r1, r2, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4403      	add	r3, r0
 80041a2:	3338      	adds	r3, #56	; 0x38
 80041a4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	6a3b      	ldr	r3, [r7, #32]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	0cdb      	lsrs	r3, r3, #19
 80041b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ba:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	3328      	adds	r3, #40	; 0x28
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d13f      	bne.n	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03c      	beq.n	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041f2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	333c      	adds	r3, #60	; 0x3c
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f083 0301 	eor.w	r3, r3, #1
 8004224:	b2d8      	uxtb	r0, r3
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	333c      	adds	r3, #60	; 0x3c
 8004236:	4602      	mov	r2, r0
 8004238:	701a      	strb	r2, [r3, #0]
      break;
 800423a:	e00c      	b.n	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	334c      	adds	r3, #76	; 0x4c
 800424c:	2204      	movs	r2, #4
 800424e:	701a      	strb	r2, [r3, #0]
      break;
 8004250:	e001      	b.n	8004256 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004256:	bf00      	nop
  }
}
 8004258:	bf00      	nop
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800428c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b02      	cmp	r3, #2
 8004296:	d10b      	bne.n	80042b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d102      	bne.n	80042a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f005 fde8 	bl	8009e78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f043 0302 	orr.w	r3, r3, #2
 80042ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d132      	bne.n	8004320 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d126      	bne.n	800431a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7a5b      	ldrb	r3, [r3, #9]
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d113      	bne.n	80042fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80042da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042de:	d106      	bne.n	80042ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 fe82 	bl	8006ff0 <USB_InitFSLSPClkSel>
 80042ec:	e011      	b.n	8004312 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2101      	movs	r1, #1
 80042f4:	4618      	mov	r0, r3
 80042f6:	f002 fe7b 	bl	8006ff0 <USB_InitFSLSPClkSel>
 80042fa:	e00a      	b.n	8004312 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	79db      	ldrb	r3, [r3, #7]
 8004300:	2b01      	cmp	r3, #1
 8004302:	d106      	bne.n	8004312 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800430a:	461a      	mov	r2, r3
 800430c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004310:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f005 fdda 	bl	8009ecc <HAL_HCD_PortEnabled_Callback>
 8004318:	e002      	b.n	8004320 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f005 fde4 	bl	8009ee8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b20      	cmp	r3, #32
 8004328:	d103      	bne.n	8004332 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f043 0320 	orr.w	r3, r3, #32
 8004330:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e12b      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc fa64 	bl	800083c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 0201 	bic.w	r2, r2, #1
 800438a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043ac:	f001 ff28 	bl	8006200 <HAL_RCC_GetPCLK1Freq>
 80043b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4a81      	ldr	r2, [pc, #516]	; (80045bc <HAL_I2C_Init+0x274>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d807      	bhi.n	80043cc <HAL_I2C_Init+0x84>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_I2C_Init+0x278>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf94      	ite	ls
 80043c4:	2301      	movls	r3, #1
 80043c6:	2300      	movhi	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e006      	b.n	80043da <HAL_I2C_Init+0x92>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a7d      	ldr	r2, [pc, #500]	; (80045c4 <HAL_I2C_Init+0x27c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bf94      	ite	ls
 80043d4:	2301      	movls	r3, #1
 80043d6:	2300      	movhi	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0e7      	b.n	80045b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	4a78      	ldr	r2, [pc, #480]	; (80045c8 <HAL_I2C_Init+0x280>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	0c9b      	lsrs	r3, r3, #18
 80043ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a6a      	ldr	r2, [pc, #424]	; (80045bc <HAL_I2C_Init+0x274>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d802      	bhi.n	800441c <HAL_I2C_Init+0xd4>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	3301      	adds	r3, #1
 800441a:	e009      	b.n	8004430 <HAL_I2C_Init+0xe8>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	4a69      	ldr	r2, [pc, #420]	; (80045cc <HAL_I2C_Init+0x284>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	3301      	adds	r3, #1
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	495c      	ldr	r1, [pc, #368]	; (80045bc <HAL_I2C_Init+0x274>)
 800444c:	428b      	cmp	r3, r1
 800444e:	d819      	bhi.n	8004484 <HAL_I2C_Init+0x13c>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	1e59      	subs	r1, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb1 f3f3 	udiv	r3, r1, r3
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004464:	400b      	ands	r3, r1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_I2C_Init+0x138>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1e59      	subs	r1, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fbb1 f3f3 	udiv	r3, r1, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	e051      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004480:	2304      	movs	r3, #4
 8004482:	e04f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d111      	bne.n	80044b0 <HAL_I2C_Init+0x168>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1e58      	subs	r0, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	e012      	b.n	80044d6 <HAL_I2C_Init+0x18e>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1e58      	subs	r0, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6859      	ldr	r1, [r3, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	0099      	lsls	r1, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c6:	3301      	adds	r3, #1
 80044c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_I2C_Init+0x196>
 80044da:	2301      	movs	r3, #1
 80044dc:	e022      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <HAL_I2C_Init+0x1bc>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e58      	subs	r0, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6859      	ldr	r1, [r3, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	440b      	add	r3, r1
 80044f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004502:	e00f      	b.n	8004524 <HAL_I2C_Init+0x1dc>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	1e58      	subs	r0, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6859      	ldr	r1, [r3, #4]
 800450c:	460b      	mov	r3, r1
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	0099      	lsls	r1, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	6809      	ldr	r1, [r1, #0]
 8004528:	4313      	orrs	r3, r2
 800452a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69da      	ldr	r2, [r3, #28]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6911      	ldr	r1, [r2, #16]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	68d2      	ldr	r2, [r2, #12]
 800455e:	4311      	orrs	r1, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	000186a0 	.word	0x000186a0
 80045c0:	001e847f 	.word	0x001e847f
 80045c4:	003d08ff 	.word	0x003d08ff
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	10624dd3 	.word	0x10624dd3

080045d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	; 0x30
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	817b      	strh	r3, [r7, #10]
 80045e2:	460b      	mov	r3, r1
 80045e4:	813b      	strh	r3, [r7, #8]
 80045e6:	4613      	mov	r3, r2
 80045e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ea:	f7fd fab3 	bl	8001b54 <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	f040 8214 	bne.w	8004a26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	2319      	movs	r3, #25
 8004604:	2201      	movs	r2, #1
 8004606:	497b      	ldr	r1, [pc, #492]	; (80047f4 <HAL_I2C_Mem_Read+0x224>)
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fafb 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
 8004616:	e207      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_I2C_Mem_Read+0x56>
 8004622:	2302      	movs	r3, #2
 8004624:	e200      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2222      	movs	r2, #34	; 0x22
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2240      	movs	r2, #64	; 0x40
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a5b      	ldr	r2, [pc, #364]	; (80047f8 <HAL_I2C_Mem_Read+0x228>)
 800468c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800468e:	88f8      	ldrh	r0, [r7, #6]
 8004690:	893a      	ldrh	r2, [r7, #8]
 8004692:	8979      	ldrh	r1, [r7, #10]
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4603      	mov	r3, r0
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9c8 	bl	8004a34 <I2C_RequestMemoryRead>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e1bc      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d113      	bne.n	80046de <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b6:	2300      	movs	r3, #0
 80046b8:	623b      	str	r3, [r7, #32]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e190      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d11b      	bne.n	800471e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	61fb      	str	r3, [r7, #28]
 800470a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	e170      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004722:	2b02      	cmp	r3, #2
 8004724:	d11b      	bne.n	800475e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004734:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	e150      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004774:	e144      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	2b03      	cmp	r3, #3
 800477c:	f200 80f1 	bhi.w	8004962 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004784:	2b01      	cmp	r3, #1
 8004786:	d123      	bne.n	80047d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fb9b 	bl	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e145      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047ce:	e117      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d14e      	bne.n	8004876 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	2200      	movs	r2, #0
 80047e0:	4906      	ldr	r1, [pc, #24]	; (80047fc <HAL_I2C_Mem_Read+0x22c>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fa0e 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e11a      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
 80047f2:	bf00      	nop
 80047f4:	00100002 	.word	0x00100002
 80047f8:	ffff0000 	.word	0xffff0000
 80047fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	1c5a      	adds	r2, r3, #1
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004874:	e0c4      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	2200      	movs	r2, #0
 800487e:	496c      	ldr	r1, [pc, #432]	; (8004a30 <HAL_I2C_Mem_Read+0x460>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f9bf 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0cb      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d8:	2200      	movs	r2, #0
 80048da:	4955      	ldr	r1, [pc, #340]	; (8004a30 <HAL_I2C_Mem_Read+0x460>)
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f991 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09d      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004960:	e04e      	b.n	8004a00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 faae 	bl	8004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e058      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d124      	bne.n	8004a00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d107      	bne.n	80049ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f47f aeb6 	bne.w	8004776 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3728      	adds	r7, #40	; 0x28
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	00010004 	.word	0x00010004

08004a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f8c2 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00d      	beq.n	8004aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a94:	d103      	bne.n	8004a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0aa      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004aa2:	897b      	ldrh	r3, [r7, #10]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	6a3a      	ldr	r2, [r7, #32]
 8004ab6:	4952      	ldr	r1, [pc, #328]	; (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f91d 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e097      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae0:	6a39      	ldr	r1, [r7, #32]
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 f9a8 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e076      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b0a:	88fb      	ldrh	r3, [r7, #6]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b10:	893b      	ldrh	r3, [r7, #8]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]
 8004b1a:	e021      	b.n	8004b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b1c:	893b      	ldrh	r3, [r7, #8]
 8004b1e:	0a1b      	lsrs	r3, r3, #8
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2c:	6a39      	ldr	r1, [r7, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f000 f982 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00d      	beq.n	8004b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d107      	bne.n	8004b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e050      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b56:	893b      	ldrh	r3, [r7, #8]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	6a39      	ldr	r1, [r7, #32]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f967 	bl	8004e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d107      	bne.n	8004b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e035      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f82b 	bl	8004c04 <I2C_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc2:	d103      	bne.n	8004bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e013      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bd0:	897b      	ldrh	r3, [r7, #10]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	6a3a      	ldr	r2, [r7, #32]
 8004be4:	4906      	ldr	r1, [pc, #24]	; (8004c00 <I2C_RequestMemoryRead+0x1cc>)
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f886 	bl	8004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	00010002 	.word	0x00010002

08004c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c14:	e048      	b.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1c:	d044      	beq.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fc ff99 	bl	8001b54 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d139      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	0c1b      	lsrs	r3, r3, #16
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d10d      	bne.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	43da      	mvns	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	e00c      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	43da      	mvns	r2, r3
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	4013      	ands	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d116      	bne.n	8004ca8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f043 0220 	orr.w	r2, r3, #32
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e023      	b.n	8004cf0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10d      	bne.n	8004cce <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	43da      	mvns	r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	e00c      	b.n	8004ce8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d093      	beq.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d06:	e071      	b.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d16:	d123      	bne.n	8004d60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e067      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d041      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fc fef4 	bl	8001b54 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d136      	bne.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d10c      	bne.n	8004da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4013      	ands	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	bf14      	ite	ne
 8004d9a:	2301      	movne	r3, #1
 8004d9c:	2300      	moveq	r3, #0
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	e00b      	b.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4013      	ands	r3, r2
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	bf14      	ite	ne
 8004db4:	2301      	movne	r3, #1
 8004db6:	2300      	moveq	r3, #0
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e021      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d10c      	bne.n	8004e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	43da      	mvns	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e00b      	b.n	8004e28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f47f af6d 	bne.w	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3710      	adds	r7, #16
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e44:	e034      	b.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f89b 	bl	8004f82 <I2C_IsAcknowledgeFailed>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e034      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e5c:	d028      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fc fe79 	bl	8001b54 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d11d      	bne.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d016      	beq.n	8004eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e007      	b.n	8004ec0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d1c3      	bne.n	8004e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ed4:	e049      	b.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d119      	bne.n	8004f18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f06f 0210 	mvn.w	r2, #16
 8004eec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e030      	b.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fc fe1c 	bl	8001b54 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11d      	bne.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d016      	beq.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e007      	b.n	8004f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d1ae      	bne.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d11b      	bne.n	8004fd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2220      	movs	r2, #32
 8004fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	f043 0204 	orr.w	r2, r3, #4
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e128      	b.n	8005244 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a90      	ldr	r2, [pc, #576]	; (800524c <HAL_I2S_Init+0x26c>)
 800500a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fb fd13 	bl	8000a38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6812      	ldr	r2, [r2, #0]
 8005024:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005028:	f023 030f 	bic.w	r3, r3, #15
 800502c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2202      	movs	r2, #2
 8005034:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d060      	beq.n	8005100 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005046:	2310      	movs	r3, #16
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e001      	b.n	8005050 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800504c:	2320      	movs	r3, #32
 800504e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b20      	cmp	r3, #32
 8005056:	d802      	bhi.n	800505e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800505e:	2001      	movs	r0, #1
 8005060:	f001 f9d2 	bl	8006408 <HAL_RCCEx_GetPeriphCLKFreq>
 8005064:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506e:	d125      	bne.n	80050bc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d010      	beq.n	800509a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	461a      	mov	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	fbb2 f3f3 	udiv	r3, r2, r3
 8005094:	3305      	adds	r3, #5
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	e01f      	b.n	80050da <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	00db      	lsls	r3, r3, #3
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	461a      	mov	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	3305      	adds	r3, #5
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	e00e      	b.n	80050da <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	461a      	mov	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	3305      	adds	r3, #5
 80050d8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4a5c      	ldr	r2, [pc, #368]	; (8005250 <HAL_I2S_Init+0x270>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	085b      	lsrs	r3, r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	021b      	lsls	r3, r3, #8
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	e003      	b.n	8005108 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005100:	2302      	movs	r3, #2
 8005102:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d902      	bls.n	8005114 <HAL_I2S_Init+0x134>
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2bff      	cmp	r3, #255	; 0xff
 8005112:	d907      	bls.n	8005124 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005118:	f043 0210 	orr.w	r2, r3, #16
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e08f      	b.n	8005244 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	ea42 0103 	orr.w	r1, r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	430a      	orrs	r2, r1
 8005136:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005142:	f023 030f 	bic.w	r3, r3, #15
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6851      	ldr	r1, [r2, #4]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6892      	ldr	r2, [r2, #8]
 800514e:	4311      	orrs	r1, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68d2      	ldr	r2, [r2, #12]
 8005154:	4311      	orrs	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6992      	ldr	r2, [r2, #24]
 800515a:	430a      	orrs	r2, r1
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d161      	bne.n	8005234 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a38      	ldr	r2, [pc, #224]	; (8005254 <HAL_I2S_Init+0x274>)
 8005174:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a37      	ldr	r2, [pc, #220]	; (8005258 <HAL_I2S_Init+0x278>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_I2S_Init+0x1a4>
 8005180:	4b36      	ldr	r3, [pc, #216]	; (800525c <HAL_I2S_Init+0x27c>)
 8005182:	e001      	b.n	8005188 <HAL_I2S_Init+0x1a8>
 8005184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	4932      	ldr	r1, [pc, #200]	; (8005258 <HAL_I2S_Init+0x278>)
 8005190:	428a      	cmp	r2, r1
 8005192:	d101      	bne.n	8005198 <HAL_I2S_Init+0x1b8>
 8005194:	4a31      	ldr	r2, [pc, #196]	; (800525c <HAL_I2S_Init+0x27c>)
 8005196:	e001      	b.n	800519c <HAL_I2S_Init+0x1bc>
 8005198:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800519c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80051a0:	f023 030f 	bic.w	r3, r3, #15
 80051a4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <HAL_I2S_Init+0x278>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_I2S_Init+0x1d4>
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_I2S_Init+0x27c>)
 80051b2:	e001      	b.n	80051b8 <HAL_I2S_Init+0x1d8>
 80051b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b8:	2202      	movs	r2, #2
 80051ba:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	; (8005258 <HAL_I2S_Init+0x278>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_I2S_Init+0x1ea>
 80051c6:	4b25      	ldr	r3, [pc, #148]	; (800525c <HAL_I2S_Init+0x27c>)
 80051c8:	e001      	b.n	80051ce <HAL_I2S_Init+0x1ee>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051da:	d003      	beq.n	80051e4 <HAL_I2S_Init+0x204>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d103      	bne.n	80051ec <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e001      	b.n	80051f0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051ec:	2300      	movs	r3, #0
 80051ee:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051fa:	4313      	orrs	r3, r2
 80051fc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005204:	4313      	orrs	r3, r2
 8005206:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800520e:	4313      	orrs	r3, r2
 8005210:	b29a      	uxth	r2, r3
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	4313      	orrs	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800521c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a0d      	ldr	r2, [pc, #52]	; (8005258 <HAL_I2S_Init+0x278>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_I2S_Init+0x24c>
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <HAL_I2S_Init+0x27c>)
 800522a:	e001      	b.n	8005230 <HAL_I2S_Init+0x250>
 800522c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005230:	897a      	ldrh	r2, [r7, #10]
 8005232:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	08005357 	.word	0x08005357
 8005250:	cccccccd 	.word	0xcccccccd
 8005254:	0800546d 	.word	0x0800546d
 8005258:	40003800 	.word	0x40003800
 800525c:	40003400 	.word	0x40003400

08005260 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	881a      	ldrh	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	1c9a      	adds	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10e      	bne.n	80052f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffb8 	bl	8005260 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	b292      	uxth	r2, r2
 800530c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	1c9a      	adds	r2, r3, #2
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800532a:	b29b      	uxth	r3, r3
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10e      	bne.n	800534e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800533e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff ff93 	bl	8005274 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b086      	sub	sp, #24
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b04      	cmp	r3, #4
 8005370:	d13a      	bne.n	80053e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d109      	bne.n	8005390 <I2S_IRQHandler+0x3a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d102      	bne.n	8005390 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ffb4 	bl	80052f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d126      	bne.n	80053e8 <I2S_IRQHandler+0x92>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d11f      	bne.n	80053e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f043 0202 	orr.w	r2, r3, #2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff ff50 	bl	8005288 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d136      	bne.n	8005462 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d109      	bne.n	8005412 <I2S_IRQHandler+0xbc>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005408:	2b80      	cmp	r3, #128	; 0x80
 800540a:	d102      	bne.n	8005412 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff ff45 	bl	800529c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b08      	cmp	r3, #8
 800541a:	d122      	bne.n	8005462 <I2S_IRQHandler+0x10c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d11b      	bne.n	8005462 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005438:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	f043 0204 	orr.w	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ff13 	bl	8005288 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a92      	ldr	r2, [pc, #584]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d101      	bne.n	800548a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005486:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005488:	e001      	b.n	800548e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800548a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a8b      	ldr	r2, [pc, #556]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054a4:	4b8a      	ldr	r3, [pc, #552]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054a6:	e001      	b.n	80054ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b8:	d004      	beq.n	80054c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f040 8099 	bne.w	80055f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d107      	bne.n	80054de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f925 	bl	8005728 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d107      	bne.n	80054f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9c8 	bl	8005888 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054f8:	69bb      	ldr	r3, [r7, #24]
 80054fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fe:	2b40      	cmp	r3, #64	; 0x40
 8005500:	d13a      	bne.n	8005578 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d035      	beq.n	8005578 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a6e      	ldr	r2, [pc, #440]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d101      	bne.n	800551a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005516:	4b6e      	ldr	r3, [pc, #440]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005518:	e001      	b.n	800551e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800551a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4969      	ldr	r1, [pc, #420]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005526:	428b      	cmp	r3, r1
 8005528:	d101      	bne.n	800552e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800552a:	4b69      	ldr	r3, [pc, #420]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800552c:	e001      	b.n	8005532 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800552e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005532:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005536:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005546:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005548:	2300      	movs	r3, #0
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	f043 0202 	orr.w	r2, r3, #2
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fe88 	bl	8005288 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	f040 80c3 	bne.w	800570a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80bd 	beq.w	800570a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800559e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a49      	ldr	r2, [pc, #292]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d101      	bne.n	80055ae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055aa:	4b49      	ldr	r3, [pc, #292]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055ac:	e001      	b.n	80055b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4944      	ldr	r1, [pc, #272]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ba:	428b      	cmp	r3, r1
 80055bc:	d101      	bne.n	80055c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055be:	4b44      	ldr	r3, [pc, #272]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055c0:	e001      	b.n	80055c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055ca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f043 0204 	orr.w	r2, r3, #4
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fe4a 	bl	8005288 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055f4:	e089      	b.n	800570a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f8be 	bl	800578c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d107      	bne.n	800562a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f8fd 	bl	8005824 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d12f      	bne.n	8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d02a      	beq.n	8005694 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800564c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d101      	bne.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005658:	4b1d      	ldr	r3, [pc, #116]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800565a:	e001      	b.n	8005660 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800565c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4919      	ldr	r1, [pc, #100]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005668:	428b      	cmp	r3, r1
 800566a:	d101      	bne.n	8005670 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800566c:	4b18      	ldr	r3, [pc, #96]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800566e:	e001      	b.n	8005674 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005678:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f043 0202 	orr.w	r2, r3, #2
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff fdfa 	bl	8005288 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	2b08      	cmp	r3, #8
 800569c:	d136      	bne.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d031      	beq.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a07      	ldr	r2, [pc, #28]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d101      	bne.n	80056b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056b4:	e001      	b.n	80056ba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4902      	ldr	r1, [pc, #8]	; (80056cc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056c2:	428b      	cmp	r3, r1
 80056c4:	d106      	bne.n	80056d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056c6:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056c8:	e006      	b.n	80056d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056ca:	bf00      	nop
 80056cc:	40003800 	.word	0x40003800
 80056d0:	40003400 	.word	0x40003400
 80056d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056dc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f043 0204 	orr.w	r2, r3, #4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fdc0 	bl	8005288 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005708:	e000      	b.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800570a:	bf00      	nop
}
 800570c:	bf00      	nop
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	1c99      	adds	r1, r3, #2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6251      	str	r1, [r2, #36]	; 0x24
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d113      	bne.n	8005782 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005768:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffc9 	bl	8005714 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005782:	bf00      	nop
 8005784:	3708      	adds	r7, #8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	1c99      	adds	r1, r3, #2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6251      	str	r1, [r2, #36]	; 0x24
 800579e:	8819      	ldrh	r1, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1d      	ldr	r2, [pc, #116]	; (800581c <I2SEx_TxISR_I2SExt+0x90>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d101      	bne.n	80057ae <I2SEx_TxISR_I2SExt+0x22>
 80057aa:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <I2SEx_TxISR_I2SExt+0x94>)
 80057ac:	e001      	b.n	80057b2 <I2SEx_TxISR_I2SExt+0x26>
 80057ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b2:	460a      	mov	r2, r1
 80057b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d121      	bne.n	8005812 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <I2SEx_TxISR_I2SExt+0x90>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d101      	bne.n	80057dc <I2SEx_TxISR_I2SExt+0x50>
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <I2SEx_TxISR_I2SExt+0x94>)
 80057da:	e001      	b.n	80057e0 <I2SEx_TxISR_I2SExt+0x54>
 80057dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	490d      	ldr	r1, [pc, #52]	; (800581c <I2SEx_TxISR_I2SExt+0x90>)
 80057e8:	428b      	cmp	r3, r1
 80057ea:	d101      	bne.n	80057f0 <I2SEx_TxISR_I2SExt+0x64>
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <I2SEx_TxISR_I2SExt+0x94>)
 80057ee:	e001      	b.n	80057f4 <I2SEx_TxISR_I2SExt+0x68>
 80057f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff81 	bl	8005714 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40003800 	.word	0x40003800
 8005820:	40003400 	.word	0x40003400

08005824 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68d8      	ldr	r0, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	1c99      	adds	r1, r3, #2
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800583c:	b282      	uxth	r2, r0
 800583e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d113      	bne.n	8005880 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005866:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7ff ff4a 	bl	8005714 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005880:	bf00      	nop
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a20      	ldr	r2, [pc, #128]	; (8005918 <I2SEx_RxISR_I2SExt+0x90>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d101      	bne.n	800589e <I2SEx_RxISR_I2SExt+0x16>
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <I2SEx_RxISR_I2SExt+0x94>)
 800589c:	e001      	b.n	80058a2 <I2SEx_RxISR_I2SExt+0x1a>
 800589e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058a2:	68d8      	ldr	r0, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	1c99      	adds	r1, r3, #2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	62d1      	str	r1, [r2, #44]	; 0x2c
 80058ae:	b282      	uxth	r2, r0
 80058b0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d121      	bne.n	800590e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <I2SEx_RxISR_I2SExt+0x90>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <I2SEx_RxISR_I2SExt+0x50>
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <I2SEx_RxISR_I2SExt+0x94>)
 80058d6:	e001      	b.n	80058dc <I2SEx_RxISR_I2SExt+0x54>
 80058d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	490d      	ldr	r1, [pc, #52]	; (8005918 <I2SEx_RxISR_I2SExt+0x90>)
 80058e4:	428b      	cmp	r3, r1
 80058e6:	d101      	bne.n	80058ec <I2SEx_RxISR_I2SExt+0x64>
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <I2SEx_RxISR_I2SExt+0x94>)
 80058ea:	e001      	b.n	80058f0 <I2SEx_RxISR_I2SExt+0x68>
 80058ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058f4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff03 	bl	8005714 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40003800 	.word	0x40003800
 800591c:	40003400 	.word	0x40003400

08005920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e267      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d075      	beq.n	8005a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800593e:	4b88      	ldr	r3, [pc, #544]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b04      	cmp	r3, #4
 8005948:	d00c      	beq.n	8005964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b85      	ldr	r3, [pc, #532]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005952:	2b08      	cmp	r3, #8
 8005954:	d112      	bne.n	800597c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005956:	4b82      	ldr	r3, [pc, #520]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800595e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005962:	d10b      	bne.n	800597c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	4b7e      	ldr	r3, [pc, #504]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05b      	beq.n	8005a28 <HAL_RCC_OscConfig+0x108>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d157      	bne.n	8005a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e242      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d106      	bne.n	8005994 <HAL_RCC_OscConfig+0x74>
 8005986:	4b76      	ldr	r3, [pc, #472]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a75      	ldr	r2, [pc, #468]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e01d      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800599c:	d10c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x98>
 800599e:	4b70      	ldr	r3, [pc, #448]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6f      	ldr	r2, [pc, #444]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b6d      	ldr	r3, [pc, #436]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6c      	ldr	r2, [pc, #432]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e00b      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 80059b8:	4b69      	ldr	r3, [pc, #420]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a68      	ldr	r2, [pc, #416]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	4b66      	ldr	r3, [pc, #408]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a65      	ldr	r2, [pc, #404]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fc f8bc 	bl	8001b54 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fc f8b8 	bl	8001b54 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	; 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e207      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	4b5b      	ldr	r3, [pc, #364]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0xc0>
 80059fe:	e014      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fc f8a8 	bl	8001b54 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a08:	f7fc f8a4 	bl	8001b54 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	; 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1f3      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0xe8>
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d063      	beq.n	8005afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a36:	4b4a      	ldr	r3, [pc, #296]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b47      	ldr	r3, [pc, #284]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d11c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4e:	4b44      	ldr	r3, [pc, #272]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	4b41      	ldr	r3, [pc, #260]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_RCC_OscConfig+0x152>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e1c7      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a72:	4b3b      	ldr	r3, [pc, #236]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4937      	ldr	r1, [pc, #220]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a86:	e03a      	b.n	8005afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a90:	4b34      	ldr	r3, [pc, #208]	; (8005b64 <HAL_RCC_OscConfig+0x244>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fc f85d 	bl	8001b54 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fc f859 	bl	8001b54 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e1a8      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b28      	ldr	r3, [pc, #160]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4925      	ldr	r1, [pc, #148]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	e015      	b.n	8005afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad2:	4b24      	ldr	r3, [pc, #144]	; (8005b64 <HAL_RCC_OscConfig+0x244>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad8:	f7fc f83c 	bl	8001b54 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ae0:	f7fc f838 	bl	8001b54 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e187      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d036      	beq.n	8005b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <HAL_RCC_OscConfig+0x248>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fc f81c 	bl	8001b54 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b20:	f7fc f818 	bl	8001b54 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e167      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x200>
 8005b3e:	e01b      	b.n	8005b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_RCC_OscConfig+0x248>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b46:	f7fc f805 	bl	8001b54 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	e00e      	b.n	8005b6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b4e:	f7fc f801 	bl	8001b54 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d907      	bls.n	8005b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e150      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
 8005b60:	40023800 	.word	0x40023800
 8005b64:	42470000 	.word	0x42470000
 8005b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6c:	4b88      	ldr	r3, [pc, #544]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ea      	bne.n	8005b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8097 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b81      	ldr	r3, [pc, #516]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	4b7d      	ldr	r3, [pc, #500]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	4a7c      	ldr	r2, [pc, #496]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ba6:	4b7a      	ldr	r3, [pc, #488]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b77      	ldr	r3, [pc, #476]	; (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc2:	4b74      	ldr	r3, [pc, #464]	; (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a73      	ldr	r2, [pc, #460]	; (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fb ffc1 	bl	8001b54 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7fb ffbd 	bl	8001b54 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e10c      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	4b6a      	ldr	r3, [pc, #424]	; (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x2ea>
 8005bfc:	4b64      	ldr	r3, [pc, #400]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	4a63      	ldr	r2, [pc, #396]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	; 0x70
 8005c08:	e01c      	b.n	8005c44 <HAL_RCC_OscConfig+0x324>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x30c>
 8005c12:	4b5f      	ldr	r3, [pc, #380]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	4a5e      	ldr	r2, [pc, #376]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0304 	orr.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c1e:	4b5c      	ldr	r3, [pc, #368]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	4a5b      	ldr	r2, [pc, #364]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0x324>
 8005c2c:	4b58      	ldr	r3, [pc, #352]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4a57      	ldr	r2, [pc, #348]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
 8005c38:	4b55      	ldr	r3, [pc, #340]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	4a54      	ldr	r2, [pc, #336]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fb ff82 	bl	8001b54 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fb ff7e 	bl	8001b54 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0cb      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6a:	4b49      	ldr	r3, [pc, #292]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ee      	beq.n	8005c54 <HAL_RCC_OscConfig+0x334>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c78:	f7fb ff6c 	bl	8001b54 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fb ff68 	bl	8001b54 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0b5      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c96:	4b3e      	ldr	r3, [pc, #248]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ee      	bne.n	8005c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b39      	ldr	r3, [pc, #228]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cac:	4a38      	ldr	r2, [pc, #224]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a1 	beq.w	8005e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cbe:	4b34      	ldr	r3, [pc, #208]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d05c      	beq.n	8005d84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d141      	bne.n	8005d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fb ff3c 	bl	8001b54 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fb ff38 	bl	8001b54 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e087      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	4b27      	ldr	r3, [pc, #156]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	3b01      	subs	r3, #1
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	491b      	ldr	r1, [pc, #108]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fb ff11 	bl	8001b54 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d36:	f7fb ff0d 	bl	8001b54 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e05c      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x416>
 8005d54:	e054      	b.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d56:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fb fefa 	bl	8001b54 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fb fef6 	bl	8001b54 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e045      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d76:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x444>
 8005d82:	e03d      	b.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e038      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
 8005d90:	40023800 	.word	0x40023800
 8005d94:	40007000 	.word	0x40007000
 8005d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <HAL_RCC_OscConfig+0x4ec>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d028      	beq.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d121      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11a      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	3b01      	subs	r3, #1
 8005de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800

08005e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0cc      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	4b68      	ldr	r3, [pc, #416]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90c      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b65      	ldr	r3, [pc, #404]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b8      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e64:	4b59      	ldr	r3, [pc, #356]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a58      	ldr	r2, [pc, #352]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7c:	4b53      	ldr	r3, [pc, #332]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a52      	ldr	r2, [pc, #328]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	494d      	ldr	r1, [pc, #308]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d044      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b47      	ldr	r3, [pc, #284]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d119      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e07f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ece:	4b3f      	ldr	r3, [pc, #252]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e06f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ede:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e067      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 0203 	bic.w	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4934      	ldr	r1, [pc, #208]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f00:	f7fb fe28 	bl	8001b54 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	e00a      	b.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f08:	f7fb fe24 	bl	8001b54 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e04f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 020c 	and.w	r2, r3, #12
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d1eb      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f30:	4b25      	ldr	r3, [pc, #148]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d20c      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b22      	ldr	r3, [pc, #136]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b20      	ldr	r3, [pc, #128]	; (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4916      	ldr	r1, [pc, #88]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f82:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	490e      	ldr	r1, [pc, #56]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f96:	f000 f821 	bl	8005fdc <HAL_RCC_GetSysClockFreq>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	490a      	ldr	r1, [pc, #40]	; (8005fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa8:	5ccb      	ldrb	r3, [r1, r3]
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fb fd88 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023c00 	.word	0x40023c00
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	0800b2b8 	.word	0x0800b2b8
 8005fd4:	20000020 	.word	0x20000020
 8005fd8:	20000024 	.word	0x20000024

08005fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b094      	sub	sp, #80	; 0x50
 8005fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fe8:	2300      	movs	r3, #0
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fec:	2300      	movs	r3, #0
 8005fee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff4:	4b79      	ldr	r3, [pc, #484]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 030c 	and.w	r3, r3, #12
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d00d      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x40>
 8006000:	2b08      	cmp	r3, #8
 8006002:	f200 80e1 	bhi.w	80061c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x34>
 800600a:	2b04      	cmp	r3, #4
 800600c:	d003      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x3a>
 800600e:	e0db      	b.n	80061c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006010:	4b73      	ldr	r3, [pc, #460]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006012:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006014:	e0db      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006016:	4b73      	ldr	r3, [pc, #460]	; (80061e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006018:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800601a:	e0d8      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800601c:	4b6f      	ldr	r3, [pc, #444]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006024:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006026:	4b6d      	ldr	r3, [pc, #436]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d063      	beq.n	80060fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b6a      	ldr	r3, [pc, #424]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	2200      	movs	r2, #0
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38
 800603c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006044:	633b      	str	r3, [r7, #48]	; 0x30
 8006046:	2300      	movs	r3, #0
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
 800604a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800604e:	4622      	mov	r2, r4
 8006050:	462b      	mov	r3, r5
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	0159      	lsls	r1, r3, #5
 800605c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006060:	0150      	lsls	r0, r2, #5
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4621      	mov	r1, r4
 8006068:	1a51      	subs	r1, r2, r1
 800606a:	6139      	str	r1, [r7, #16]
 800606c:	4629      	mov	r1, r5
 800606e:	eb63 0301 	sbc.w	r3, r3, r1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006080:	4659      	mov	r1, fp
 8006082:	018b      	lsls	r3, r1, #6
 8006084:	4651      	mov	r1, sl
 8006086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800608a:	4651      	mov	r1, sl
 800608c:	018a      	lsls	r2, r1, #6
 800608e:	4651      	mov	r1, sl
 8006090:	ebb2 0801 	subs.w	r8, r2, r1
 8006094:	4659      	mov	r1, fp
 8006096:	eb63 0901 	sbc.w	r9, r3, r1
 800609a:	f04f 0200 	mov.w	r2, #0
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060ae:	4690      	mov	r8, r2
 80060b0:	4699      	mov	r9, r3
 80060b2:	4623      	mov	r3, r4
 80060b4:	eb18 0303 	adds.w	r3, r8, r3
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	462b      	mov	r3, r5
 80060bc:	eb49 0303 	adc.w	r3, r9, r3
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060ce:	4629      	mov	r1, r5
 80060d0:	024b      	lsls	r3, r1, #9
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060d8:	4621      	mov	r1, r4
 80060da:	024a      	lsls	r2, r1, #9
 80060dc:	4610      	mov	r0, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e2:	2200      	movs	r2, #0
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ec:	f7fa f8c8 	bl	8000280 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060f8:	e058      	b.n	80061ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fa:	4b38      	ldr	r3, [pc, #224]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	099b      	lsrs	r3, r3, #6
 8006100:	2200      	movs	r2, #0
 8006102:	4618      	mov	r0, r3
 8006104:	4611      	mov	r1, r2
 8006106:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800610a:	623b      	str	r3, [r7, #32]
 800610c:	2300      	movs	r3, #0
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
 8006110:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	f04f 0000 	mov.w	r0, #0
 800611c:	f04f 0100 	mov.w	r1, #0
 8006120:	0159      	lsls	r1, r3, #5
 8006122:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006126:	0150      	lsls	r0, r2, #5
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4641      	mov	r1, r8
 800612e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006132:	4649      	mov	r1, r9
 8006134:	eb63 0b01 	sbc.w	fp, r3, r1
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006144:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006148:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800614c:	ebb2 040a 	subs.w	r4, r2, sl
 8006150:	eb63 050b 	sbc.w	r5, r3, fp
 8006154:	f04f 0200 	mov.w	r2, #0
 8006158:	f04f 0300 	mov.w	r3, #0
 800615c:	00eb      	lsls	r3, r5, #3
 800615e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006162:	00e2      	lsls	r2, r4, #3
 8006164:	4614      	mov	r4, r2
 8006166:	461d      	mov	r5, r3
 8006168:	4643      	mov	r3, r8
 800616a:	18e3      	adds	r3, r4, r3
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	464b      	mov	r3, r9
 8006170:	eb45 0303 	adc.w	r3, r5, r3
 8006174:	607b      	str	r3, [r7, #4]
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006182:	4629      	mov	r1, r5
 8006184:	028b      	lsls	r3, r1, #10
 8006186:	4621      	mov	r1, r4
 8006188:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800618c:	4621      	mov	r1, r4
 800618e:	028a      	lsls	r2, r1, #10
 8006190:	4610      	mov	r0, r2
 8006192:	4619      	mov	r1, r3
 8006194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006196:	2200      	movs	r2, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	61fa      	str	r2, [r7, #28]
 800619c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a0:	f7fa f86e 	bl	8000280 <__aeabi_uldivmod>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4613      	mov	r3, r2
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061ac:	4b0b      	ldr	r3, [pc, #44]	; (80061dc <HAL_RCC_GetSysClockFreq+0x200>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	0c1b      	lsrs	r3, r3, #16
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	3301      	adds	r3, #1
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80061bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c6:	e002      	b.n	80061ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061c8:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80061ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3750      	adds	r7, #80	; 0x50
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061da:	bf00      	nop
 80061dc:	40023800 	.word	0x40023800
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	007a1200 	.word	0x007a1200

080061e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061ec:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_RCC_GetHCLKFreq+0x14>)
 80061ee:	681b      	ldr	r3, [r3, #0]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20000020 	.word	0x20000020

08006200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006204:	f7ff fff0 	bl	80061e8 <HAL_RCC_GetHCLKFreq>
 8006208:	4602      	mov	r2, r0
 800620a:	4b05      	ldr	r3, [pc, #20]	; (8006220 <HAL_RCC_GetPCLK1Freq+0x20>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	0a9b      	lsrs	r3, r3, #10
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	4903      	ldr	r1, [pc, #12]	; (8006224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006216:	5ccb      	ldrb	r3, [r1, r3]
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800621c:	4618      	mov	r0, r3
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40023800 	.word	0x40023800
 8006224:	0800b2c8 	.word	0x0800b2c8

08006228 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006250:	4b68      	ldr	r3, [pc, #416]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006256:	f7fb fc7d 	bl	8001b54 <HAL_GetTick>
 800625a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800625c:	e008      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800625e:	f7fb fc79 	bl	8001b54 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e0bd      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006270:	4b61      	ldr	r3, [pc, #388]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f0      	bne.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	019b      	lsls	r3, r3, #6
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	071b      	lsls	r3, r3, #28
 800628e:	495a      	ldr	r1, [pc, #360]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006296:	4b57      	ldr	r3, [pc, #348]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629c:	f7fb fc5a 	bl	8001b54 <HAL_GetTick>
 80062a0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80062a4:	f7fb fc56 	bl	8001b54 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e09a      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b6:	4b50      	ldr	r3, [pc, #320]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8083 	beq.w	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062d0:	2300      	movs	r3, #0
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	4b48      	ldr	r3, [pc, #288]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	4a47      	ldr	r2, [pc, #284]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062de:	6413      	str	r3, [r2, #64]	; 0x40
 80062e0:	4b45      	ldr	r3, [pc, #276]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062ec:	4b43      	ldr	r3, [pc, #268]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a42      	ldr	r2, [pc, #264]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80062f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f8:	f7fb fc2c 	bl	8001b54 <HAL_GetTick>
 80062fc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062fe:	e008      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006300:	f7fb fc28 	bl	8001b54 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	2b02      	cmp	r3, #2
 800630c:	d901      	bls.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e06c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006312:	4b3a      	ldr	r3, [pc, #232]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f0      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800631e:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006326:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d02f      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x166>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	429a      	cmp	r2, r3
 800633a:	d028      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633c:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800633e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006344:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006346:	4b2e      	ldr	r3, [pc, #184]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634c:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006352:	4a29      	ldr	r2, [pc, #164]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006358:	4b27      	ldr	r3, [pc, #156]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d114      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006364:	f7fb fbf6 	bl	8001b54 <HAL_GetTick>
 8006368:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636a:	e00a      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800636c:	f7fb fbf2 	bl	8001b54 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f241 3288 	movw	r2, #5000	; 0x1388
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e034      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006382:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0ee      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800639a:	d10d      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800639c:	4b16      	ldr	r3, [pc, #88]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	4911      	ldr	r1, [pc, #68]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	608b      	str	r3, [r1, #8]
 80063b6:	e005      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80063b8:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4a0e      	ldr	r2, [pc, #56]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80063c2:	6093      	str	r3, [r2, #8]
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d0:	4909      	ldr	r1, [pc, #36]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	7d1a      	ldrb	r2, [r3, #20]
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80063e8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	42470068 	.word	0x42470068
 80063f8:	40023800 	.word	0x40023800
 80063fc:	40007000 	.word	0x40007000
 8006400:	42470e40 	.word	0x42470e40
 8006404:	424711e0 	.word	0x424711e0

08006408 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006418:	2300      	movs	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d141      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006426:	4b25      	ldr	r3, [pc, #148]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d006      	beq.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800643c:	d131      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800643e:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006440:	617b      	str	r3, [r7, #20]
          break;
 8006442:	e031      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006444:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006450:	d109      	bne.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006452:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800645e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	e008      	b.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006466:	4b15      	ldr	r3, [pc, #84]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006472:	fbb2 f3f3 	udiv	r3, r2, r3
 8006476:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800647a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800647e:	099b      	lsrs	r3, r3, #6
 8006480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	fb02 f303 	mul.w	r3, r2, r3
 800648a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800648e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006492:	0f1b      	lsrs	r3, r3, #28
 8006494:	f003 0307 	and.w	r3, r3, #7
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	fbb2 f3f3 	udiv	r3, r2, r3
 800649e:	617b      	str	r3, [r7, #20]
          break;
 80064a0:	e002      	b.n	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
          break;
 80064a6:	bf00      	nop
        }
      }
      break;
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 80064aa:	bf00      	nop
    }
  }
  return frequency;
 80064ac:	697b      	ldr	r3, [r7, #20]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
 80064c0:	00bb8000 	.word	0x00bb8000
 80064c4:	007a1200 	.word	0x007a1200
 80064c8:	00f42400 	.word	0x00f42400

080064cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e07b      	b.n	80065d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ee:	d009      	beq.n	8006504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	61da      	str	r2, [r3, #28]
 80064f6:	e005      	b.n	8006504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fb f99c 	bl	800185c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2202      	movs	r2, #2
 8006528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800653a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	431a      	orrs	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657e:	431a      	orrs	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006588:	ea42 0103 	orr.w	r1, r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	699b      	ldr	r3, [r3, #24]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	f003 0104 	and.w	r1, r3, #4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	f003 0210 	and.w	r2, r3, #16
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b088      	sub	sp, #32
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_SPI_Transmit+0x22>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e12d      	b.n	800685c <HAL_SPI_Transmit+0x27e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006608:	f7fb faa4 	bl	8001b54 <HAL_GetTick>
 800660c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b01      	cmp	r3, #1
 800661c:	d002      	beq.n	8006624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800661e:	2302      	movs	r3, #2
 8006620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006622:	e116      	b.n	8006852 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_SPI_Transmit+0x52>
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d102      	bne.n	8006636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006634:	e10d      	b.n	8006852 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2203      	movs	r2, #3
 800663a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667c:	d10f      	bne.n	800669e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800668c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800669c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d007      	beq.n	80066bc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066c4:	d14f      	bne.n	8006766 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <HAL_SPI_Transmit+0xf6>
 80066ce:	8afb      	ldrh	r3, [r7, #22]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d142      	bne.n	800675a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c9a      	adds	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066f8:	e02f      	b.n	800675a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d112      	bne.n	800672e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	881a      	ldrh	r2, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006718:	1c9a      	adds	r2, r3, #2
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b29a      	uxth	r2, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	86da      	strh	r2, [r3, #54]	; 0x36
 800672c:	e015      	b.n	800675a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800672e:	f7fb fa11 	bl	8001b54 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	429a      	cmp	r2, r3
 800673c:	d803      	bhi.n	8006746 <HAL_SPI_Transmit+0x168>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006744:	d102      	bne.n	800674c <HAL_SPI_Transmit+0x16e>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006758:	e07b      	b.n	8006852 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1ca      	bne.n	80066fa <HAL_SPI_Transmit+0x11c>
 8006764:	e050      	b.n	8006808 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_SPI_Transmit+0x196>
 800676e:	8afb      	ldrh	r3, [r7, #22]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d144      	bne.n	80067fe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	330c      	adds	r3, #12
 800677e:	7812      	ldrb	r2, [r2, #0]
 8006780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800679a:	e030      	b.n	80067fe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d113      	bne.n	80067d2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	7812      	ldrb	r2, [r2, #0]
 80067b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80067d0:	e015      	b.n	80067fe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d2:	f7fb f9bf 	bl	8001b54 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	683a      	ldr	r2, [r7, #0]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d803      	bhi.n	80067ea <HAL_SPI_Transmit+0x20c>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067e8:	d102      	bne.n	80067f0 <HAL_SPI_Transmit+0x212>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d106      	bne.n	80067fe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80067fc:	e029      	b.n	8006852 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1c9      	bne.n	800679c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	6839      	ldr	r1, [r7, #0]
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f8b1 	bl	8006974 <SPI_EndRxTxTransaction>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2220      	movs	r2, #32
 800681c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10a      	bne.n	800683c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e003      	b.n	8006852 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800685a:	7ffb      	ldrb	r3, [r7, #31]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006874:	f7fb f96e 	bl	8001b54 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4413      	add	r3, r2
 8006882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006884:	f7fb f966 	bl	8001b54 <HAL_GetTick>
 8006888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800688a:	4b39      	ldr	r3, [pc, #228]	; (8006970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	015b      	lsls	r3, r3, #5
 8006890:	0d1b      	lsrs	r3, r3, #20
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689a:	e054      	b.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068a2:	d050      	beq.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068a4:	f7fb f956 	bl	8001b54 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d902      	bls.n	80068ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d13d      	bne.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d2:	d111      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068dc:	d004      	beq.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d107      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006900:	d10f      	bne.n	8006922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e017      	b.n	8006966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3b01      	subs	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d19b      	bne.n	800689c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000020 	.word	0x20000020

08006974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2201      	movs	r2, #1
 8006988:	2102      	movs	r1, #2
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff ff6a 	bl	8006864 <SPI_WaitFlagStateUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e032      	b.n	8006a0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069a6:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <SPI_EndRxTxTransaction+0xa0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <SPI_EndRxTxTransaction+0xa4>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	0d5b      	lsrs	r3, r3, #21
 80069b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c4:	d112      	bne.n	80069ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2180      	movs	r1, #128	; 0x80
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff ff47 	bl	8006864 <SPI_WaitFlagStateUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e00f      	b.n	8006a0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d0f2      	beq.n	80069ec <SPI_EndRxTxTransaction+0x78>
 8006a06:	e000      	b.n	8006a0a <SPI_EndRxTxTransaction+0x96>
        break;
 8006a08:	bf00      	nop
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000020 	.word	0x20000020
 8006a18:	165e9f81 	.word	0x165e9f81

08006a1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	f107 001c 	add.w	r0, r7, #28
 8006a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a2e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d123      	bne.n	8006a7e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9dc 	bl	8006e30 <USB_CoreReset>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e01b      	b.n	8006ab6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f9d0 	bl	8006e30 <USB_CoreReset>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d106      	bne.n	8006aaa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8006aa8:	e005      	b.n	8006ab6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ab6:	7fbb      	ldrb	r3, [r7, #30]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d10b      	bne.n	8006ad4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f043 0206 	orr.w	r2, r3, #6
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ae0:	b004      	add	sp, #16
 8006ae2:	4770      	bx	lr

08006ae4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f043 0201 	orr.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f023 0201 	bic.w	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d115      	bne.n	8006b76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b56:	200a      	movs	r0, #10
 8006b58:	f7fb f808 	bl	8001b6c <HAL_Delay>
      ms += 10U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	330a      	adds	r3, #10
 8006b60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f956 	bl	8006e14 <USB_GetMode>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d01e      	beq.n	8006bac <USB_SetCurrentMode+0x84>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2bc7      	cmp	r3, #199	; 0xc7
 8006b72:	d9f0      	bls.n	8006b56 <USB_SetCurrentMode+0x2e>
 8006b74:	e01a      	b.n	8006bac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d115      	bne.n	8006ba8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006b88:	200a      	movs	r0, #10
 8006b8a:	f7fa ffef 	bl	8001b6c <HAL_Delay>
      ms += 10U;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	330a      	adds	r3, #10
 8006b92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f93d 	bl	8006e14 <USB_GetMode>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d005      	beq.n	8006bac <USB_SetCurrentMode+0x84>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2bc7      	cmp	r3, #199	; 0xc7
 8006ba4:	d9f0      	bls.n	8006b88 <USB_SetCurrentMode+0x60>
 8006ba6:	e001      	b.n	8006bac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e005      	b.n	8006bb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2bc8      	cmp	r3, #200	; 0xc8
 8006bb0:	d101      	bne.n	8006bb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bda:	d901      	bls.n	8006be0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e01b      	b.n	8006c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	daf2      	bge.n	8006bce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	019b      	lsls	r3, r3, #6
 8006bf0:	f043 0220 	orr.w	r2, r3, #32
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c04:	d901      	bls.n	8006c0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e006      	b.n	8006c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d0f0      	beq.n	8006bf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3301      	adds	r3, #1
 8006c34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c3c:	d901      	bls.n	8006c42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e018      	b.n	8006c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	daf2      	bge.n	8006c30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2210      	movs	r2, #16
 8006c52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006c60:	d901      	bls.n	8006c66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e006      	b.n	8006c74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d0f0      	beq.n	8006c54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b089      	sub	sp, #36	; 0x24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	460b      	mov	r3, r1
 8006c90:	71fb      	strb	r3, [r7, #7]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006c9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d123      	bne.n	8006cee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ca6:	88bb      	ldrh	r3, [r7, #4]
 8006ca8:	3303      	adds	r3, #3
 8006caa:	089b      	lsrs	r3, r3, #2
 8006cac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61bb      	str	r3, [r7, #24]
 8006cb2:	e018      	b.n	8006ce6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006cb4:	79fb      	ldrb	r3, [r7, #7]
 8006cb6:	031a      	lsls	r2, r3, #12
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3e2      	bcc.n	8006cb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3724      	adds	r7, #36	; 0x24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b08b      	sub	sp, #44	; 0x2c
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4613      	mov	r3, r2
 8006d08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	089b      	lsrs	r3, r3, #2
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	623b      	str	r3, [r7, #32]
 8006d26:	e014      	b.n	8006d52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	3301      	adds	r3, #1
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	3301      	adds	r3, #1
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	3301      	adds	r3, #1
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	623b      	str	r3, [r7, #32]
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d3e6      	bcc.n	8006d28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006d5a:	8bfb      	ldrh	r3, [r7, #30]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01e      	beq.n	8006d9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f107 0310 	add.w	r3, r7, #16
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	701a      	strb	r2, [r3, #0]
      i++;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	3301      	adds	r3, #1
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006d92:	8bfb      	ldrh	r3, [r7, #30]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006d98:	8bfb      	ldrh	r3, [r7, #30]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1ea      	bne.n	8006d74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	372c      	adds	r7, #44	; 0x2c
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e06:	68bb      	ldr	r3, [r7, #8]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	f003 0301 	and.w	r3, r3, #1
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e48:	d901      	bls.n	8006e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e01b      	b.n	8006e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	daf2      	bge.n	8006e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f043 0201 	orr.w	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e72:	d901      	bls.n	8006e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e006      	b.n	8006e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d0f0      	beq.n	8006e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e94:	b084      	sub	sp, #16
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d119      	bne.n	8006f1e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d10a      	bne.n	8006f08 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f00:	f043 0304 	orr.w	r3, r3, #4
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	e014      	b.n	8006f32 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f16:	f023 0304 	bic.w	r3, r3, #4
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	e009      	b.n	8006f32 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f2c:	f023 0304 	bic.w	r3, r3, #4
 8006f30:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f32:	2110      	movs	r1, #16
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe43 	bl	8006bc0 <USB_FlushTxFifo>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff fe6d 	bl	8006c24 <USB_FlushRxFifo>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f54:	2300      	movs	r3, #0
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	e015      	b.n	8006f86 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f66:	461a      	mov	r2, r3
 8006f68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f6c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	015a      	lsls	r2, r3, #5
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	3301      	adds	r3, #1
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d3e3      	bcc.n	8006f5a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f9e:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2280      	movs	r2, #128	; 0x80
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a0e      	ldr	r2, [pc, #56]	; (8006fe4 <USB_HostInit+0x150>)
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a0e      	ldr	r2, [pc, #56]	; (8006fe8 <USB_HostInit+0x154>)
 8006fb0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d105      	bne.n	8006fc8 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f043 0210 	orr.w	r2, r3, #16
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	4b07      	ldr	r3, [pc, #28]	; (8006fec <USB_HostInit+0x158>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fe0:	b004      	add	sp, #16
 8006fe2:	4770      	bx	lr
 8006fe4:	00600080 	.word	0x00600080
 8006fe8:	004000e0 	.word	0x004000e0
 8006fec:	a3200008 	.word	0xa3200008

08006ff0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800700e:	f023 0303 	bic.w	r3, r3, #3
 8007012:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007028:	4313      	orrs	r3, r2
 800702a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007038:	461a      	mov	r2, r3
 800703a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800703e:	6053      	str	r3, [r2, #4]
 8007040:	e00c      	b.n	800705c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b02      	cmp	r3, #2
 8007046:	d107      	bne.n	8007058 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704e:	461a      	mov	r2, r3
 8007050:	f241 7370 	movw	r3, #6000	; 0x1770
 8007054:	6053      	str	r3, [r2, #4]
 8007056:	e001      	b.n	800705c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800708a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007098:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800709a:	2064      	movs	r0, #100	; 0x64
 800709c:	f7fa fd66 	bl	8001b6c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070ae:	200a      	movs	r0, #10
 80070b0:	f7fa fd5c 	bl	8001b6c <HAL_Delay>

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	460b      	mov	r3, r1
 80070c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <USB_DriveVbus+0x44>
 80070ee:	78fb      	ldrb	r3, [r7, #3]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007100:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710c:	d109      	bne.n	8007122 <USB_DriveVbus+0x64>
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d106      	bne.n	8007122 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800711c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007120:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	0c5b      	lsrs	r3, r3, #17
 800714e:	f003 0303 	and.w	r3, r3, #3
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800715e:	b480      	push	{r7}
 8007160:	b085      	sub	sp, #20
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	b29b      	uxth	r3, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	70fb      	strb	r3, [r7, #3]
 8007192:	460b      	mov	r3, r1
 8007194:	70bb      	strb	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ae:	461a      	mov	r2, r3
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	d867      	bhi.n	800728e <USB_HC_Init+0x10e>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <USB_HC_Init+0x44>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	08007251 	.word	0x08007251
 80071cc:	080071d5 	.word	0x080071d5
 80071d0:	08007213 	.word	0x08007213
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e0:	461a      	mov	r2, r3
 80071e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80071e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80071e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	da51      	bge.n	8007294 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	78fa      	ldrb	r2, [r7, #3]
 8007200:	0151      	lsls	r1, r2, #5
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	440a      	add	r2, r1
 8007206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800720a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007210:	e040      	b.n	8007294 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	4413      	add	r3, r2
 800721a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800721e:	461a      	mov	r2, r3
 8007220:	f240 639d 	movw	r3, #1693	; 0x69d
 8007224:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007226:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800722a:	2b00      	cmp	r3, #0
 800722c:	da34      	bge.n	8007298 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	4413      	add	r3, r2
 8007236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	440a      	add	r2, r1
 8007244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800724e:	e023      	b.n	8007298 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725c:	461a      	mov	r2, r3
 800725e:	f240 2325 	movw	r3, #549	; 0x225
 8007262:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007268:	2b00      	cmp	r3, #0
 800726a:	da17      	bge.n	800729c <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	78fa      	ldrb	r2, [r7, #3]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007286:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800728a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800728c:	e006      	b.n	800729c <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	77fb      	strb	r3, [r7, #31]
      break;
 8007292:	e004      	b.n	800729e <USB_HC_Init+0x11e>
      break;
 8007294:	bf00      	nop
 8007296:	e002      	b.n	800729e <USB_HC_Init+0x11e>
      break;
 8007298:	bf00      	nop
 800729a:	e000      	b.n	800729e <USB_HC_Init+0x11e>
      break;
 800729c:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	2300      	movs	r3, #0
 80072ae:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80072b0:	78fb      	ldrb	r3, [r7, #3]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ca:	f043 0302 	orr.w	r3, r3, #2
 80072ce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	2101      	movs	r1, #1
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	6939      	ldr	r1, [r7, #16]
 80072e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072ea:	4313      	orrs	r3, r2
 80072ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80072fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da03      	bge.n	800730a <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007306:	61bb      	str	r3, [r7, #24]
 8007308:	e001      	b.n	800730e <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff ff0e 	bl	8007130 <USB_GetHostSpeed>
 8007314:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800731a:	2b02      	cmp	r3, #2
 800731c:	d106      	bne.n	800732c <USB_HC_Init+0x1ac>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b02      	cmp	r3, #2
 8007322:	d003      	beq.n	800732c <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007324:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e001      	b.n	8007330 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007330:	787b      	ldrb	r3, [r7, #1]
 8007332:	059b      	lsls	r3, r3, #22
 8007334:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007338:	78bb      	ldrb	r3, [r7, #2]
 800733a:	02db      	lsls	r3, r3, #11
 800733c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007340:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007342:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007346:	049b      	lsls	r3, r3, #18
 8007348:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800734c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800734e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007350:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007354:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	431a      	orrs	r2, r3
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	440a      	add	r2, r1
 8007366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800736a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800736e:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007370:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007374:	2b03      	cmp	r3, #3
 8007376:	d003      	beq.n	8007380 <USB_HC_Init+0x200>
 8007378:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10f      	bne.n	80073a0 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	440a      	add	r2, r1
 8007396:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800739a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800739e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3720      	adds	r7, #32
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop

080073ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08c      	sub	sp, #48	; 0x30
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	4613      	mov	r3, r2
 80073b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80073c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c8:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	799b      	ldrb	r3, [r3, #6]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d158      	bne.n	8007484 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80073d2:	2301      	movs	r3, #1
 80073d4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (hc->ep_is_in != 0U)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	78db      	ldrb	r3, [r3, #3]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80073de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	8a92      	ldrh	r2, [r2, #20]
 80073e4:	fb03 f202 	mul.w	r2, r3, r2
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	61da      	str	r2, [r3, #28]
 80073ec:	e079      	b.n	80074e2 <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7c9b      	ldrb	r3, [r3, #18]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d130      	bne.n	8007458 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	2bbc      	cmp	r3, #188	; 0xbc
 80073fc:	d918      	bls.n	8007430 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	8a9b      	ldrh	r3, [r3, #20]
 8007402:	461a      	mov	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d003      	beq.n	8007420 <USB_HC_StartXfer+0x74>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d103      	bne.n	8007428 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2202      	movs	r2, #2
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	e05c      	b.n	80074e2 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2201      	movs	r2, #1
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e058      	b.n	80074e2 <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d007      	beq.n	8007450 <USB_HC_StartXfer+0xa4>
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	2b02      	cmp	r3, #2
 8007446:	d003      	beq.n	8007450 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	2204      	movs	r2, #4
 800744c:	60da      	str	r2, [r3, #12]
 800744e:	e048      	b.n	80074e2 <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2203      	movs	r2, #3
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	e044      	b.n	80074e2 <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d10d      	bne.n	800747a <USB_HC_StartXfer+0xce>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	8a92      	ldrh	r2, [r2, #20]
 8007466:	4293      	cmp	r3, r2
 8007468:	d907      	bls.n	800747a <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800746a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	8a92      	ldrh	r2, [r2, #20]
 8007470:	fb03 f202 	mul.w	r2, r3, r2
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	61da      	str	r2, [r3, #28]
 8007478:	e033      	b.n	80074e2 <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6a1a      	ldr	r2, [r3, #32]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61da      	str	r2, [r3, #28]
 8007482:	e02e      	b.n	80074e2 <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d018      	beq.n	80074be <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	8a92      	ldrh	r2, [r2, #20]
 8007494:	4413      	add	r3, r2
 8007496:	3b01      	subs	r3, #1
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	8a92      	ldrh	r2, [r2, #20]
 800749c:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a0:	84fb      	strh	r3, [r7, #38]	; 0x26

      if (num_packets > max_hc_pkt_count)
 80074a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80074a4:	8b7b      	ldrh	r3, [r7, #26]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d90b      	bls.n	80074c2 <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 80074aa:	8b7b      	ldrh	r3, [r7, #26]
 80074ac:	84fb      	strh	r3, [r7, #38]	; 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	8a92      	ldrh	r2, [r2, #20]
 80074b4:	fb03 f202 	mul.w	r2, r3, r2
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61da      	str	r2, [r3, #28]
 80074bc:	e001      	b.n	80074c2 <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80074be:	2301      	movs	r3, #1
 80074c0:	84fb      	strh	r3, [r7, #38]	; 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	78db      	ldrb	r3, [r3, #3]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	8a92      	ldrh	r2, [r2, #20]
 80074d0:	fb03 f202 	mul.w	r2, r3, r2
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	61da      	str	r2, [r3, #28]
 80074d8:	e003      	b.n	80074e2 <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074ec:	04d9      	lsls	r1, r3, #19
 80074ee:	4ba4      	ldr	r3, [pc, #656]	; (8007780 <USB_HC_StartXfer+0x3d4>)
 80074f0:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074f2:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	7d9b      	ldrb	r3, [r3, #22]
 80074f8:	075b      	lsls	r3, r3, #29
 80074fa:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074fe:	69f9      	ldr	r1, [r7, #28]
 8007500:	0148      	lsls	r0, r1, #5
 8007502:	6a39      	ldr	r1, [r7, #32]
 8007504:	4401      	add	r1, r0
 8007506:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800750a:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800750c:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d009      	beq.n	8007528 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	6999      	ldr	r1, [r3, #24]
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007524:	460a      	mov	r2, r1
 8007526:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	4413      	add	r3, r2
 8007548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	0151      	lsls	r1, r2, #5
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	440a      	add	r2, r1
 8007556:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800755a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800755e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	4413      	add	r3, r2
 8007568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	7e7b      	ldrb	r3, [r7, #25]
 8007570:	075b      	lsls	r3, r3, #29
 8007572:	69f9      	ldr	r1, [r7, #28]
 8007574:	0148      	lsls	r0, r1, #5
 8007576:	6a39      	ldr	r1, [r7, #32]
 8007578:	4401      	add	r1, r0
 800757a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800757e:	4313      	orrs	r3, r2
 8007580:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	799b      	ldrb	r3, [r3, #6]
 8007586:	2b01      	cmp	r3, #1
 8007588:	f040 80c4 	bne.w	8007714 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	7c5b      	ldrb	r3, [r3, #17]
 8007590:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007596:	4313      	orrs	r3, r2
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	6a3a      	ldr	r2, [r7, #32]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80075a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80075a8:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	6a3a      	ldr	r2, [r7, #32]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075c8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	79db      	ldrb	r3, [r3, #7]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d123      	bne.n	800761a <USB_HC_StartXfer+0x26e>
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d11f      	bne.n	800761a <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	6a3a      	ldr	r2, [r7, #32]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f8:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	6a3a      	ldr	r2, [r7, #32]
 800760e:	440a      	add	r2, r1
 8007610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007618:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	7c9b      	ldrb	r3, [r3, #18]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d003      	beq.n	800762a <USB_HC_StartXfer+0x27e>
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	7c9b      	ldrb	r3, [r3, #18]
 8007626:	2b03      	cmp	r3, #3
 8007628:	d117      	bne.n	800765a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800762e:	2b01      	cmp	r3, #1
 8007630:	d113      	bne.n	800765a <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10f      	bne.n	800765a <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	4413      	add	r3, r2
 8007642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	6a3a      	ldr	r2, [r7, #32]
 800764e:	440a      	add	r2, r1
 8007650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007658:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	7c9b      	ldrb	r3, [r3, #18]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d163      	bne.n	800772a <USB_HC_StartXfer+0x37e>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	78db      	ldrb	r3, [r3, #3]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15f      	bne.n	800772a <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	3b01      	subs	r3, #1
 8007670:	2b03      	cmp	r3, #3
 8007672:	d859      	bhi.n	8007728 <USB_HC_StartXfer+0x37c>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USB_HC_StartXfer+0x2d0>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	0800768d 	.word	0x0800768d
 8007680:	080076af 	.word	0x080076af
 8007684:	080076d1 	.word	0x080076d1
 8007688:	080076f3 	.word	0x080076f3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	4413      	add	r3, r2
 8007694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	0151      	lsls	r1, r2, #5
 800769e:	6a3a      	ldr	r2, [r7, #32]
 80076a0:	440a      	add	r2, r1
 80076a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076aa:	6053      	str	r3, [r2, #4]
          break;
 80076ac:	e03d      	b.n	800772a <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c8:	f043 030e 	orr.w	r3, r3, #14
 80076cc:	6053      	str	r3, [r2, #4]
          break;
 80076ce:	e02c      	b.n	800772a <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	6a3a      	ldr	r2, [r7, #32]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ee:	6053      	str	r3, [r2, #4]
          break;
 80076f0:	e01b      	b.n	800772a <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	6a3a      	ldr	r2, [r7, #32]
 8007706:	440a      	add	r2, r1
 8007708:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800770c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007710:	6053      	str	r3, [r2, #4]
          break;
 8007712:	e00a      	b.n	800772a <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	461a      	mov	r2, r3
 8007722:	2300      	movs	r3, #0
 8007724:	6053      	str	r3, [r2, #4]
 8007726:	e000      	b.n	800772a <USB_HC_StartXfer+0x37e>
          break;
 8007728:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	4413      	add	r3, r2
 8007732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007740:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	78db      	ldrb	r3, [r3, #3]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007750:	613b      	str	r3, [r7, #16]
 8007752:	e003      	b.n	800775c <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800775a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007762:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	6a3b      	ldr	r3, [r7, #32]
 800776a:	4413      	add	r3, r2
 800776c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007770:	461a      	mov	r2, r3
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 800777c:	2300      	movs	r3, #0
 800777e:	e055      	b.n	800782c <USB_HC_StartXfer+0x480>
 8007780:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d14e      	bne.n	800782a <USB_HC_StartXfer+0x47e>
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d04a      	beq.n	800782a <USB_HC_StartXfer+0x47e>
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	79db      	ldrb	r3, [r3, #7]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d146      	bne.n	800782a <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	7c9b      	ldrb	r3, [r3, #18]
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d831      	bhi.n	8007808 <USB_HC_StartXfer+0x45c>
 80077a4:	a201      	add	r2, pc, #4	; (adr r2, 80077ac <USB_HC_StartXfer+0x400>)
 80077a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077aa:	bf00      	nop
 80077ac:	080077bd 	.word	0x080077bd
 80077b0:	080077e1 	.word	0x080077e1
 80077b4:	080077bd 	.word	0x080077bd
 80077b8:	080077e1 	.word	0x080077e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	3303      	adds	r3, #3
 80077c2:	089b      	lsrs	r3, r3, #2
 80077c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80077c6:	8afa      	ldrh	r2, [r7, #22]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d91c      	bls.n	800780c <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f043 0220 	orr.w	r2, r3, #32
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80077de:	e015      	b.n	800780c <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	3303      	adds	r3, #3
 80077e6:	089b      	lsrs	r3, r3, #2
 80077e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80077ea:	8afa      	ldrh	r2, [r7, #22]
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d90a      	bls.n	8007810 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	619a      	str	r2, [r3, #24]
        }
        break;
 8007806:	e003      	b.n	8007810 <USB_HC_StartXfer+0x464>

      default:
        break;
 8007808:	bf00      	nop
 800780a:	e002      	b.n	8007812 <USB_HC_StartXfer+0x466>
        break;
 800780c:	bf00      	nop
 800780e:	e000      	b.n	8007812 <USB_HC_StartXfer+0x466>
        break;
 8007810:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6999      	ldr	r1, [r3, #24]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	785a      	ldrb	r2, [r3, #1]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	b29b      	uxth	r3, r3
 8007820:	2000      	movs	r0, #0
 8007822:	9000      	str	r0, [sp, #0]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fa2b 	bl	8006c80 <USB_WritePacket>
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3728      	adds	r7, #40	; 0x28
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	b29b      	uxth	r3, r3
}
 800784a:	4618      	mov	r0, r3
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007856:	b480      	push	{r7}
 8007858:	b089      	sub	sp, #36	; 0x24
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	0c9b      	lsrs	r3, r3, #18
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	0fdb      	lsrs	r3, r3, #31
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	0fdb      	lsrs	r3, r3, #31
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0320 	and.w	r3, r3, #32
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d10d      	bne.n	80078d8 <USB_HC_Halt+0x82>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10a      	bne.n	80078d8 <USB_HC_Halt+0x82>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d005      	beq.n	80078d4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d002      	beq.n	80078d4 <USB_HC_Halt+0x7e>
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d101      	bne.n	80078d8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e0d8      	b.n	8007a8a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d002      	beq.n	80078e4 <USB_HC_Halt+0x8e>
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d173      	bne.n	80079cc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	69fa      	ldr	r2, [r7, #28]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007902:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0320 	and.w	r3, r3, #32
 800790c:	2b00      	cmp	r3, #0
 800790e:	d14a      	bne.n	80079a6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d133      	bne.n	8007984 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800793a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	69ba      	ldr	r2, [r7, #24]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	440a      	add	r2, r1
 8007952:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800795a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	3301      	adds	r3, #1
 8007960:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007968:	d82e      	bhi.n	80079c8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007980:	d0ec      	beq.n	800795c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007982:	e081      	b.n	8007a88 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	440a      	add	r2, r1
 800799a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800799e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079a2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079a4:	e070      	b.n	8007a88 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079c4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079c6:	e05f      	b.n	8007a88 <USB_HC_Halt+0x232>
            break;
 80079c8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ca:	e05d      	b.n	8007a88 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079ea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d133      	bne.n	8007a64 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a3a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a48:	d81d      	bhi.n	8007a86 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	015a      	lsls	r2, r3, #5
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	4413      	add	r3, r2
 8007a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a60:	d0ec      	beq.n	8007a3c <USB_HC_Halt+0x1e6>
 8007a62:	e011      	b.n	8007a88 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e000      	b.n	8007a88 <USB_HC_Halt+0x232>
          break;
 8007a86:	bf00      	nop
    }
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3724      	adds	r7, #36	; 0x24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b088      	sub	sp, #32
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff f82b 	bl	8006b06 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ab0:	2110      	movs	r1, #16
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff f884 	bl	8006bc0 <USB_FlushTxFifo>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d001      	beq.n	8007ac2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff f8ae 	bl	8006c24 <USB_FlushRxFifo>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	e01f      	b.n	8007b18 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aee:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007af6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007afe:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	3301      	adds	r3, #1
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	2b0f      	cmp	r3, #15
 8007b1c:	d9dc      	bls.n	8007ad8 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	e034      	b.n	8007b8e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b3a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b42:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b4a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b58:	461a      	mov	r2, r3
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b6a:	d80c      	bhi.n	8007b86 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b82:	d0ec      	beq.n	8007b5e <USB_StopHost+0xc8>
 8007b84:	e000      	b.n	8007b88 <USB_StopHost+0xf2>
        break;
 8007b86:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	61bb      	str	r3, [r7, #24]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b0f      	cmp	r3, #15
 8007b92:	d9c7      	bls.n	8007b24 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ba0:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ba8:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fe ff9a 	bl	8006ae4 <USB_EnableGlobalInt>

  return ret;
 8007bb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3720      	adds	r7, #32
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007bba:	b590      	push	{r4, r7, lr}
 8007bbc:	b089      	sub	sp, #36	; 0x24
 8007bbe:	af04      	add	r7, sp, #16
 8007bc0:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	2102      	movs	r1, #2
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fc86 	bl	80084da <USBH_FindInterface>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	2bff      	cmp	r3, #255	; 0xff
 8007bd6:	d002      	beq.n	8007bde <USBH_CDC_InterfaceInit+0x24>
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d901      	bls.n	8007be2 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	e13d      	b.n	8007e5e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fc5b 	bl	80084a2 <USBH_SelectInterface>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	e131      	b.n	8007e5e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007c00:	2050      	movs	r0, #80	; 0x50
 8007c02:	f002 fb75 	bl	800a2f0 <malloc>
 8007c06:	4603      	mov	r3, r0
 8007c08:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e11f      	b.n	8007e5e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007c1e:	2250      	movs	r2, #80	; 0x50
 8007c20:	2100      	movs	r1, #0
 8007c22:	68b8      	ldr	r0, [r7, #8]
 8007c24:	f002 fc40 	bl	800a4a8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	211a      	movs	r1, #26
 8007c2e:	fb01 f303 	mul.w	r3, r1, r3
 8007c32:	4413      	add	r3, r2
 8007c34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	da15      	bge.n	8007c6c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	211a      	movs	r1, #26
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c50:	781a      	ldrb	r2, [r3, #0]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c56:	7bfb      	ldrb	r3, [r7, #15]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	211a      	movs	r1, #26
 8007c5c:	fb01 f303 	mul.w	r3, r1, r3
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	785b      	ldrb	r3, [r3, #1]
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f001 ffcf 	bl	8009c16 <USBH_AllocPipe>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	7819      	ldrb	r1, [r3, #0]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	7858      	ldrb	r0, [r3, #1]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	8952      	ldrh	r2, [r2, #10]
 8007c98:	9202      	str	r2, [sp, #8]
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	9201      	str	r2, [sp, #4]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 ff87 	bl	8009bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f002 fa96 	bl	800a1e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	210a      	movs	r1, #10
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fc0b 	bl	80084da <USBH_FindInterface>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2bff      	cmp	r3, #255	; 0xff
 8007ccc:	d002      	beq.n	8007cd4 <USBH_CDC_InterfaceInit+0x11a>
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d901      	bls.n	8007cd8 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e0c2      	b.n	8007e5e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	211a      	movs	r1, #26
 8007cde:	fb01 f303 	mul.w	r3, r1, r3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b25b      	sxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da16      	bge.n	8007d1e <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	211a      	movs	r1, #26
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	211a      	movs	r1, #26
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	835a      	strh	r2, [r3, #26]
 8007d1c:	e015      	b.n	8007d4a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	211a      	movs	r1, #26
 8007d24:	fb01 f303 	mul.w	r3, r1, r3
 8007d28:	4413      	add	r3, r2
 8007d2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d2e:	781a      	ldrb	r2, [r3, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	211a      	movs	r1, #26
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	211a      	movs	r1, #26
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b25b      	sxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	da16      	bge.n	8007d90 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	211a      	movs	r1, #26
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	211a      	movs	r1, #26
 8007d7e:	fb01 f303 	mul.w	r3, r1, r3
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007d88:	881a      	ldrh	r2, [r3, #0]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	835a      	strh	r2, [r3, #26]
 8007d8e:	e015      	b.n	8007dbc <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	211a      	movs	r1, #26
 8007d96:	fb01 f303 	mul.w	r3, r1, r3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007da0:	781a      	ldrb	r2, [r3, #0]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	211a      	movs	r1, #26
 8007dac:	fb01 f303 	mul.w	r3, r1, r3
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007db6:	881a      	ldrh	r2, [r3, #0]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7b9b      	ldrb	r3, [r3, #14]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 ff27 	bl	8009c16 <USBH_AllocPipe>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	461a      	mov	r2, r3
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	7bdb      	ldrb	r3, [r3, #15]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 ff1d 	bl	8009c16 <USBH_AllocPipe>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	461a      	mov	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	7b59      	ldrb	r1, [r3, #13]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	7b98      	ldrb	r0, [r3, #14]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	8b12      	ldrh	r2, [r2, #24]
 8007dfc:	9202      	str	r2, [sp, #8]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	9201      	str	r2, [sp, #4]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	4623      	mov	r3, r4
 8007e06:	4602      	mov	r2, r0
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f001 fed5 	bl	8009bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	7b19      	ldrb	r1, [r3, #12]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	7bd8      	ldrb	r0, [r3, #15]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	8b52      	ldrh	r2, [r2, #26]
 8007e26:	9202      	str	r2, [sp, #8]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	9201      	str	r2, [sp, #4]
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	4623      	mov	r3, r4
 8007e30:	4602      	mov	r2, r0
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f001 fec0 	bl	8009bb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7b5b      	ldrb	r3, [r3, #13]
 8007e44:	2200      	movs	r2, #0
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f002 f9cb 	bl	800a1e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	7b1b      	ldrb	r3, [r3, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f002 f9c4 	bl	800a1e4 <USBH_LL_SetToggle>

  return USBH_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd90      	pop	{r4, r7, pc}

08007e66 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00e      	beq.n	8007e9e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 feb5 	bl	8009bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 fee0 	bl	8009c58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	7b1b      	ldrb	r3, [r3, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	7b1b      	ldrb	r3, [r3, #12]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 fea2 	bl	8009bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	7b1b      	ldrb	r3, [r3, #12]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f001 fecd 	bl	8009c58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	7b5b      	ldrb	r3, [r3, #13]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	7b5b      	ldrb	r3, [r3, #13]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fe8f 	bl	8009bf6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	7b5b      	ldrb	r3, [r3, #13]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f001 feba 	bl	8009c58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00b      	beq.n	8007f0e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 f9fe 	bl	800a300 <free>
    phost->pActiveClass->pData = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f26:	69db      	ldr	r3, [r3, #28]
 8007f28:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3340      	adds	r3, #64	; 0x40
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f8b2 	bl	800809a <GetLineCoding>
 8007f36:	4603      	mov	r3, r0
 8007f38:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007f3a:	7afb      	ldrb	r3, [r7, #11]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d105      	bne.n	8007f4c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f46:	2102      	movs	r1, #2
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007f4c:	7afb      	ldrb	r3, [r7, #11]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f6e:	69db      	ldr	r3, [r3, #28]
 8007f70:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007f78:	2b04      	cmp	r3, #4
 8007f7a:	d877      	bhi.n	800806c <USBH_CDC_Process+0x114>
 8007f7c:	a201      	add	r2, pc, #4	; (adr r2, 8007f84 <USBH_CDC_Process+0x2c>)
 8007f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f82:	bf00      	nop
 8007f84:	08007f99 	.word	0x08007f99
 8007f88:	08007f9f 	.word	0x08007f9f
 8007f8c:	08007fcf 	.word	0x08007fcf
 8007f90:	08008043 	.word	0x08008043
 8007f94:	08008051 	.word	0x08008051
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	e06d      	b.n	800807a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f897 	bl	80080d8 <SetLineCoding>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fae:	7bbb      	ldrb	r3, [r7, #14]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d104      	bne.n	8007fbe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007fbc:	e058      	b.n	8008070 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d055      	beq.n	8008070 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2204      	movs	r2, #4
 8007fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007fcc:	e050      	b.n	8008070 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	3340      	adds	r3, #64	; 0x40
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f860 	bl	800809a <GetLineCoding>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d126      	bne.n	8008032 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ff6:	791b      	ldrb	r3, [r3, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d13b      	bne.n	8008074 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008006:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008008:	429a      	cmp	r2, r3
 800800a:	d133      	bne.n	8008074 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008016:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008018:	429a      	cmp	r2, r3
 800801a:	d12b      	bne.n	8008074 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008024:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008026:	429a      	cmp	r2, r3
 8008028:	d124      	bne.n	8008074 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f958 	bl	80082e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008030:	e020      	b.n	8008074 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d01d      	beq.n	8008074 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2204      	movs	r2, #4
 800803c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008040:	e018      	b.n	8008074 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f867 	bl	8008116 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8da 	bl	8008202 <CDC_ProcessReception>
      break;
 800804e:	e014      	b.n	800807a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008050:	2100      	movs	r1, #0
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 f822 	bl	800909c <USBH_ClrFeature>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800806a:	e005      	b.n	8008078 <USBH_CDC_Process+0x120>

    default:
      break;
 800806c:	bf00      	nop
 800806e:	e004      	b.n	800807a <USBH_CDC_Process+0x122>
      break;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <USBH_CDC_Process+0x122>
      break;
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <USBH_CDC_Process+0x122>
      break;
 8008078:	bf00      	nop

  }

  return status;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	22a1      	movs	r2, #161	; 0xa1
 80080a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2221      	movs	r2, #33	; 0x21
 80080ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2207      	movs	r2, #7
 80080c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2207      	movs	r2, #7
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fb23 	bl	8009714 <USBH_CtlReq>
 80080ce:	4603      	mov	r3, r0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2220      	movs	r2, #32
 80080ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2207      	movs	r2, #7
 80080fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2207      	movs	r2, #7
 8008104:	4619      	mov	r1, r3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fb04 	bl	8009714 <USBH_CtlReq>
 800810c:	4603      	mov	r3, r0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af02      	add	r7, sp, #8
 800811c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008124:	69db      	ldr	r3, [r3, #28]
 8008126:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008128:	2300      	movs	r3, #0
 800812a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008132:	2b01      	cmp	r3, #1
 8008134:	d002      	beq.n	800813c <CDC_ProcessTransmission+0x26>
 8008136:	2b02      	cmp	r3, #2
 8008138:	d023      	beq.n	8008182 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800813a:	e05e      	b.n	80081fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	8b12      	ldrh	r2, [r2, #24]
 8008144:	4293      	cmp	r3, r2
 8008146:	d90b      	bls.n	8008160 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	69d9      	ldr	r1, [r3, #28]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8b1a      	ldrh	r2, [r3, #24]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	7b5b      	ldrb	r3, [r3, #13]
 8008154:	2001      	movs	r0, #1
 8008156:	9000      	str	r0, [sp, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fcea 	bl	8009b32 <USBH_BulkSendData>
 800815e:	e00b      	b.n	8008178 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	7b5b      	ldrb	r3, [r3, #13]
 800816e:	2001      	movs	r0, #1
 8008170:	9000      	str	r0, [sp, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 fcdd 	bl	8009b32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008180:	e03b      	b.n	80081fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	7b5b      	ldrb	r3, [r3, #13]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f002 f801 	bl	800a190 <USBH_LL_GetURBState>
 800818e:	4603      	mov	r3, r0
 8008190:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d128      	bne.n	80081ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	8b12      	ldrh	r2, [r2, #24]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d90e      	bls.n	80081c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	8b12      	ldrh	r2, [r2, #24]
 80081ac:	1a9a      	subs	r2, r3, r2
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	8b12      	ldrh	r2, [r2, #24]
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	61da      	str	r2, [r3, #28]
 80081c0:	e002      	b.n	80081c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081d8:	e00e      	b.n	80081f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f868 	bl	80082b8 <USBH_CDC_TransmitCallback>
      break;
 80081e8:	e006      	b.n	80081f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80081ea:	7afb      	ldrb	r3, [r7, #11]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d103      	bne.n	80081f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80081f8:	bf00      	nop
  }
}
 80081fa:	bf00      	nop
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008214:	2300      	movs	r3, #0
 8008216:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800821e:	2b03      	cmp	r3, #3
 8008220:	d002      	beq.n	8008228 <CDC_ProcessReception+0x26>
 8008222:	2b04      	cmp	r3, #4
 8008224:	d00e      	beq.n	8008244 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008226:	e043      	b.n	80082b0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6a19      	ldr	r1, [r3, #32]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	8b5a      	ldrh	r2, [r3, #26]
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	7b1b      	ldrb	r3, [r3, #12]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 fca1 	bl	8009b7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	2204      	movs	r2, #4
 800823e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008242:	e035      	b.n	80082b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	7b1b      	ldrb	r3, [r3, #12]
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 ffa0 	bl	800a190 <USBH_LL_GetURBState>
 8008250:	4603      	mov	r3, r0
 8008252:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008254:	7cfb      	ldrb	r3, [r7, #19]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d129      	bne.n	80082ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	7b1b      	ldrb	r3, [r3, #12]
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 ff03 	bl	800a06c <USBH_LL_GetLastXferSize>
 8008266:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d016      	beq.n	80082a0 <CDC_ProcessReception+0x9e>
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	8b5b      	ldrh	r3, [r3, #26]
 8008276:	461a      	mov	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4293      	cmp	r3, r2
 800827c:	d910      	bls.n	80082a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1ad2      	subs	r2, r2, r3
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	6a1a      	ldr	r2, [r3, #32]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	441a      	add	r2, r3
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	2203      	movs	r2, #3
 800829a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800829e:	e006      	b.n	80082ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f80f 	bl	80082cc <USBH_CDC_ReceiveCallback>
      break;
 80082ae:	bf00      	nop
  }
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008308:	2302      	movs	r3, #2
 800830a:	e029      	b.n	8008360 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	79fa      	ldrb	r2, [r7, #7]
 8008310:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f81f 	bl	8008368 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	f001 fdd3 	bl	8009f04 <USBH_LL_Init>

  return USBH_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e009      	b.n	800838e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	33e0      	adds	r3, #224	; 0xe0
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	2200      	movs	r2, #0
 8008386:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3301      	adds	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d9f2      	bls.n	800837a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e009      	b.n	80083ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80083a4:	2200      	movs	r2, #0
 80083a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b4:	d3f1      	bcc.n	800839a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2240      	movs	r2, #64	; 0x40
 80083da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	331c      	adds	r3, #28
 8008406:	f44f 7280 	mov.w	r2, #256	; 0x100
 800840a:	2100      	movs	r1, #0
 800840c:	4618      	mov	r0, r3
 800840e:	f002 f84b 	bl	800a4a8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f002 f842 	bl	800a4a8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f203 3326 	addw	r3, r3, #806	; 0x326
 800842a:	2212      	movs	r2, #18
 800842c:	2100      	movs	r1, #0
 800842e:	4618      	mov	r0, r3
 8008430:	f002 f83a 	bl	800a4a8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800843a:	223e      	movs	r2, #62	; 0x3e
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f002 f832 	bl	800a4a8 <memset>

  return USBH_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d016      	beq.n	8008490 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10e      	bne.n	800848a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008472:	1c59      	adds	r1, r3, #1
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	33de      	adds	r3, #222	; 0xde
 800847e:	6839      	ldr	r1, [r7, #0]
 8008480:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
 8008488:	e004      	b.n	8008494 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800848a:	2302      	movs	r3, #2
 800848c:	73fb      	strb	r3, [r7, #15]
 800848e:	e001      	b.n	8008494 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008490:	2302      	movs	r3, #2
 8008492:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	460b      	mov	r3, r1
 80084ac:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80084b8:	78fa      	ldrb	r2, [r7, #3]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d204      	bcs.n	80084c8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	78fa      	ldrb	r2, [r7, #3]
 80084c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80084c6:	e001      	b.n	80084cc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80084c8:	2302      	movs	r3, #2
 80084ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80084da:	b480      	push	{r7}
 80084dc:	b087      	sub	sp, #28
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	4608      	mov	r0, r1
 80084e4:	4611      	mov	r1, r2
 80084e6:	461a      	mov	r2, r3
 80084e8:	4603      	mov	r3, r0
 80084ea:	70fb      	strb	r3, [r7, #3]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70bb      	strb	r3, [r7, #2]
 80084f0:	4613      	mov	r3, r2
 80084f2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008502:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008504:	e025      	b.n	8008552 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	221a      	movs	r2, #26
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	3308      	adds	r3, #8
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	3302      	adds	r3, #2
 8008516:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	795b      	ldrb	r3, [r3, #5]
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	429a      	cmp	r2, r3
 8008520:	d002      	beq.n	8008528 <USBH_FindInterface+0x4e>
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	2bff      	cmp	r3, #255	; 0xff
 8008526:	d111      	bne.n	800854c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800852c:	78ba      	ldrb	r2, [r7, #2]
 800852e:	429a      	cmp	r2, r3
 8008530:	d002      	beq.n	8008538 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008532:	78bb      	ldrb	r3, [r7, #2]
 8008534:	2bff      	cmp	r3, #255	; 0xff
 8008536:	d109      	bne.n	800854c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800853c:	787a      	ldrb	r2, [r7, #1]
 800853e:	429a      	cmp	r2, r3
 8008540:	d002      	beq.n	8008548 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008542:	787b      	ldrb	r3, [r7, #1]
 8008544:	2bff      	cmp	r3, #255	; 0xff
 8008546:	d101      	bne.n	800854c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
 800854a:	e006      	b.n	800855a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	3301      	adds	r3, #1
 8008550:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d9d6      	bls.n	8008506 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008558:	23ff      	movs	r3, #255	; 0xff
}
 800855a:	4618      	mov	r0, r3
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fd04 	bl	8009f7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008574:	2101      	movs	r1, #1
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fe1d 	bl	800a1b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af04      	add	r7, sp, #16
 800858e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008590:	2302      	movs	r3, #2
 8008592:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d102      	bne.n	80085aa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2203      	movs	r2, #3
 80085a8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b0b      	cmp	r3, #11
 80085b2:	f200 81be 	bhi.w	8008932 <USBH_Process+0x3aa>
 80085b6:	a201      	add	r2, pc, #4	; (adr r2, 80085bc <USBH_Process+0x34>)
 80085b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	0800861f 	.word	0x0800861f
 80085c4:	08008687 	.word	0x08008687
 80085c8:	080088cd 	.word	0x080088cd
 80085cc:	08008933 	.word	0x08008933
 80085d0:	0800872b 	.word	0x0800872b
 80085d4:	08008873 	.word	0x08008873
 80085d8:	08008761 	.word	0x08008761
 80085dc:	08008781 	.word	0x08008781
 80085e0:	080087a1 	.word	0x080087a1
 80085e4:	080087e5 	.word	0x080087e5
 80085e8:	080088b5 	.word	0x080088b5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 819e 	beq.w	8008936 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008600:	20c8      	movs	r0, #200	; 0xc8
 8008602:	f001 fe22 	bl	800a24a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f001 fd15 	bl	800a036 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800861c:	e18b      	b.n	8008936 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008624:	2b01      	cmp	r3, #1
 8008626:	d107      	bne.n	8008638 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2202      	movs	r2, #2
 8008634:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008636:	e18d      	b.n	8008954 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800863e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008642:	d914      	bls.n	800866e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800864a:	3301      	adds	r3, #1
 800864c:	b2da      	uxtb	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800865a:	2b03      	cmp	r3, #3
 800865c:	d903      	bls.n	8008666 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220d      	movs	r2, #13
 8008662:	701a      	strb	r2, [r3, #0]
      break;
 8008664:	e176      	b.n	8008954 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	701a      	strb	r2, [r3, #0]
      break;
 800866c:	e172      	b.n	8008954 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008674:	f103 020a 	add.w	r2, r3, #10
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800867e:	200a      	movs	r0, #10
 8008680:	f001 fde3 	bl	800a24a <USBH_Delay>
      break;
 8008684:	e166      	b.n	8008954 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008696:	2104      	movs	r1, #4
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800869c:	2064      	movs	r0, #100	; 0x64
 800869e:	f001 fdd4 	bl	800a24a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f001 fca0 	bl	8009fe8 <USBH_LL_GetSpeed>
 80086a8:	4603      	mov	r3, r0
 80086aa:	461a      	mov	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2205      	movs	r2, #5
 80086b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80086b8:	2100      	movs	r1, #0
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f001 faab 	bl	8009c16 <USBH_AllocPipe>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80086c8:	2180      	movs	r1, #128	; 0x80
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 faa3 	bl	8009c16 <USBH_AllocPipe>
 80086d0:	4603      	mov	r3, r0
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	7919      	ldrb	r1, [r3, #4]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80086ec:	b292      	uxth	r2, r2
 80086ee:	9202      	str	r2, [sp, #8]
 80086f0:	2200      	movs	r2, #0
 80086f2:	9201      	str	r2, [sp, #4]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4603      	mov	r3, r0
 80086f8:	2280      	movs	r2, #128	; 0x80
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f001 fa5c 	bl	8009bb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7959      	ldrb	r1, [r3, #5]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008714:	b292      	uxth	r2, r2
 8008716:	9202      	str	r2, [sp, #8]
 8008718:	2200      	movs	r2, #0
 800871a:	9201      	str	r2, [sp, #4]
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	4603      	mov	r3, r0
 8008720:	2200      	movs	r2, #0
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fa48 	bl	8009bb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008728:	e114      	b.n	8008954 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f918 	bl	8008960 <USBH_HandleEnum>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	f040 80fe 	bne.w	800893a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800874c:	2b01      	cmp	r3, #1
 800874e:	d103      	bne.n	8008758 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2208      	movs	r2, #8
 8008754:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008756:	e0f0      	b.n	800893a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2207      	movs	r2, #7
 800875c:	701a      	strb	r2, [r3, #0]
      break;
 800875e:	e0ec      	b.n	800893a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008766:	2b00      	cmp	r3, #0
 8008768:	f000 80e9 	beq.w	800893e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008772:	2101      	movs	r1, #1
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2208      	movs	r2, #8
 800877c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800877e:	e0de      	b.n	800893e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008786:	b29b      	uxth	r3, r3
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fc3f 	bl	800900e <USBH_SetCfg>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 80d5 	bne.w	8008942 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2209      	movs	r2, #9
 800879c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800879e:	e0d0      	b.n	8008942 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d016      	beq.n	80087dc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80087ae:	2101      	movs	r1, #1
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fc4f 	bl	8009054 <USBH_SetFeature>
 80087b6:	4603      	mov	r3, r0
 80087b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	220a      	movs	r2, #10
 80087c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087c8:	e0bd      	b.n	8008946 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	f040 80b9 	bne.w	8008946 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	220a      	movs	r2, #10
 80087d8:	701a      	strb	r2, [r3, #0]
      break;
 80087da:	e0b4      	b.n	8008946 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	220a      	movs	r2, #10
 80087e0:	701a      	strb	r2, [r3, #0]
      break;
 80087e2:	e0b0      	b.n	8008946 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 80ad 	beq.w	800894a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e016      	b.n	800882c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80087fe:	7bfa      	ldrb	r2, [r7, #15]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	32de      	adds	r2, #222	; 0xde
 8008804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008808:	791a      	ldrb	r2, [r3, #4]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008810:	429a      	cmp	r2, r3
 8008812:	d108      	bne.n	8008826 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008814:	7bfa      	ldrb	r2, [r7, #15]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32de      	adds	r2, #222	; 0xde
 800881a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008824:	e005      	b.n	8008832 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	3301      	adds	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0e5      	beq.n	80087fe <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d016      	beq.n	800886a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d109      	bne.n	8008862 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2206      	movs	r2, #6
 8008852:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800885a:	2103      	movs	r1, #3
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008860:	e073      	b.n	800894a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	220d      	movs	r2, #13
 8008866:	701a      	strb	r2, [r3, #0]
      break;
 8008868:	e06f      	b.n	800894a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	220d      	movs	r2, #13
 800886e:	701a      	strb	r2, [r3, #0]
      break;
 8008870:	e06b      	b.n	800894a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d017      	beq.n	80088ac <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
 8008888:	4603      	mov	r3, r0
 800888a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d103      	bne.n	800889c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	220b      	movs	r2, #11
 8008898:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800889a:	e058      	b.n	800894e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d154      	bne.n	800894e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	220d      	movs	r2, #13
 80088a8:	701a      	strb	r2, [r3, #0]
      break;
 80088aa:	e050      	b.n	800894e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	220d      	movs	r2, #13
 80088b0:	701a      	strb	r2, [r3, #0]
      break;
 80088b2:	e04c      	b.n	800894e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d049      	beq.n	8008952 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
      }
      break;
 80088ca:	e042      	b.n	8008952 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f7ff fd47 	bl	8008368 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d009      	beq.n	80088f8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d005      	beq.n	800890e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008908:	2105      	movs	r1, #5
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b01      	cmp	r3, #1
 8008918:	d107      	bne.n	800892a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fe1f 	bl	8008566 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008928:	e014      	b.n	8008954 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 fb26 	bl	8009f7c <USBH_LL_Start>
      break;
 8008930:	e010      	b.n	8008954 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008932:	bf00      	nop
 8008934:	e00e      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 8008936:	bf00      	nop
 8008938:	e00c      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 800893a:	bf00      	nop
 800893c:	e00a      	b.n	8008954 <USBH_Process+0x3cc>
    break;
 800893e:	bf00      	nop
 8008940:	e008      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 8008942:	bf00      	nop
 8008944:	e006      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 8008946:	bf00      	nop
 8008948:	e004      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 800894a:	bf00      	nop
 800894c:	e002      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 800894e:	bf00      	nop
 8008950:	e000      	b.n	8008954 <USBH_Process+0x3cc>
      break;
 8008952:	bf00      	nop
  }
  return USBH_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop

08008960 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af04      	add	r7, sp, #16
 8008966:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800896c:	2301      	movs	r3, #1
 800896e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b07      	cmp	r3, #7
 8008976:	f200 81c1 	bhi.w	8008cfc <USBH_HandleEnum+0x39c>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <USBH_HandleEnum+0x20>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	080089a1 	.word	0x080089a1
 8008984:	08008a5f 	.word	0x08008a5f
 8008988:	08008ac9 	.word	0x08008ac9
 800898c:	08008b57 	.word	0x08008b57
 8008990:	08008bc1 	.word	0x08008bc1
 8008994:	08008c31 	.word	0x08008c31
 8008998:	08008c77 	.word	0x08008c77
 800899c:	08008cbd 	.word	0x08008cbd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80089a0:	2108      	movs	r1, #8
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fa50 	bl	8008e48 <USBH_Get_DevDesc>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d130      	bne.n	8008a14 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	7919      	ldrb	r1, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80089d6:	b292      	uxth	r2, r2
 80089d8:	9202      	str	r2, [sp, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	9201      	str	r2, [sp, #4]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4603      	mov	r3, r0
 80089e2:	2280      	movs	r2, #128	; 0x80
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f8e7 	bl	8009bb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	7959      	ldrb	r1, [r3, #5]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089fe:	b292      	uxth	r2, r2
 8008a00:	9202      	str	r2, [sp, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	9201      	str	r2, [sp, #4]
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 f8d3 	bl	8009bb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a12:	e175      	b.n	8008d00 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	f040 8172 	bne.w	8008d00 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a22:	3301      	adds	r3, #1
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a32:	2b03      	cmp	r3, #3
 8008a34:	d903      	bls.n	8008a3e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	220d      	movs	r2, #13
 8008a3a:	701a      	strb	r2, [r3, #0]
      break;
 8008a3c:	e160      	b.n	8008d00 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	795b      	ldrb	r3, [r3, #5]
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f001 f907 	bl	8009c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 f901 	bl	8009c58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
      break;
 8008a5c:	e150      	b.n	8008d00 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008a5e:	2112      	movs	r1, #18
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f9f1 	bl	8008e48 <USBH_Get_DevDesc>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2202      	movs	r2, #2
 8008a74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a76:	e145      	b.n	8008d04 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	f040 8142 	bne.w	8008d04 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a86:	3301      	adds	r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d903      	bls.n	8008aa2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	220d      	movs	r2, #13
 8008a9e:	701a      	strb	r2, [r3, #0]
      break;
 8008aa0:	e130      	b.n	8008d04 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	795b      	ldrb	r3, [r3, #5]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 f8d5 	bl	8009c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	791b      	ldrb	r3, [r3, #4]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 f8cf 	bl	8009c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
      break;
 8008ac6:	e11d      	b.n	8008d04 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ac8:	2101      	movs	r1, #1
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fa7b 	bl	8008fc6 <USBH_SetAddress>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d132      	bne.n	8008b40 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008ada:	2002      	movs	r0, #2
 8008adc:	f001 fbb5 	bl	800a24a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2203      	movs	r2, #3
 8008aec:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	7919      	ldrb	r1, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b02:	b292      	uxth	r2, r2
 8008b04:	9202      	str	r2, [sp, #8]
 8008b06:	2200      	movs	r2, #0
 8008b08:	9201      	str	r2, [sp, #4]
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2280      	movs	r2, #128	; 0x80
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f001 f851 	bl	8009bb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	7959      	ldrb	r1, [r3, #5]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008b2a:	b292      	uxth	r2, r2
 8008b2c:	9202      	str	r2, [sp, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	9201      	str	r2, [sp, #4]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	4603      	mov	r3, r0
 8008b36:	2200      	movs	r2, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 f83d 	bl	8009bb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008b3e:	e0e3      	b.n	8008d08 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	f040 80e0 	bne.w	8008d08 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	220d      	movs	r2, #13
 8008b4c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	705a      	strb	r2, [r3, #1]
      break;
 8008b54:	e0d8      	b.n	8008d08 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008b56:	2109      	movs	r1, #9
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f9a1 	bl	8008ea0 <USBH_Get_CfgDesc>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b62:	7bbb      	ldrb	r3, [r7, #14]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2204      	movs	r2, #4
 8008b6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b6e:	e0cd      	b.n	8008d0c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	f040 80ca 	bne.w	8008d0c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b7e:	3301      	adds	r3, #1
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b8e:	2b03      	cmp	r3, #3
 8008b90:	d903      	bls.n	8008b9a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	220d      	movs	r2, #13
 8008b96:	701a      	strb	r2, [r3, #0]
      break;
 8008b98:	e0b8      	b.n	8008d0c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	795b      	ldrb	r3, [r3, #5]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 f859 	bl	8009c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	791b      	ldrb	r3, [r3, #4]
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 f853 	bl	8009c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
      break;
 8008bbe:	e0a5      	b.n	8008d0c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f969 	bl	8008ea0 <USBH_Get_CfgDesc>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d103      	bne.n	8008be0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2205      	movs	r2, #5
 8008bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008bde:	e097      	b.n	8008d10 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	f040 8094 	bne.w	8008d10 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bee:	3301      	adds	r3, #1
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d903      	bls.n	8008c0a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	220d      	movs	r2, #13
 8008c06:	701a      	strb	r2, [r3, #0]
      break;
 8008c08:	e082      	b.n	8008d10 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	795b      	ldrb	r3, [r3, #5]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 f821 	bl	8009c58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	791b      	ldrb	r3, [r3, #4]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f81b 	bl	8009c58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
      break;
 8008c2e:	e06f      	b.n	8008d10 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d019      	beq.n	8008c6e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008c46:	23ff      	movs	r3, #255	; 0xff
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f953 	bl	8008ef4 <USBH_Get_StringDesc>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c5e:	e059      	b.n	8008d14 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c60:	7bbb      	ldrb	r3, [r7, #14]
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d156      	bne.n	8008d14 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2206      	movs	r2, #6
 8008c6a:	705a      	strb	r2, [r3, #1]
      break;
 8008c6c:	e052      	b.n	8008d14 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2206      	movs	r2, #6
 8008c72:	705a      	strb	r2, [r3, #1]
      break;
 8008c74:	e04e      	b.n	8008d14 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d019      	beq.n	8008cb4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c8c:	23ff      	movs	r3, #255	; 0xff
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f930 	bl	8008ef4 <USBH_Get_StringDesc>
 8008c94:	4603      	mov	r3, r0
 8008c96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d103      	bne.n	8008ca6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ca4:	e038      	b.n	8008d18 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d135      	bne.n	8008d18 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2207      	movs	r2, #7
 8008cb0:	705a      	strb	r2, [r3, #1]
      break;
 8008cb2:	e031      	b.n	8008d18 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2207      	movs	r2, #7
 8008cb8:	705a      	strb	r2, [r3, #1]
      break;
 8008cba:	e02d      	b.n	8008d18 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d017      	beq.n	8008cf6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008cd2:	23ff      	movs	r3, #255	; 0xff
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f90d 	bl	8008ef4 <USBH_Get_StringDesc>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008ce8:	e018      	b.n	8008d1c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	d115      	bne.n	8008d1c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf4:	e012      	b.n	8008d1c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	e00f      	b.n	8008d1c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e00e      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d00:	bf00      	nop
 8008d02:	e00c      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d04:	bf00      	nop
 8008d06:	e00a      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d08:	bf00      	nop
 8008d0a:	e008      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d0c:	bf00      	nop
 8008d0e:	e006      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d10:	bf00      	nop
 8008d12:	e004      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d14:	bf00      	nop
 8008d16:	e002      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d18:	bf00      	nop
 8008d1a:	e000      	b.n	8008d1e <USBH_HandleEnum+0x3be>
      break;
 8008d1c:	bf00      	nop
  }
  return Status;
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f804 	bl	8008d6a <USBH_HandleSof>
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b082      	sub	sp, #8
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b0b      	cmp	r3, #11
 8008d7a:	d10a      	bne.n	8008d92 <USBH_HandleSof+0x28>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d005      	beq.n	8008d92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	4798      	blx	r3
  }
}
 8008d92:	bf00      	nop
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008daa:	bf00      	nop
}
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008dc6:	bf00      	nop
}
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f001 f8c6 	bl	8009fb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	791b      	ldrb	r3, [r3, #4]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 ff13 	bl	8009c58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	795b      	ldrb	r3, [r3, #5]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 ff0d 	bl	8009c58 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e5a:	d901      	bls.n	8008e60 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e01b      	b.n	8008e98 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008e66:	887b      	ldrh	r3, [r7, #2]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e70:	2100      	movs	r1, #0
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f872 	bl	8008f5c <USBH_GetDescriptor>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f929 	bl	80090e4 <USBH_ParseDevDesc>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af02      	add	r7, sp, #8
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	331c      	adds	r3, #28
 8008eb0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008eb2:	887b      	ldrh	r3, [r7, #2]
 8008eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eb8:	d901      	bls.n	8008ebe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e016      	b.n	8008eec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ebe:	887b      	ldrh	r3, [r7, #2]
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ec8:	2100      	movs	r1, #0
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f846 	bl	8008f5c <USBH_GetDescriptor>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008eda:	887b      	ldrh	r3, [r7, #2]
 8008edc:	461a      	mov	r2, r3
 8008ede:	68b9      	ldr	r1, [r7, #8]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f9b3 	bl	800924c <USBH_ParseCfgDesc>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b088      	sub	sp, #32
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	461a      	mov	r2, r3
 8008f00:	460b      	mov	r3, r1
 8008f02:	72fb      	strb	r3, [r7, #11]
 8008f04:	4613      	mov	r3, r2
 8008f06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008f08:	893b      	ldrh	r3, [r7, #8]
 8008f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f0e:	d802      	bhi.n	8008f16 <USBH_Get_StringDesc+0x22>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e01c      	b.n	8008f54 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008f22:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008f2a:	893b      	ldrh	r3, [r7, #8]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	2100      	movs	r1, #0
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	f000 f812 	bl	8008f5c <USBH_GetDescriptor>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008f3c:	7dfb      	ldrb	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d107      	bne.n	8008f52 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f48:	893a      	ldrh	r2, [r7, #8]
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fb93 	bl	8009678 <USBH_ParseStringDesc>
  }

  return status;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	607b      	str	r3, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	72fb      	strb	r3, [r7, #11]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	789b      	ldrb	r3, [r3, #2]
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d11c      	bne.n	8008fb0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2206      	movs	r2, #6
 8008f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	893a      	ldrh	r2, [r7, #8]
 8008f8c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f8e:	893b      	ldrh	r3, [r7, #8]
 8008f90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f98:	d104      	bne.n	8008fa4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f240 4209 	movw	r2, #1033	; 0x409
 8008fa0:	829a      	strh	r2, [r3, #20]
 8008fa2:	e002      	b.n	8008faa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8b3a      	ldrh	r2, [r7, #24]
 8008fae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008fb0:	8b3b      	ldrh	r3, [r7, #24]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	68f8      	ldr	r0, [r7, #12]
 8008fb8:	f000 fbac 	bl	8009714 <USBH_CtlReq>
 8008fbc:	4603      	mov	r3, r0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b082      	sub	sp, #8
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	789b      	ldrb	r3, [r3, #2]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d10f      	bne.n	8008ffa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2205      	movs	r2, #5
 8008fe4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fb88 	bl	8009714 <USBH_CtlReq>
 8009004:	4603      	mov	r3, r0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	789b      	ldrb	r3, [r3, #2]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d10e      	bne.n	8009040 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2209      	movs	r2, #9
 800902c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fb65 	bl	8009714 <USBH_CtlReq>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	789b      	ldrb	r3, [r3, #2]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d10f      	bne.n	8009088 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2203      	movs	r2, #3
 8009072:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 fb41 	bl	8009714 <USBH_CtlReq>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	789b      	ldrb	r3, [r3, #2]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d10f      	bne.n	80090d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80090d0:	2200      	movs	r2, #0
 80090d2:	2100      	movs	r1, #0
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fb1d 	bl	8009714 <USBH_CtlReq>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4613      	mov	r3, r2
 80090f0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f203 3326 	addw	r3, r3, #806	; 0x326
 80090f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009104:	2302      	movs	r3, #2
 8009106:	e098      	b.n	800923a <USBH_ParseDevDesc+0x156>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	785a      	ldrb	r2, [r3, #1]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	3302      	adds	r3, #2
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b29a      	uxth	r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	3303      	adds	r3, #3
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	b29b      	uxth	r3, r3
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	b29b      	uxth	r3, r3
 800912c:	4313      	orrs	r3, r2
 800912e:	b29a      	uxth	r2, r3
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	791a      	ldrb	r2, [r3, #4]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	795a      	ldrb	r2, [r3, #5]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	799a      	ldrb	r2, [r3, #6]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	79da      	ldrb	r2, [r3, #7]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <USBH_ParseDevDesc+0x84>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009164:	2b01      	cmp	r3, #1
 8009166:	d11b      	bne.n	80091a0 <USBH_ParseDevDesc+0xbc>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	79db      	ldrb	r3, [r3, #7]
 800916c:	2b20      	cmp	r3, #32
 800916e:	dc0f      	bgt.n	8009190 <USBH_ParseDevDesc+0xac>
 8009170:	2b08      	cmp	r3, #8
 8009172:	db0f      	blt.n	8009194 <USBH_ParseDevDesc+0xb0>
 8009174:	3b08      	subs	r3, #8
 8009176:	4a34      	ldr	r2, [pc, #208]	; (8009248 <USBH_ParseDevDesc+0x164>)
 8009178:	fa22 f303 	lsr.w	r3, r2, r3
 800917c:	f003 0301 	and.w	r3, r3, #1
 8009180:	2b00      	cmp	r3, #0
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <USBH_ParseDevDesc+0xb8>
 800918e:	e001      	b.n	8009194 <USBH_ParseDevDesc+0xb0>
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d003      	beq.n	800919c <USBH_ParseDevDesc+0xb8>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2208      	movs	r2, #8
 8009198:	71da      	strb	r2, [r3, #7]
        break;
 800919a:	e000      	b.n	800919e <USBH_ParseDevDesc+0xba>
        break;
 800919c:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800919e:	e00e      	b.n	80091be <USBH_ParseDevDesc+0xda>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d107      	bne.n	80091ba <USBH_ParseDevDesc+0xd6>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	79db      	ldrb	r3, [r3, #7]
 80091ae:	2b08      	cmp	r3, #8
 80091b0:	d005      	beq.n	80091be <USBH_ParseDevDesc+0xda>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2208      	movs	r2, #8
 80091b6:	71da      	strb	r2, [r3, #7]
 80091b8:	e001      	b.n	80091be <USBH_ParseDevDesc+0xda>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80091ba:	2303      	movs	r3, #3
 80091bc:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80091be:	88fb      	ldrh	r3, [r7, #6]
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d939      	bls.n	8009238 <USBH_ParseDevDesc+0x154>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	3308      	adds	r3, #8
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	3309      	adds	r3, #9
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	021b      	lsls	r3, r3, #8
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	4313      	orrs	r3, r2
 80091da:	b29a      	uxth	r2, r3
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	330a      	adds	r3, #10
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	330b      	adds	r3, #11
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	021b      	lsls	r3, r3, #8
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4313      	orrs	r3, r2
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	330c      	adds	r3, #12
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	b29a      	uxth	r2, r3
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	330d      	adds	r3, #13
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	021b      	lsls	r3, r3, #8
 800920e:	b29b      	uxth	r3, r3
 8009210:	4313      	orrs	r3, r2
 8009212:	b29a      	uxth	r2, r3
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	7b9a      	ldrb	r2, [r3, #14]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	7bda      	ldrb	r2, [r3, #15]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	7c1a      	ldrb	r2, [r3, #16]
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	7c5a      	ldrb	r2, [r3, #17]
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009238:	7dfb      	ldrb	r3, [r7, #23]
}
 800923a:	4618      	mov	r0, r3
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	01000101 	.word	0x01000101

0800924c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08c      	sub	sp, #48	; 0x30
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009260:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  if (buf == NULL)
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	e0db      	b.n	8009436 <USBH_ParseCfgDesc+0x1ea>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	785a      	ldrb	r2, [r3, #1]
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	3302      	adds	r3, #2
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	b29a      	uxth	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	3303      	adds	r3, #3
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	021b      	lsls	r3, r3, #8
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	4313      	orrs	r3, r2
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ae:	bf28      	it	cs
 80092b0:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	791a      	ldrb	r2, [r3, #4]
 80092be:	6a3b      	ldr	r3, [r7, #32]
 80092c0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	795a      	ldrb	r2, [r3, #5]
 80092c6:	6a3b      	ldr	r3, [r7, #32]
 80092c8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	799a      	ldrb	r2, [r3, #6]
 80092ce:	6a3b      	ldr	r3, [r7, #32]
 80092d0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	79da      	ldrb	r2, [r3, #7]
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	7a1a      	ldrb	r2, [r3, #8]
 80092de:	6a3b      	ldr	r3, [r7, #32]
 80092e0:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d002      	beq.n	80092f0 <USBH_ParseCfgDesc+0xa4>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	2209      	movs	r2, #9
 80092ee:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	2b09      	cmp	r3, #9
 80092f4:	f240 809d 	bls.w	8009432 <USBH_ParseCfgDesc+0x1e6>
  {
    ptr = USB_LEN_CFG_DESC;
 80092f8:	2309      	movs	r3, #9
 80092fa:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80092fc:	2300      	movs	r3, #0
 80092fe:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009300:	e081      	b.n	8009406 <USBH_ParseCfgDesc+0x1ba>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009302:	f107 0316 	add.w	r3, r7, #22
 8009306:	4619      	mov	r1, r3
 8009308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930a:	f000 f9e8 	bl	80096de <USBH_GetNextDesc>
 800930e:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b04      	cmp	r3, #4
 8009316:	d176      	bne.n	8009406 <USBH_ParseCfgDesc+0x1ba>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b09      	cmp	r3, #9
 800931e:	d002      	beq.n	8009326 <USBH_ParseCfgDesc+0xda>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	2209      	movs	r2, #9
 8009324:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800932a:	221a      	movs	r2, #26
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	3308      	adds	r3, #8
 8009332:	6a3a      	ldr	r2, [r7, #32]
 8009334:	4413      	add	r3, r2
 8009336:	3302      	adds	r3, #2
 8009338:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800933a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800933c:	69f8      	ldr	r0, [r7, #28]
 800933e:	f000 f87e 	bl	800943e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009348:	2300      	movs	r3, #0
 800934a:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800934c:	e043      	b.n	80093d6 <USBH_ParseCfgDesc+0x18a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800934e:	f107 0316 	add.w	r3, r7, #22
 8009352:	4619      	mov	r1, r3
 8009354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009356:	f000 f9c2 	bl	80096de <USBH_GetNextDesc>
 800935a:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b05      	cmp	r3, #5
 8009362:	d138      	bne.n	80093d6 <USBH_ParseCfgDesc+0x18a>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	795b      	ldrb	r3, [r3, #5]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d113      	bne.n	8009394 <USBH_ParseCfgDesc+0x148>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009370:	2b02      	cmp	r3, #2
 8009372:	d003      	beq.n	800937c <USBH_ParseCfgDesc+0x130>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	799b      	ldrb	r3, [r3, #6]
 8009378:	2b03      	cmp	r3, #3
 800937a:	d10b      	bne.n	8009394 <USBH_ParseCfgDesc+0x148>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	79db      	ldrb	r3, [r3, #7]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10b      	bne.n	800939c <USBH_ParseCfgDesc+0x150>
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b09      	cmp	r3, #9
 800938a:	d007      	beq.n	800939c <USBH_ParseCfgDesc+0x150>
              {
                pdesc->bLength = 0x09U;
 800938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800938e:	2209      	movs	r2, #9
 8009390:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009392:	e003      	b.n	800939c <USBH_ParseCfgDesc+0x150>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009396:	2207      	movs	r2, #7
 8009398:	701a      	strb	r2, [r3, #0]
 800939a:	e000      	b.n	800939e <USBH_ParseCfgDesc+0x152>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800939c:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800939e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80093a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093a6:	3201      	adds	r2, #1
 80093a8:	00d2      	lsls	r2, r2, #3
 80093aa:	211a      	movs	r1, #26
 80093ac:	fb01 f303 	mul.w	r3, r1, r3
 80093b0:	4413      	add	r3, r2
 80093b2:	3308      	adds	r3, #8
 80093b4:	6a3a      	ldr	r2, [r7, #32]
 80093b6:	4413      	add	r3, r2
 80093b8:	3304      	adds	r3, #4
 80093ba:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80093bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093be:	69b9      	ldr	r1, [r7, #24]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f870 	bl	80094a6 <USBH_ParseEPDesc>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80093cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80093d0:	3301      	adds	r3, #1
 80093d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093de:	429a      	cmp	r2, r3
 80093e0:	d204      	bcs.n	80093ec <USBH_ParseCfgDesc+0x1a0>
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	885a      	ldrh	r2, [r3, #2]
 80093e6:	8afb      	ldrh	r3, [r7, #22]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d8b0      	bhi.n	800934e <USBH_ParseCfgDesc+0x102>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	791b      	ldrb	r3, [r3, #4]
 80093f0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d201      	bcs.n	80093fc <USBH_ParseCfgDesc+0x1b0>
        {
          return USBH_NOT_SUPPORTED;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e01c      	b.n	8009436 <USBH_ParseCfgDesc+0x1ea>
        }

        if_ix++;
 80093fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009400:	3301      	adds	r3, #1
 8009402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800940a:	2b01      	cmp	r3, #1
 800940c:	d805      	bhi.n	800941a <USBH_ParseCfgDesc+0x1ce>
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	885a      	ldrh	r2, [r3, #2]
 8009412:	8afb      	ldrh	r3, [r7, #22]
 8009414:	429a      	cmp	r2, r3
 8009416:	f63f af74 	bhi.w	8009302 <USBH_ParseCfgDesc+0xb6>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800941a:	6a3b      	ldr	r3, [r7, #32]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	2b02      	cmp	r3, #2
 8009420:	bf28      	it	cs
 8009422:	2302      	movcs	r3, #2
 8009424:	b2db      	uxtb	r3, r3
 8009426:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800942a:	429a      	cmp	r2, r3
 800942c:	d201      	bcs.n	8009432 <USBH_ParseCfgDesc+0x1e6>
    {
      return USBH_NOT_SUPPORTED;
 800942e:	2303      	movs	r3, #3
 8009430:	e001      	b.n	8009436 <USBH_ParseCfgDesc+0x1ea>
    }
  }

  return status;
 8009432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009436:	4618      	mov	r0, r3
 8009438:	3730      	adds	r7, #48	; 0x30
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781a      	ldrb	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	785a      	ldrb	r2, [r3, #1]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	789a      	ldrb	r2, [r3, #2]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	78da      	ldrb	r2, [r3, #3]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	3304      	adds	r3, #4
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b02      	cmp	r3, #2
 8009470:	bf28      	it	cs
 8009472:	2302      	movcs	r3, #2
 8009474:	b2da      	uxtb	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	795a      	ldrb	r2, [r3, #5]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	799a      	ldrb	r2, [r3, #6]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	79da      	ldrb	r2, [r3, #7]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	7a1a      	ldrb	r2, [r3, #8]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	721a      	strb	r2, [r3, #8]
}
 800949a:	bf00      	nop
 800949c:	370c      	adds	r7, #12
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b087      	sub	sp, #28
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	785a      	ldrb	r2, [r3, #1]
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	789a      	ldrb	r2, [r3, #2]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	78da      	ldrb	r2, [r3, #3]
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	3304      	adds	r3, #4
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3305      	adds	r3, #5
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	021b      	lsls	r3, r3, #8
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	4313      	orrs	r3, r2
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	799a      	ldrb	r2, [r3, #6]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	889b      	ldrh	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d009      	beq.n	8009516 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800950a:	d804      	bhi.n	8009516 <USBH_ParseEPDesc+0x70>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009514:	d901      	bls.n	800951a <USBH_ParseEPDesc+0x74>
  {
    status = USBH_NOT_SUPPORTED;
 8009516:	2303      	movs	r3, #3
 8009518:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009520:	2b00      	cmp	r3, #0
 8009522:	d136      	bne.n	8009592 <USBH_ParseEPDesc+0xec>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	78db      	ldrb	r3, [r3, #3]
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d108      	bne.n	8009542 <USBH_ParseEPDesc+0x9c>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	889b      	ldrh	r3, [r3, #4]
 8009534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009538:	f240 8097 	bls.w	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800953c:	2303      	movs	r3, #3
 800953e:	75fb      	strb	r3, [r7, #23]
 8009540:	e093      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	78db      	ldrb	r3, [r3, #3]
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	2b00      	cmp	r3, #0
 800954c:	d107      	bne.n	800955e <USBH_ParseEPDesc+0xb8>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	889b      	ldrh	r3, [r3, #4]
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	f240 8089 	bls.w	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009558:	2303      	movs	r3, #3
 800955a:	75fb      	strb	r3, [r7, #23]
 800955c:	e085      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	78db      	ldrb	r3, [r3, #3]
 8009562:	f003 0303 	and.w	r3, r3, #3
 8009566:	2b01      	cmp	r3, #1
 8009568:	d005      	beq.n	8009576 <USBH_ParseEPDesc+0xd0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	78db      	ldrb	r3, [r3, #3]
 800956e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009572:	2b03      	cmp	r3, #3
 8009574:	d10a      	bne.n	800958c <USBH_ParseEPDesc+0xe6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	799b      	ldrb	r3, [r3, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <USBH_ParseEPDesc+0xe0>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	799b      	ldrb	r3, [r3, #6]
 8009582:	2b10      	cmp	r3, #16
 8009584:	d970      	bls.n	8009668 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009586:	2303      	movs	r3, #3
 8009588:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800958a:	e06d      	b.n	8009668 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800958c:	2303      	movs	r3, #3
 800958e:	75fb      	strb	r3, [r7, #23]
 8009590:	e06b      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009598:	2b01      	cmp	r3, #1
 800959a:	d13c      	bne.n	8009616 <USBH_ParseEPDesc+0x170>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	78db      	ldrb	r3, [r3, #3]
 80095a0:	f003 0303 	and.w	r3, r3, #3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d005      	beq.n	80095b4 <USBH_ParseEPDesc+0x10e>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	78db      	ldrb	r3, [r3, #3]
 80095ac:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d106      	bne.n	80095c2 <USBH_ParseEPDesc+0x11c>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	889b      	ldrh	r3, [r3, #4]
 80095b8:	2b40      	cmp	r3, #64	; 0x40
 80095ba:	d956      	bls.n	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80095bc:	2303      	movs	r3, #3
 80095be:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80095c0:	e053      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	78db      	ldrb	r3, [r3, #3]
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d10e      	bne.n	80095ec <USBH_ParseEPDesc+0x146>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	799b      	ldrb	r3, [r3, #6]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->bInterval > 0x10U) ||
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80095da:	2b10      	cmp	r3, #16
 80095dc:	d803      	bhi.n	80095e6 <USBH_ParseEPDesc+0x140>
          (ep_descriptor->wMaxPacketSize > 64U))
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80095e2:	2b40      	cmp	r3, #64	; 0x40
 80095e4:	d941      	bls.n	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 80095e6:	2303      	movs	r3, #3
 80095e8:	75fb      	strb	r3, [r7, #23]
 80095ea:	e03e      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	78db      	ldrb	r3, [r3, #3]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d10b      	bne.n	8009610 <USBH_ParseEPDesc+0x16a>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	799b      	ldrb	r3, [r3, #6]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d004      	beq.n	800960a <USBH_ParseEPDesc+0x164>
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	889b      	ldrh	r3, [r3, #4]
 8009604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009608:	d32f      	bcc.n	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 800960a:	2303      	movs	r3, #3
 800960c:	75fb      	strb	r3, [r7, #23]
 800960e:	e02c      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009610:	2303      	movs	r3, #3
 8009612:	75fb      	strb	r3, [r7, #23]
 8009614:	e029      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800961c:	2b02      	cmp	r3, #2
 800961e:	d120      	bne.n	8009662 <USBH_ParseEPDesc+0x1bc>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	78db      	ldrb	r3, [r3, #3]
 8009624:	f003 0303 	and.w	r3, r3, #3
 8009628:	2b00      	cmp	r3, #0
 800962a:	d106      	bne.n	800963a <USBH_ParseEPDesc+0x194>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	889b      	ldrh	r3, [r3, #4]
 8009630:	2b08      	cmp	r3, #8
 8009632:	d01a      	beq.n	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009634:	2303      	movs	r3, #3
 8009636:	75fb      	strb	r3, [r7, #23]
 8009638:	e017      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	78db      	ldrb	r3, [r3, #3]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	2b03      	cmp	r3, #3
 8009644:	d10a      	bne.n	800965c <USBH_ParseEPDesc+0x1b6>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	799b      	ldrb	r3, [r3, #6]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <USBH_ParseEPDesc+0x1b0>
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	889b      	ldrh	r3, [r3, #4]
 8009652:	2b08      	cmp	r3, #8
 8009654:	d909      	bls.n	800966a <USBH_ParseEPDesc+0x1c4>
      {
        status = USBH_NOT_SUPPORTED;
 8009656:	2303      	movs	r3, #3
 8009658:	75fb      	strb	r3, [r7, #23]
 800965a:	e006      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800965c:	2303      	movs	r3, #3
 800965e:	75fb      	strb	r3, [r7, #23]
 8009660:	e003      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009662:	2303      	movs	r3, #3
 8009664:	75fb      	strb	r3, [r7, #23]
 8009666:	e000      	b.n	800966a <USBH_ParseEPDesc+0x1c4>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009668:	bf00      	nop
  }

  return status;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
}
 800966c:	4618      	mov	r0, r3
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr

08009678 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009678:	b480      	push	{r7}
 800967a:	b087      	sub	sp, #28
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b03      	cmp	r3, #3
 800968e:	d120      	bne.n	80096d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	1e9a      	subs	r2, r3, #2
 8009696:	88fb      	ldrh	r3, [r7, #6]
 8009698:	4293      	cmp	r3, r2
 800969a:	bf28      	it	cs
 800969c:	4613      	movcs	r3, r2
 800969e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	3302      	adds	r3, #2
 80096a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80096a6:	2300      	movs	r3, #0
 80096a8:	82fb      	strh	r3, [r7, #22]
 80096aa:	e00b      	b.n	80096c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80096ac:	8afb      	ldrh	r3, [r7, #22]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80096be:	8afb      	ldrh	r3, [r7, #22]
 80096c0:	3302      	adds	r3, #2
 80096c2:	82fb      	strh	r3, [r7, #22]
 80096c4:	8afa      	ldrh	r2, [r7, #22]
 80096c6:	8abb      	ldrh	r3, [r7, #20]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d3ef      	bcc.n	80096ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
  }
}
 80096d2:	bf00      	nop
 80096d4:	371c      	adds	r7, #28
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80096de:	b480      	push	{r7}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	881a      	ldrh	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4413      	add	r3, r2
 8009704:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009706:	68fb      	ldr	r3, [r7, #12]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	789b      	ldrb	r3, [r3, #2]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d002      	beq.n	8009734 <USBH_CtlReq+0x20>
 800972e:	2b02      	cmp	r3, #2
 8009730:	d00f      	beq.n	8009752 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009732:	e027      	b.n	8009784 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	88fa      	ldrh	r2, [r7, #6]
 800973e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2202      	movs	r2, #2
 800974a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	e018      	b.n	8009784 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f81c 	bl	8009790 <USBH_HandleControl>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <USBH_CtlReq+0x54>
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	2b03      	cmp	r3, #3
 8009766:	d106      	bne.n	8009776 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2201      	movs	r2, #1
 800976c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	761a      	strb	r2, [r3, #24]
      break;
 8009774:	e005      	b.n	8009782 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	2b02      	cmp	r3, #2
 800977a:	d102      	bne.n	8009782 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2201      	movs	r2, #1
 8009780:	709a      	strb	r2, [r3, #2]
      break;
 8009782:	bf00      	nop
  }
  return status;
 8009784:	7dfb      	ldrb	r3, [r7, #23]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b086      	sub	sp, #24
 8009794:	af02      	add	r7, sp, #8
 8009796:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	7e1b      	ldrb	r3, [r3, #24]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	2b0a      	cmp	r3, #10
 80097a8:	f200 8156 	bhi.w	8009a58 <USBH_HandleControl+0x2c8>
 80097ac:	a201      	add	r2, pc, #4	; (adr r2, 80097b4 <USBH_HandleControl+0x24>)
 80097ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b2:	bf00      	nop
 80097b4:	080097e1 	.word	0x080097e1
 80097b8:	080097fb 	.word	0x080097fb
 80097bc:	08009865 	.word	0x08009865
 80097c0:	0800988b 	.word	0x0800988b
 80097c4:	080098c3 	.word	0x080098c3
 80097c8:	080098ed 	.word	0x080098ed
 80097cc:	0800993f 	.word	0x0800993f
 80097d0:	08009961 	.word	0x08009961
 80097d4:	0800999d 	.word	0x0800999d
 80097d8:	080099c3 	.word	0x080099c3
 80097dc:	08009a01 	.word	0x08009a01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f103 0110 	add.w	r1, r3, #16
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	795b      	ldrb	r3, [r3, #5]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f943 	bl	8009a78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2202      	movs	r2, #2
 80097f6:	761a      	strb	r2, [r3, #24]
      break;
 80097f8:	e139      	b.n	8009a6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	795b      	ldrb	r3, [r3, #5]
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fcc5 	bl	800a190 <USBH_LL_GetURBState>
 8009806:	4603      	mov	r3, r0
 8009808:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	2b01      	cmp	r3, #1
 800980e:	d11e      	bne.n	800984e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7c1b      	ldrb	r3, [r3, #16]
 8009814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009818:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	8adb      	ldrh	r3, [r3, #22]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009822:	7b7b      	ldrb	r3, [r7, #13]
 8009824:	2b80      	cmp	r3, #128	; 0x80
 8009826:	d103      	bne.n	8009830 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2203      	movs	r2, #3
 800982c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800982e:	e115      	b.n	8009a5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2205      	movs	r2, #5
 8009834:	761a      	strb	r2, [r3, #24]
      break;
 8009836:	e111      	b.n	8009a5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009838:	7b7b      	ldrb	r3, [r7, #13]
 800983a:	2b80      	cmp	r3, #128	; 0x80
 800983c:	d103      	bne.n	8009846 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2209      	movs	r2, #9
 8009842:	761a      	strb	r2, [r3, #24]
      break;
 8009844:	e10a      	b.n	8009a5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2207      	movs	r2, #7
 800984a:	761a      	strb	r2, [r3, #24]
      break;
 800984c:	e106      	b.n	8009a5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d003      	beq.n	800985c <USBH_HandleControl+0xcc>
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	2b02      	cmp	r3, #2
 8009858:	f040 8100 	bne.w	8009a5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	220b      	movs	r2, #11
 8009860:	761a      	strb	r2, [r3, #24]
      break;
 8009862:	e0fb      	b.n	8009a5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6899      	ldr	r1, [r3, #8]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	899a      	ldrh	r2, [r3, #12]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	791b      	ldrb	r3, [r3, #4]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f93a 	bl	8009af6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2204      	movs	r2, #4
 8009886:	761a      	strb	r2, [r3, #24]
      break;
 8009888:	e0f1      	b.n	8009a6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	791b      	ldrb	r3, [r3, #4]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fc7d 	bl	800a190 <USBH_LL_GetURBState>
 8009896:	4603      	mov	r3, r0
 8009898:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	2b01      	cmp	r3, #1
 800989e:	d102      	bne.n	80098a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2209      	movs	r2, #9
 80098a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80098a6:	7bbb      	ldrb	r3, [r7, #14]
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	d102      	bne.n	80098b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80098ac:	2303      	movs	r3, #3
 80098ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80098b0:	e0d6      	b.n	8009a60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	f040 80d3 	bne.w	8009a60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	220b      	movs	r2, #11
 80098be:	761a      	strb	r2, [r3, #24]
      break;
 80098c0:	e0ce      	b.n	8009a60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6899      	ldr	r1, [r3, #8]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	899a      	ldrh	r2, [r3, #12]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	2001      	movs	r0, #1
 80098d0:	9000      	str	r0, [sp, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8ea 	bl	8009aac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80098de:	b29a      	uxth	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2206      	movs	r2, #6
 80098e8:	761a      	strb	r2, [r3, #24]
      break;
 80098ea:	e0c0      	b.n	8009a6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	795b      	ldrb	r3, [r3, #5]
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fc4c 	bl	800a190 <USBH_LL_GetURBState>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80098fc:	7bbb      	ldrb	r3, [r7, #14]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d103      	bne.n	800990a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2207      	movs	r2, #7
 8009906:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009908:	e0ac      	b.n	8009a64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	2b05      	cmp	r3, #5
 800990e:	d105      	bne.n	800991c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	220c      	movs	r2, #12
 8009914:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009916:	2303      	movs	r3, #3
 8009918:	73fb      	strb	r3, [r7, #15]
      break;
 800991a:	e0a3      	b.n	8009a64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d103      	bne.n	800992a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2205      	movs	r2, #5
 8009926:	761a      	strb	r2, [r3, #24]
      break;
 8009928:	e09c      	b.n	8009a64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b04      	cmp	r3, #4
 800992e:	f040 8099 	bne.w	8009a64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	220b      	movs	r2, #11
 8009936:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009938:	2302      	movs	r3, #2
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e092      	b.n	8009a64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	791b      	ldrb	r3, [r3, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	2100      	movs	r1, #0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f8d5 	bl	8009af6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2208      	movs	r2, #8
 800995c:	761a      	strb	r2, [r3, #24]

      break;
 800995e:	e086      	b.n	8009a6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	791b      	ldrb	r3, [r3, #4]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fc12 	bl	800a190 <USBH_LL_GetURBState>
 800996c:	4603      	mov	r3, r0
 800996e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d105      	bne.n	8009982 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	220d      	movs	r2, #13
 800997a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009980:	e072      	b.n	8009a68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b04      	cmp	r3, #4
 8009986:	d103      	bne.n	8009990 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	220b      	movs	r2, #11
 800998c:	761a      	strb	r2, [r3, #24]
      break;
 800998e:	e06b      	b.n	8009a68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b05      	cmp	r3, #5
 8009994:	d168      	bne.n	8009a68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009996:	2303      	movs	r3, #3
 8009998:	73fb      	strb	r3, [r7, #15]
      break;
 800999a:	e065      	b.n	8009a68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	795b      	ldrb	r3, [r3, #5]
 80099a0:	2201      	movs	r2, #1
 80099a2:	9200      	str	r2, [sp, #0]
 80099a4:	2200      	movs	r2, #0
 80099a6:	2100      	movs	r1, #0
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f87f 	bl	8009aac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	220a      	movs	r2, #10
 80099be:	761a      	strb	r2, [r3, #24]
      break;
 80099c0:	e055      	b.n	8009a6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	795b      	ldrb	r3, [r3, #5]
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fbe1 	bl	800a190 <USBH_LL_GetURBState>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d105      	bne.n	80099e4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	220d      	movs	r2, #13
 80099e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80099e2:	e043      	b.n	8009a6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80099e4:	7bbb      	ldrb	r3, [r7, #14]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d103      	bne.n	80099f2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2209      	movs	r2, #9
 80099ee:	761a      	strb	r2, [r3, #24]
      break;
 80099f0:	e03c      	b.n	8009a6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	2b04      	cmp	r3, #4
 80099f6:	d139      	bne.n	8009a6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	220b      	movs	r2, #11
 80099fc:	761a      	strb	r2, [r3, #24]
      break;
 80099fe:	e035      	b.n	8009a6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7e5b      	ldrb	r3, [r3, #25]
 8009a04:	3301      	adds	r3, #1
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	765a      	strb	r2, [r3, #25]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	7e5b      	ldrb	r3, [r3, #25]
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d806      	bhi.n	8009a22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009a20:	e025      	b.n	8009a6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a28:	2106      	movs	r1, #6
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	795b      	ldrb	r3, [r3, #5]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f90c 	bl	8009c58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	791b      	ldrb	r3, [r3, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f906 	bl	8009c58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009a52:	2302      	movs	r3, #2
 8009a54:	73fb      	strb	r3, [r7, #15]
      break;
 8009a56:	e00a      	b.n	8009a6e <USBH_HandleControl+0x2de>

    default:
      break;
 8009a58:	bf00      	nop
 8009a5a:	e008      	b.n	8009a6e <USBH_HandleControl+0x2de>
      break;
 8009a5c:	bf00      	nop
 8009a5e:	e006      	b.n	8009a6e <USBH_HandleControl+0x2de>
      break;
 8009a60:	bf00      	nop
 8009a62:	e004      	b.n	8009a6e <USBH_HandleControl+0x2de>
      break;
 8009a64:	bf00      	nop
 8009a66:	e002      	b.n	8009a6e <USBH_HandleControl+0x2de>
      break;
 8009a68:	bf00      	nop
 8009a6a:	e000      	b.n	8009a6e <USBH_HandleControl+0x2de>
      break;
 8009a6c:	bf00      	nop
  }

  return status;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a86:	79f9      	ldrb	r1, [r7, #7]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	9303      	str	r3, [sp, #12]
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	9302      	str	r3, [sp, #8]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	9301      	str	r3, [sp, #4]
 8009a94:	2300      	movs	r3, #0
 8009a96:	9300      	str	r3, [sp, #0]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 fb46 	bl	800a12e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af04      	add	r7, sp, #16
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	461a      	mov	r2, r3
 8009aba:	460b      	mov	r3, r1
 8009abc:	80fb      	strh	r3, [r7, #6]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009acc:	2300      	movs	r3, #0
 8009ace:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ad0:	7979      	ldrb	r1, [r7, #5]
 8009ad2:	7e3b      	ldrb	r3, [r7, #24]
 8009ad4:	9303      	str	r3, [sp, #12]
 8009ad6:	88fb      	ldrh	r3, [r7, #6]
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	2301      	movs	r3, #1
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fb21 	bl	800a12e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b088      	sub	sp, #32
 8009afa:	af04      	add	r7, sp, #16
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	4611      	mov	r1, r2
 8009b02:	461a      	mov	r2, r3
 8009b04:	460b      	mov	r3, r1
 8009b06:	80fb      	strh	r3, [r7, #6]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b0c:	7979      	ldrb	r1, [r7, #5]
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9303      	str	r3, [sp, #12]
 8009b12:	88fb      	ldrh	r3, [r7, #6]
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2201      	movs	r2, #1
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fb03 	bl	800a12e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009b28:	2300      	movs	r3, #0

}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b088      	sub	sp, #32
 8009b36:	af04      	add	r7, sp, #16
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	4611      	mov	r1, r2
 8009b3e:	461a      	mov	r2, r3
 8009b40:	460b      	mov	r3, r1
 8009b42:	80fb      	strh	r3, [r7, #6]
 8009b44:	4613      	mov	r3, r2
 8009b46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b56:	7979      	ldrb	r1, [r7, #5]
 8009b58:	7e3b      	ldrb	r3, [r7, #24]
 8009b5a:	9303      	str	r3, [sp, #12]
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	9302      	str	r3, [sp, #8]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	9301      	str	r3, [sp, #4]
 8009b64:	2301      	movs	r3, #1
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	2302      	movs	r3, #2
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f000 fade 	bl	800a12e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af04      	add	r7, sp, #16
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4611      	mov	r1, r2
 8009b88:	461a      	mov	r2, r3
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	80fb      	strh	r3, [r7, #6]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009b92:	7979      	ldrb	r1, [r7, #5]
 8009b94:	2300      	movs	r3, #0
 8009b96:	9303      	str	r3, [sp, #12]
 8009b98:	88fb      	ldrh	r3, [r7, #6]
 8009b9a:	9302      	str	r3, [sp, #8]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	9301      	str	r3, [sp, #4]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	9300      	str	r3, [sp, #0]
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 fac0 	bl	800a12e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af04      	add	r7, sp, #16
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	4611      	mov	r1, r2
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	70fb      	strb	r3, [r7, #3]
 8009bca:	460b      	mov	r3, r1
 8009bcc:	70bb      	strb	r3, [r7, #2]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009bd2:	7878      	ldrb	r0, [r7, #1]
 8009bd4:	78ba      	ldrb	r2, [r7, #2]
 8009bd6:	78f9      	ldrb	r1, [r7, #3]
 8009bd8:	8b3b      	ldrh	r3, [r7, #24]
 8009bda:	9302      	str	r3, [sp, #8]
 8009bdc:	7d3b      	ldrb	r3, [r7, #20]
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	7c3b      	ldrb	r3, [r7, #16]
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4603      	mov	r3, r0
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fa53 	bl	800a092 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
 8009bfe:	460b      	mov	r3, r1
 8009c00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa72 	bl	800a0f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	460b      	mov	r3, r1
 8009c20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 f836 	bl	8009c94 <USBH_GetFreePipe>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d00a      	beq.n	8009c4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	f003 030f 	and.w	r3, r3, #15
 8009c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	33e0      	adds	r3, #224	; 0xe0
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009c4c:	89fb      	ldrh	r3, [r7, #14]
 8009c4e:	b2db      	uxtb	r3, r3
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d80d      	bhi.n	8009c86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	33e0      	adds	r3, #224	; 0xe0
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	4413      	add	r3, r2
 8009c74:	685a      	ldr	r2, [r3, #4]
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	33e0      	adds	r3, #224	; 0xe0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
 8009ca4:	e00f      	b.n	8009cc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ca6:	7bfb      	ldrb	r3, [r7, #15]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	33e0      	adds	r3, #224	; 0xe0
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d102      	bne.n	8009cc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	b29b      	uxth	r3, r3
 8009cbe:	e007      	b.n	8009cd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	73fb      	strb	r3, [r7, #15]
 8009cc6:	7bfb      	ldrb	r3, [r7, #15]
 8009cc8:	2b0f      	cmp	r3, #15
 8009cca:	d9ec      	bls.n	8009ca6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	490e      	ldr	r1, [pc, #56]	; (8009d1c <MX_USB_HOST_Init+0x40>)
 8009ce4:	480e      	ldr	r0, [pc, #56]	; (8009d20 <MX_USB_HOST_Init+0x44>)
 8009ce6:	f7fe fb05 	bl	80082f4 <USBH_Init>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d001      	beq.n	8009cf4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009cf0:	f7f7 fd78 	bl	80017e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009cf4:	490b      	ldr	r1, [pc, #44]	; (8009d24 <MX_USB_HOST_Init+0x48>)
 8009cf6:	480a      	ldr	r0, [pc, #40]	; (8009d20 <MX_USB_HOST_Init+0x44>)
 8009cf8:	f7fe fba9 	bl	800844e <USBH_RegisterClass>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009d02:	f7f7 fd6f 	bl	80017e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009d06:	4806      	ldr	r0, [pc, #24]	; (8009d20 <MX_USB_HOST_Init+0x44>)
 8009d08:	f7fe fc2d 	bl	8008566 <USBH_Start>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009d12:	f7f7 fd67 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009d16:	bf00      	nop
 8009d18:	bd80      	pop	{r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	20000480 	.word	0x20000480
 8009d24:	2000002c 	.word	0x2000002c

08009d28 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009d2c:	4802      	ldr	r0, [pc, #8]	; (8009d38 <MX_USB_HOST_Process+0x10>)
 8009d2e:	f7fe fc2b 	bl	8008588 <USBH_Process>
}
 8009d32:	bf00      	nop
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20000480 	.word	0x20000480

08009d3c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d819      	bhi.n	8009d84 <USBH_UserProcess+0x48>
 8009d50:	a201      	add	r2, pc, #4	; (adr r2, 8009d58 <USBH_UserProcess+0x1c>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d85 	.word	0x08009d85
 8009d5c:	08009d75 	.word	0x08009d75
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009d7d 	.word	0x08009d7d
 8009d68:	08009d6d 	.word	0x08009d6d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009d6c:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <USBH_UserProcess+0x58>)
 8009d6e:	2203      	movs	r2, #3
 8009d70:	701a      	strb	r2, [r3, #0]
  break;
 8009d72:	e008      	b.n	8009d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009d74:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <USBH_UserProcess+0x58>)
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]
  break;
 8009d7a:	e004      	b.n	8009d86 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009d7c:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <USBH_UserProcess+0x58>)
 8009d7e:	2201      	movs	r2, #1
 8009d80:	701a      	strb	r2, [r3, #0]
  break;
 8009d82:	e000      	b.n	8009d86 <USBH_UserProcess+0x4a>

  default:
  break;
 8009d84:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009d86:	bf00      	nop
 8009d88:	370c      	adds	r7, #12
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000858 	.word	0x20000858

08009d98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08a      	sub	sp, #40	; 0x28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009da0:	f107 0314 	add.w	r3, r7, #20
 8009da4:	2200      	movs	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	605a      	str	r2, [r3, #4]
 8009daa:	609a      	str	r2, [r3, #8]
 8009dac:	60da      	str	r2, [r3, #12]
 8009dae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009db8:	d147      	bne.n	8009e4a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dba:	2300      	movs	r3, #0
 8009dbc:	613b      	str	r3, [r7, #16]
 8009dbe:	4b25      	ldr	r3, [pc, #148]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	4a24      	ldr	r2, [pc, #144]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009dc4:	f043 0301 	orr.w	r3, r3, #1
 8009dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8009dca:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	613b      	str	r3, [r7, #16]
 8009dd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009de4:	f107 0314 	add.w	r3, r7, #20
 8009de8:	4619      	mov	r1, r3
 8009dea:	481b      	ldr	r0, [pc, #108]	; (8009e58 <HAL_HCD_MspInit+0xc0>)
 8009dec:	f7f7 fff4 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009df0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df6:	2302      	movs	r3, #2
 8009df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e02:	230a      	movs	r3, #10
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e06:	f107 0314 	add.w	r3, r7, #20
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4812      	ldr	r0, [pc, #72]	; (8009e58 <HAL_HCD_MspInit+0xc0>)
 8009e0e:	f7f7 ffe3 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e12:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e16:	4a0f      	ldr	r2, [pc, #60]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1c:	6353      	str	r3, [r2, #52]	; 0x34
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	4b0c      	ldr	r3, [pc, #48]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e26:	4a0b      	ldr	r2, [pc, #44]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <HAL_HCD_MspInit+0xbc>)
 8009e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	2043      	movs	r0, #67	; 0x43
 8009e40:	f7f7 ff93 	bl	8001d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e44:	2043      	movs	r0, #67	; 0x43
 8009e46:	f7f7 ffac 	bl	8001da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e4a:	bf00      	nop
 8009e4c:	3728      	adds	r7, #40	; 0x28
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	40023800 	.word	0x40023800
 8009e58:	40020000 	.word	0x40020000

08009e5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe ff6b 	bl	8008d46 <USBH_LL_IncTimer>
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7fe ffa3 	bl	8008dd2 <USBH_LL_Connect>
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7fe ffac 	bl	8008e00 <USBH_LL_Disconnect>
}
 8009ea8:	bf00      	nop
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	460b      	mov	r3, r1
 8009eba:	70fb      	strb	r3, [r7, #3]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe ff5d 	bl	8008d9a <USBH_LL_PortEnabled>
}
 8009ee0:	bf00      	nop
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe ff5d 	bl	8008db6 <USBH_LL_PortDisabled>
}
 8009efc:	bf00      	nop
 8009efe:	3708      	adds	r7, #8
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b082      	sub	sp, #8
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d12a      	bne.n	8009f6c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009f16:	4a18      	ldr	r2, [pc, #96]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f22:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f2c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f30:	2208      	movs	r2, #8
 8009f32:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f3a:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009f40:	4b0d      	ldr	r3, [pc, #52]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f42:	2202      	movs	r2, #2
 8009f44:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009f4c:	480a      	ldr	r0, [pc, #40]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f4e:	f7f8 f8e0 	bl	8002112 <HAL_HCD_Init>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009f58:	f7f7 fc44 	bl	80017e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009f5c:	4806      	ldr	r0, [pc, #24]	; (8009f78 <USBH_LL_Init+0x74>)
 8009f5e:	f7f8 fd41 	bl	80029e4 <HAL_HCD_GetCurrentFrame>
 8009f62:	4603      	mov	r3, r0
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7fe fede 	bl	8008d28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	2000085c 	.word	0x2000085c

08009f7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7f8 fcae 	bl	80028f4 <HAL_HCD_Start>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 f95e 	bl	800a260 <USBH_Get_USB_Status>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7f8 fcb6 	bl	800293a <HAL_HCD_Stop>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f000 f943 	bl	800a260 <USBH_Get_USB_Status>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3710      	adds	r7, #16
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f8 fd00 	bl	8002a00 <HAL_HCD_GetCurrentSpeed>
 800a000:	4603      	mov	r3, r0
 800a002:	2b02      	cmp	r3, #2
 800a004:	d00c      	beq.n	800a020 <USBH_LL_GetSpeed+0x38>
 800a006:	2b02      	cmp	r3, #2
 800a008:	d80d      	bhi.n	800a026 <USBH_LL_GetSpeed+0x3e>
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <USBH_LL_GetSpeed+0x2c>
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d003      	beq.n	800a01a <USBH_LL_GetSpeed+0x32>
 800a012:	e008      	b.n	800a026 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a014:	2300      	movs	r3, #0
 800a016:	73fb      	strb	r3, [r7, #15]
    break;
 800a018:	e008      	b.n	800a02c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a01a:	2301      	movs	r3, #1
 800a01c:	73fb      	strb	r3, [r7, #15]
    break;
 800a01e:	e005      	b.n	800a02c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a020:	2302      	movs	r3, #2
 800a022:	73fb      	strb	r3, [r7, #15]
    break;
 800a024:	e002      	b.n	800a02c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a026:	2301      	movs	r3, #1
 800a028:	73fb      	strb	r3, [r7, #15]
    break;
 800a02a:	bf00      	nop
  }
  return  speed;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7f8 fc91 	bl	8002974 <HAL_HCD_ResetPort>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 f901 	bl	800a260 <USBH_Get_USB_Status>
 800a05e:	4603      	mov	r3, r0
 800a060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a062:	7bbb      	ldrb	r3, [r7, #14]
}
 800a064:	4618      	mov	r0, r3
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	460b      	mov	r3, r1
 800a076:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a07e:	78fa      	ldrb	r2, [r7, #3]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f7f8 fc99 	bl	80029ba <HAL_HCD_HC_GetXferCount>
 800a088:	4603      	mov	r3, r0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a092:	b590      	push	{r4, r7, lr}
 800a094:	b089      	sub	sp, #36	; 0x24
 800a096:	af04      	add	r7, sp, #16
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	4608      	mov	r0, r1
 800a09c:	4611      	mov	r1, r2
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	70fb      	strb	r3, [r7, #3]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70bb      	strb	r3, [r7, #2]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a0ba:	787c      	ldrb	r4, [r7, #1]
 800a0bc:	78ba      	ldrb	r2, [r7, #2]
 800a0be:	78f9      	ldrb	r1, [r7, #3]
 800a0c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0c8:	9301      	str	r3, [sp, #4]
 800a0ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	f7f8 f885 	bl	80021e0 <HAL_HCD_HC_Init>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f8bf 	bl	800a260 <USBH_Get_USB_Status>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd90      	pop	{r4, r7, pc}

0800a0f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	4611      	mov	r1, r2
 800a10e:	4618      	mov	r0, r3
 800a110:	f7f8 f91e 	bl	8002350 <HAL_HCD_HC_Halt>
 800a114:	4603      	mov	r3, r0
 800a116:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f8a0 	bl	800a260 <USBH_Get_USB_Status>
 800a120:	4603      	mov	r3, r0
 800a122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a124:	7bbb      	ldrb	r3, [r7, #14]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a12e:	b590      	push	{r4, r7, lr}
 800a130:	b089      	sub	sp, #36	; 0x24
 800a132:	af04      	add	r7, sp, #16
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	4608      	mov	r0, r1
 800a138:	4611      	mov	r1, r2
 800a13a:	461a      	mov	r2, r3
 800a13c:	4603      	mov	r3, r0
 800a13e:	70fb      	strb	r3, [r7, #3]
 800a140:	460b      	mov	r3, r1
 800a142:	70bb      	strb	r3, [r7, #2]
 800a144:	4613      	mov	r3, r2
 800a146:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a156:	787c      	ldrb	r4, [r7, #1]
 800a158:	78ba      	ldrb	r2, [r7, #2]
 800a15a:	78f9      	ldrb	r1, [r7, #3]
 800a15c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a164:	9302      	str	r3, [sp, #8]
 800a166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	4623      	mov	r3, r4
 800a172:	f7f8 f911 	bl	8002398 <HAL_HCD_HC_SubmitRequest>
 800a176:	4603      	mov	r3, r0
 800a178:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f000 f86f 	bl	800a260 <USBH_Get_USB_Status>
 800a182:	4603      	mov	r3, r0
 800a184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a186:	7bbb      	ldrb	r3, [r7, #14]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}

0800a190 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1a2:	78fa      	ldrb	r2, [r7, #3]
 800a1a4:	4611      	mov	r1, r2
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f8 fbf2 	bl	8002990 <HAL_HCD_HC_GetURBState>
 800a1ac:	4603      	mov	r3, r0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d103      	bne.n	800a1d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f872 	bl	800a2b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a1d4:	20c8      	movs	r0, #200	; 0xc8
 800a1d6:	f7f7 fcc9 	bl	8001b6c <HAL_Delay>
  return USBH_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	70fb      	strb	r3, [r7, #3]
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a1fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	68f9      	ldr	r1, [r7, #12]
 800a200:	4613      	mov	r3, r2
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3317      	adds	r3, #23
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00a      	beq.n	800a228 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	4613      	mov	r3, r2
 800a218:	011b      	lsls	r3, r3, #4
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	333c      	adds	r3, #60	; 0x3c
 800a222:	78ba      	ldrb	r2, [r7, #2]
 800a224:	701a      	strb	r2, [r3, #0]
 800a226:	e009      	b.n	800a23c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a228:	78fa      	ldrb	r2, [r7, #3]
 800a22a:	68f9      	ldr	r1, [r7, #12]
 800a22c:	4613      	mov	r3, r2
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	1a9b      	subs	r3, r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	440b      	add	r3, r1
 800a236:	333d      	adds	r3, #61	; 0x3d
 800a238:	78ba      	ldrb	r2, [r7, #2]
 800a23a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7f7 fc8a 	bl	8001b6c <HAL_Delay>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	2b03      	cmp	r3, #3
 800a272:	d817      	bhi.n	800a2a4 <USBH_Get_USB_Status+0x44>
 800a274:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <USBH_Get_USB_Status+0x1c>)
 800a276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27a:	bf00      	nop
 800a27c:	0800a28d 	.word	0x0800a28d
 800a280:	0800a293 	.word	0x0800a293
 800a284:	0800a299 	.word	0x0800a299
 800a288:	0800a29f 	.word	0x0800a29f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
    break;
 800a290:	e00b      	b.n	800a2aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a292:	2302      	movs	r3, #2
 800a294:	73fb      	strb	r3, [r7, #15]
    break;
 800a296:	e008      	b.n	800a2aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a298:	2301      	movs	r3, #1
 800a29a:	73fb      	strb	r3, [r7, #15]
    break;
 800a29c:	e005      	b.n	800a2aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a29e:	2302      	movs	r3, #2
 800a2a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a2:	e002      	b.n	800a2aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a8:	bf00      	nop
  }
  return usb_status;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a2c2:	79fb      	ldrb	r3, [r7, #7]
 800a2c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d102      	bne.n	800a2d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
 800a2d0:	e001      	b.n	800a2d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	2101      	movs	r1, #1
 800a2dc:	4803      	ldr	r0, [pc, #12]	; (800a2ec <MX_DriverVbusFS+0x34>)
 800a2de:	f7f7 feff 	bl	80020e0 <HAL_GPIO_WritePin>
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	40020800 	.word	0x40020800

0800a2f0 <malloc>:
 800a2f0:	4b02      	ldr	r3, [pc, #8]	; (800a2fc <malloc+0xc>)
 800a2f2:	4601      	mov	r1, r0
 800a2f4:	6818      	ldr	r0, [r3, #0]
 800a2f6:	f000 b82b 	b.w	800a350 <_malloc_r>
 800a2fa:	bf00      	nop
 800a2fc:	20000098 	.word	0x20000098

0800a300 <free>:
 800a300:	4b02      	ldr	r3, [pc, #8]	; (800a30c <free+0xc>)
 800a302:	4601      	mov	r1, r0
 800a304:	6818      	ldr	r0, [r3, #0]
 800a306:	f000 b913 	b.w	800a530 <_free_r>
 800a30a:	bf00      	nop
 800a30c:	20000098 	.word	0x20000098

0800a310 <sbrk_aligned>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	4e0e      	ldr	r6, [pc, #56]	; (800a34c <sbrk_aligned+0x3c>)
 800a314:	460c      	mov	r4, r1
 800a316:	6831      	ldr	r1, [r6, #0]
 800a318:	4605      	mov	r5, r0
 800a31a:	b911      	cbnz	r1, 800a322 <sbrk_aligned+0x12>
 800a31c:	f000 f8cc 	bl	800a4b8 <_sbrk_r>
 800a320:	6030      	str	r0, [r6, #0]
 800a322:	4621      	mov	r1, r4
 800a324:	4628      	mov	r0, r5
 800a326:	f000 f8c7 	bl	800a4b8 <_sbrk_r>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d00a      	beq.n	800a344 <sbrk_aligned+0x34>
 800a32e:	1cc4      	adds	r4, r0, #3
 800a330:	f024 0403 	bic.w	r4, r4, #3
 800a334:	42a0      	cmp	r0, r4
 800a336:	d007      	beq.n	800a348 <sbrk_aligned+0x38>
 800a338:	1a21      	subs	r1, r4, r0
 800a33a:	4628      	mov	r0, r5
 800a33c:	f000 f8bc 	bl	800a4b8 <_sbrk_r>
 800a340:	3001      	adds	r0, #1
 800a342:	d101      	bne.n	800a348 <sbrk_aligned+0x38>
 800a344:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a348:	4620      	mov	r0, r4
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	20000c40 	.word	0x20000c40

0800a350 <_malloc_r>:
 800a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a354:	1ccd      	adds	r5, r1, #3
 800a356:	f025 0503 	bic.w	r5, r5, #3
 800a35a:	3508      	adds	r5, #8
 800a35c:	2d0c      	cmp	r5, #12
 800a35e:	bf38      	it	cc
 800a360:	250c      	movcc	r5, #12
 800a362:	2d00      	cmp	r5, #0
 800a364:	4607      	mov	r7, r0
 800a366:	db01      	blt.n	800a36c <_malloc_r+0x1c>
 800a368:	42a9      	cmp	r1, r5
 800a36a:	d905      	bls.n	800a378 <_malloc_r+0x28>
 800a36c:	230c      	movs	r3, #12
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	2600      	movs	r6, #0
 800a372:	4630      	mov	r0, r6
 800a374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a378:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a44c <_malloc_r+0xfc>
 800a37c:	f000 f868 	bl	800a450 <__malloc_lock>
 800a380:	f8d8 3000 	ldr.w	r3, [r8]
 800a384:	461c      	mov	r4, r3
 800a386:	bb5c      	cbnz	r4, 800a3e0 <_malloc_r+0x90>
 800a388:	4629      	mov	r1, r5
 800a38a:	4638      	mov	r0, r7
 800a38c:	f7ff ffc0 	bl	800a310 <sbrk_aligned>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	4604      	mov	r4, r0
 800a394:	d155      	bne.n	800a442 <_malloc_r+0xf2>
 800a396:	f8d8 4000 	ldr.w	r4, [r8]
 800a39a:	4626      	mov	r6, r4
 800a39c:	2e00      	cmp	r6, #0
 800a39e:	d145      	bne.n	800a42c <_malloc_r+0xdc>
 800a3a0:	2c00      	cmp	r4, #0
 800a3a2:	d048      	beq.n	800a436 <_malloc_r+0xe6>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	eb04 0903 	add.w	r9, r4, r3
 800a3ae:	f000 f883 	bl	800a4b8 <_sbrk_r>
 800a3b2:	4581      	cmp	r9, r0
 800a3b4:	d13f      	bne.n	800a436 <_malloc_r+0xe6>
 800a3b6:	6821      	ldr	r1, [r4, #0]
 800a3b8:	1a6d      	subs	r5, r5, r1
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f7ff ffa7 	bl	800a310 <sbrk_aligned>
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	d037      	beq.n	800a436 <_malloc_r+0xe6>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	442b      	add	r3, r5
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d038      	beq.n	800a446 <_malloc_r+0xf6>
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	42a2      	cmp	r2, r4
 800a3d8:	d12b      	bne.n	800a432 <_malloc_r+0xe2>
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	e00f      	b.n	800a400 <_malloc_r+0xb0>
 800a3e0:	6822      	ldr	r2, [r4, #0]
 800a3e2:	1b52      	subs	r2, r2, r5
 800a3e4:	d41f      	bmi.n	800a426 <_malloc_r+0xd6>
 800a3e6:	2a0b      	cmp	r2, #11
 800a3e8:	d917      	bls.n	800a41a <_malloc_r+0xca>
 800a3ea:	1961      	adds	r1, r4, r5
 800a3ec:	42a3      	cmp	r3, r4
 800a3ee:	6025      	str	r5, [r4, #0]
 800a3f0:	bf18      	it	ne
 800a3f2:	6059      	strne	r1, [r3, #4]
 800a3f4:	6863      	ldr	r3, [r4, #4]
 800a3f6:	bf08      	it	eq
 800a3f8:	f8c8 1000 	streq.w	r1, [r8]
 800a3fc:	5162      	str	r2, [r4, r5]
 800a3fe:	604b      	str	r3, [r1, #4]
 800a400:	4638      	mov	r0, r7
 800a402:	f104 060b 	add.w	r6, r4, #11
 800a406:	f000 f829 	bl	800a45c <__malloc_unlock>
 800a40a:	f026 0607 	bic.w	r6, r6, #7
 800a40e:	1d23      	adds	r3, r4, #4
 800a410:	1af2      	subs	r2, r6, r3
 800a412:	d0ae      	beq.n	800a372 <_malloc_r+0x22>
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	50a3      	str	r3, [r4, r2]
 800a418:	e7ab      	b.n	800a372 <_malloc_r+0x22>
 800a41a:	42a3      	cmp	r3, r4
 800a41c:	6862      	ldr	r2, [r4, #4]
 800a41e:	d1dd      	bne.n	800a3dc <_malloc_r+0x8c>
 800a420:	f8c8 2000 	str.w	r2, [r8]
 800a424:	e7ec      	b.n	800a400 <_malloc_r+0xb0>
 800a426:	4623      	mov	r3, r4
 800a428:	6864      	ldr	r4, [r4, #4]
 800a42a:	e7ac      	b.n	800a386 <_malloc_r+0x36>
 800a42c:	4634      	mov	r4, r6
 800a42e:	6876      	ldr	r6, [r6, #4]
 800a430:	e7b4      	b.n	800a39c <_malloc_r+0x4c>
 800a432:	4613      	mov	r3, r2
 800a434:	e7cc      	b.n	800a3d0 <_malloc_r+0x80>
 800a436:	230c      	movs	r3, #12
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	4638      	mov	r0, r7
 800a43c:	f000 f80e 	bl	800a45c <__malloc_unlock>
 800a440:	e797      	b.n	800a372 <_malloc_r+0x22>
 800a442:	6025      	str	r5, [r4, #0]
 800a444:	e7dc      	b.n	800a400 <_malloc_r+0xb0>
 800a446:	605b      	str	r3, [r3, #4]
 800a448:	deff      	udf	#255	; 0xff
 800a44a:	bf00      	nop
 800a44c:	20000c3c 	.word	0x20000c3c

0800a450 <__malloc_lock>:
 800a450:	4801      	ldr	r0, [pc, #4]	; (800a458 <__malloc_lock+0x8>)
 800a452:	f000 b86b 	b.w	800a52c <__retarget_lock_acquire_recursive>
 800a456:	bf00      	nop
 800a458:	20000d7c 	.word	0x20000d7c

0800a45c <__malloc_unlock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	; (800a464 <__malloc_unlock+0x8>)
 800a45e:	f000 b866 	b.w	800a52e <__retarget_lock_release_recursive>
 800a462:	bf00      	nop
 800a464:	20000d7c 	.word	0x20000d7c

0800a468 <siprintf>:
 800a468:	b40e      	push	{r1, r2, r3}
 800a46a:	b500      	push	{lr}
 800a46c:	b09c      	sub	sp, #112	; 0x70
 800a46e:	ab1d      	add	r3, sp, #116	; 0x74
 800a470:	9002      	str	r0, [sp, #8]
 800a472:	9006      	str	r0, [sp, #24]
 800a474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a478:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <siprintf+0x38>)
 800a47a:	9107      	str	r1, [sp, #28]
 800a47c:	9104      	str	r1, [sp, #16]
 800a47e:	4909      	ldr	r1, [pc, #36]	; (800a4a4 <siprintf+0x3c>)
 800a480:	f853 2b04 	ldr.w	r2, [r3], #4
 800a484:	9105      	str	r1, [sp, #20]
 800a486:	6800      	ldr	r0, [r0, #0]
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	a902      	add	r1, sp, #8
 800a48c:	f000 f8f6 	bl	800a67c <_svfiprintf_r>
 800a490:	9b02      	ldr	r3, [sp, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	b01c      	add	sp, #112	; 0x70
 800a498:	f85d eb04 	ldr.w	lr, [sp], #4
 800a49c:	b003      	add	sp, #12
 800a49e:	4770      	bx	lr
 800a4a0:	20000098 	.word	0x20000098
 800a4a4:	ffff0208 	.word	0xffff0208

0800a4a8 <memset>:
 800a4a8:	4402      	add	r2, r0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d100      	bne.n	800a4b2 <memset+0xa>
 800a4b0:	4770      	bx	lr
 800a4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4b6:	e7f9      	b.n	800a4ac <memset+0x4>

0800a4b8 <_sbrk_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_sbrk_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fa6e 	bl	80019a4 <_sbrk>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_sbrk_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_sbrk_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20000d80 	.word	0x20000d80

0800a4d8 <__errno>:
 800a4d8:	4b01      	ldr	r3, [pc, #4]	; (800a4e0 <__errno+0x8>)
 800a4da:	6818      	ldr	r0, [r3, #0]
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	20000098 	.word	0x20000098

0800a4e4 <__libc_init_array>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	4d0d      	ldr	r5, [pc, #52]	; (800a51c <__libc_init_array+0x38>)
 800a4e8:	4c0d      	ldr	r4, [pc, #52]	; (800a520 <__libc_init_array+0x3c>)
 800a4ea:	1b64      	subs	r4, r4, r5
 800a4ec:	10a4      	asrs	r4, r4, #2
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	d109      	bne.n	800a508 <__libc_init_array+0x24>
 800a4f4:	4d0b      	ldr	r5, [pc, #44]	; (800a524 <__libc_init_array+0x40>)
 800a4f6:	4c0c      	ldr	r4, [pc, #48]	; (800a528 <__libc_init_array+0x44>)
 800a4f8:	f000 fbae 	bl	800ac58 <_init>
 800a4fc:	1b64      	subs	r4, r4, r5
 800a4fe:	10a4      	asrs	r4, r4, #2
 800a500:	2600      	movs	r6, #0
 800a502:	42a6      	cmp	r6, r4
 800a504:	d105      	bne.n	800a512 <__libc_init_array+0x2e>
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50c:	4798      	blx	r3
 800a50e:	3601      	adds	r6, #1
 800a510:	e7ee      	b.n	800a4f0 <__libc_init_array+0xc>
 800a512:	f855 3b04 	ldr.w	r3, [r5], #4
 800a516:	4798      	blx	r3
 800a518:	3601      	adds	r6, #1
 800a51a:	e7f2      	b.n	800a502 <__libc_init_array+0x1e>
 800a51c:	0800b40c 	.word	0x0800b40c
 800a520:	0800b40c 	.word	0x0800b40c
 800a524:	0800b40c 	.word	0x0800b40c
 800a528:	0800b410 	.word	0x0800b410

0800a52c <__retarget_lock_acquire_recursive>:
 800a52c:	4770      	bx	lr

0800a52e <__retarget_lock_release_recursive>:
 800a52e:	4770      	bx	lr

0800a530 <_free_r>:
 800a530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a532:	2900      	cmp	r1, #0
 800a534:	d044      	beq.n	800a5c0 <_free_r+0x90>
 800a536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a53a:	9001      	str	r0, [sp, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f1a1 0404 	sub.w	r4, r1, #4
 800a542:	bfb8      	it	lt
 800a544:	18e4      	addlt	r4, r4, r3
 800a546:	f7ff ff83 	bl	800a450 <__malloc_lock>
 800a54a:	4a1e      	ldr	r2, [pc, #120]	; (800a5c4 <_free_r+0x94>)
 800a54c:	9801      	ldr	r0, [sp, #4]
 800a54e:	6813      	ldr	r3, [r2, #0]
 800a550:	b933      	cbnz	r3, 800a560 <_free_r+0x30>
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	6014      	str	r4, [r2, #0]
 800a556:	b003      	add	sp, #12
 800a558:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a55c:	f7ff bf7e 	b.w	800a45c <__malloc_unlock>
 800a560:	42a3      	cmp	r3, r4
 800a562:	d908      	bls.n	800a576 <_free_r+0x46>
 800a564:	6825      	ldr	r5, [r4, #0]
 800a566:	1961      	adds	r1, r4, r5
 800a568:	428b      	cmp	r3, r1
 800a56a:	bf01      	itttt	eq
 800a56c:	6819      	ldreq	r1, [r3, #0]
 800a56e:	685b      	ldreq	r3, [r3, #4]
 800a570:	1949      	addeq	r1, r1, r5
 800a572:	6021      	streq	r1, [r4, #0]
 800a574:	e7ed      	b.n	800a552 <_free_r+0x22>
 800a576:	461a      	mov	r2, r3
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	b10b      	cbz	r3, 800a580 <_free_r+0x50>
 800a57c:	42a3      	cmp	r3, r4
 800a57e:	d9fa      	bls.n	800a576 <_free_r+0x46>
 800a580:	6811      	ldr	r1, [r2, #0]
 800a582:	1855      	adds	r5, r2, r1
 800a584:	42a5      	cmp	r5, r4
 800a586:	d10b      	bne.n	800a5a0 <_free_r+0x70>
 800a588:	6824      	ldr	r4, [r4, #0]
 800a58a:	4421      	add	r1, r4
 800a58c:	1854      	adds	r4, r2, r1
 800a58e:	42a3      	cmp	r3, r4
 800a590:	6011      	str	r1, [r2, #0]
 800a592:	d1e0      	bne.n	800a556 <_free_r+0x26>
 800a594:	681c      	ldr	r4, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	6053      	str	r3, [r2, #4]
 800a59a:	440c      	add	r4, r1
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	e7da      	b.n	800a556 <_free_r+0x26>
 800a5a0:	d902      	bls.n	800a5a8 <_free_r+0x78>
 800a5a2:	230c      	movs	r3, #12
 800a5a4:	6003      	str	r3, [r0, #0]
 800a5a6:	e7d6      	b.n	800a556 <_free_r+0x26>
 800a5a8:	6825      	ldr	r5, [r4, #0]
 800a5aa:	1961      	adds	r1, r4, r5
 800a5ac:	428b      	cmp	r3, r1
 800a5ae:	bf04      	itt	eq
 800a5b0:	6819      	ldreq	r1, [r3, #0]
 800a5b2:	685b      	ldreq	r3, [r3, #4]
 800a5b4:	6063      	str	r3, [r4, #4]
 800a5b6:	bf04      	itt	eq
 800a5b8:	1949      	addeq	r1, r1, r5
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	6054      	str	r4, [r2, #4]
 800a5be:	e7ca      	b.n	800a556 <_free_r+0x26>
 800a5c0:	b003      	add	sp, #12
 800a5c2:	bd30      	pop	{r4, r5, pc}
 800a5c4:	20000c3c 	.word	0x20000c3c

0800a5c8 <__ssputs_r>:
 800a5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5cc:	688e      	ldr	r6, [r1, #8]
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	42be      	cmp	r6, r7
 800a5d2:	680b      	ldr	r3, [r1, #0]
 800a5d4:	4682      	mov	sl, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4690      	mov	r8, r2
 800a5da:	d82c      	bhi.n	800a636 <__ssputs_r+0x6e>
 800a5dc:	898a      	ldrh	r2, [r1, #12]
 800a5de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5e2:	d026      	beq.n	800a632 <__ssputs_r+0x6a>
 800a5e4:	6965      	ldr	r5, [r4, #20]
 800a5e6:	6909      	ldr	r1, [r1, #16]
 800a5e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5ec:	eba3 0901 	sub.w	r9, r3, r1
 800a5f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5f4:	1c7b      	adds	r3, r7, #1
 800a5f6:	444b      	add	r3, r9
 800a5f8:	106d      	asrs	r5, r5, #1
 800a5fa:	429d      	cmp	r5, r3
 800a5fc:	bf38      	it	cc
 800a5fe:	461d      	movcc	r5, r3
 800a600:	0553      	lsls	r3, r2, #21
 800a602:	d527      	bpl.n	800a654 <__ssputs_r+0x8c>
 800a604:	4629      	mov	r1, r5
 800a606:	f7ff fea3 	bl	800a350 <_malloc_r>
 800a60a:	4606      	mov	r6, r0
 800a60c:	b360      	cbz	r0, 800a668 <__ssputs_r+0xa0>
 800a60e:	6921      	ldr	r1, [r4, #16]
 800a610:	464a      	mov	r2, r9
 800a612:	f000 fb0a 	bl	800ac2a <memcpy>
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a61c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	6126      	str	r6, [r4, #16]
 800a624:	6165      	str	r5, [r4, #20]
 800a626:	444e      	add	r6, r9
 800a628:	eba5 0509 	sub.w	r5, r5, r9
 800a62c:	6026      	str	r6, [r4, #0]
 800a62e:	60a5      	str	r5, [r4, #8]
 800a630:	463e      	mov	r6, r7
 800a632:	42be      	cmp	r6, r7
 800a634:	d900      	bls.n	800a638 <__ssputs_r+0x70>
 800a636:	463e      	mov	r6, r7
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	4632      	mov	r2, r6
 800a63c:	4641      	mov	r1, r8
 800a63e:	f000 fada 	bl	800abf6 <memmove>
 800a642:	68a3      	ldr	r3, [r4, #8]
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	60a3      	str	r3, [r4, #8]
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	4433      	add	r3, r6
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	2000      	movs	r0, #0
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	462a      	mov	r2, r5
 800a656:	f000 fa9f 	bl	800ab98 <_realloc_r>
 800a65a:	4606      	mov	r6, r0
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1e0      	bne.n	800a622 <__ssputs_r+0x5a>
 800a660:	6921      	ldr	r1, [r4, #16]
 800a662:	4650      	mov	r0, sl
 800a664:	f7ff ff64 	bl	800a530 <_free_r>
 800a668:	230c      	movs	r3, #12
 800a66a:	f8ca 3000 	str.w	r3, [sl]
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a67a:	e7e9      	b.n	800a650 <__ssputs_r+0x88>

0800a67c <_svfiprintf_r>:
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	4698      	mov	r8, r3
 800a682:	898b      	ldrh	r3, [r1, #12]
 800a684:	061b      	lsls	r3, r3, #24
 800a686:	b09d      	sub	sp, #116	; 0x74
 800a688:	4607      	mov	r7, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	d50e      	bpl.n	800a6ae <_svfiprintf_r+0x32>
 800a690:	690b      	ldr	r3, [r1, #16]
 800a692:	b963      	cbnz	r3, 800a6ae <_svfiprintf_r+0x32>
 800a694:	2140      	movs	r1, #64	; 0x40
 800a696:	f7ff fe5b 	bl	800a350 <_malloc_r>
 800a69a:	6028      	str	r0, [r5, #0]
 800a69c:	6128      	str	r0, [r5, #16]
 800a69e:	b920      	cbnz	r0, 800a6aa <_svfiprintf_r+0x2e>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a8:	e0d0      	b.n	800a84c <_svfiprintf_r+0x1d0>
 800a6aa:	2340      	movs	r3, #64	; 0x40
 800a6ac:	616b      	str	r3, [r5, #20]
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b2:	2320      	movs	r3, #32
 800a6b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6bc:	2330      	movs	r3, #48	; 0x30
 800a6be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a864 <_svfiprintf_r+0x1e8>
 800a6c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6c6:	f04f 0901 	mov.w	r9, #1
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	469a      	mov	sl, r3
 800a6ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d2:	b10a      	cbz	r2, 800a6d8 <_svfiprintf_r+0x5c>
 800a6d4:	2a25      	cmp	r2, #37	; 0x25
 800a6d6:	d1f9      	bne.n	800a6cc <_svfiprintf_r+0x50>
 800a6d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a6dc:	d00b      	beq.n	800a6f6 <_svfiprintf_r+0x7a>
 800a6de:	465b      	mov	r3, fp
 800a6e0:	4622      	mov	r2, r4
 800a6e2:	4629      	mov	r1, r5
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff ff6f 	bl	800a5c8 <__ssputs_r>
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	f000 80a9 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f2:	445a      	add	r2, fp
 800a6f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 80a1 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a700:	2300      	movs	r3, #0
 800a702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a706:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70a:	f10a 0a01 	add.w	sl, sl, #1
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	9307      	str	r3, [sp, #28]
 800a712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a716:	931a      	str	r3, [sp, #104]	; 0x68
 800a718:	4654      	mov	r4, sl
 800a71a:	2205      	movs	r2, #5
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	4850      	ldr	r0, [pc, #320]	; (800a864 <_svfiprintf_r+0x1e8>)
 800a722:	f7f5 fd5d 	bl	80001e0 <memchr>
 800a726:	9a04      	ldr	r2, [sp, #16]
 800a728:	b9d8      	cbnz	r0, 800a762 <_svfiprintf_r+0xe6>
 800a72a:	06d0      	lsls	r0, r2, #27
 800a72c:	bf44      	itt	mi
 800a72e:	2320      	movmi	r3, #32
 800a730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a734:	0711      	lsls	r1, r2, #28
 800a736:	bf44      	itt	mi
 800a738:	232b      	movmi	r3, #43	; 0x2b
 800a73a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a73e:	f89a 3000 	ldrb.w	r3, [sl]
 800a742:	2b2a      	cmp	r3, #42	; 0x2a
 800a744:	d015      	beq.n	800a772 <_svfiprintf_r+0xf6>
 800a746:	9a07      	ldr	r2, [sp, #28]
 800a748:	4654      	mov	r4, sl
 800a74a:	2000      	movs	r0, #0
 800a74c:	f04f 0c0a 	mov.w	ip, #10
 800a750:	4621      	mov	r1, r4
 800a752:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a756:	3b30      	subs	r3, #48	; 0x30
 800a758:	2b09      	cmp	r3, #9
 800a75a:	d94d      	bls.n	800a7f8 <_svfiprintf_r+0x17c>
 800a75c:	b1b0      	cbz	r0, 800a78c <_svfiprintf_r+0x110>
 800a75e:	9207      	str	r2, [sp, #28]
 800a760:	e014      	b.n	800a78c <_svfiprintf_r+0x110>
 800a762:	eba0 0308 	sub.w	r3, r0, r8
 800a766:	fa09 f303 	lsl.w	r3, r9, r3
 800a76a:	4313      	orrs	r3, r2
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	46a2      	mov	sl, r4
 800a770:	e7d2      	b.n	800a718 <_svfiprintf_r+0x9c>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	1d19      	adds	r1, r3, #4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	9103      	str	r1, [sp, #12]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	bfbb      	ittet	lt
 800a77e:	425b      	neglt	r3, r3
 800a780:	f042 0202 	orrlt.w	r2, r2, #2
 800a784:	9307      	strge	r3, [sp, #28]
 800a786:	9307      	strlt	r3, [sp, #28]
 800a788:	bfb8      	it	lt
 800a78a:	9204      	strlt	r2, [sp, #16]
 800a78c:	7823      	ldrb	r3, [r4, #0]
 800a78e:	2b2e      	cmp	r3, #46	; 0x2e
 800a790:	d10c      	bne.n	800a7ac <_svfiprintf_r+0x130>
 800a792:	7863      	ldrb	r3, [r4, #1]
 800a794:	2b2a      	cmp	r3, #42	; 0x2a
 800a796:	d134      	bne.n	800a802 <_svfiprintf_r+0x186>
 800a798:	9b03      	ldr	r3, [sp, #12]
 800a79a:	1d1a      	adds	r2, r3, #4
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	9203      	str	r2, [sp, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	bfb8      	it	lt
 800a7a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a7a8:	3402      	adds	r4, #2
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a874 <_svfiprintf_r+0x1f8>
 800a7b0:	7821      	ldrb	r1, [r4, #0]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	f7f5 fd13 	bl	80001e0 <memchr>
 800a7ba:	b138      	cbz	r0, 800a7cc <_svfiprintf_r+0x150>
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	eba0 000a 	sub.w	r0, r0, sl
 800a7c2:	2240      	movs	r2, #64	; 0x40
 800a7c4:	4082      	lsls	r2, r0
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	4825      	ldr	r0, [pc, #148]	; (800a868 <_svfiprintf_r+0x1ec>)
 800a7d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7d6:	2206      	movs	r2, #6
 800a7d8:	f7f5 fd02 	bl	80001e0 <memchr>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d038      	beq.n	800a852 <_svfiprintf_r+0x1d6>
 800a7e0:	4b22      	ldr	r3, [pc, #136]	; (800a86c <_svfiprintf_r+0x1f0>)
 800a7e2:	bb1b      	cbnz	r3, 800a82c <_svfiprintf_r+0x1b0>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	f023 0307 	bic.w	r3, r3, #7
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	9303      	str	r3, [sp, #12]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f2:	4433      	add	r3, r6
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	e768      	b.n	800a6ca <_svfiprintf_r+0x4e>
 800a7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7a6      	b.n	800a750 <_svfiprintf_r+0xd4>
 800a802:	2300      	movs	r3, #0
 800a804:	3401      	adds	r4, #1
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0c0a 	mov.w	ip, #10
 800a80e:	4620      	mov	r0, r4
 800a810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a814:	3a30      	subs	r2, #48	; 0x30
 800a816:	2a09      	cmp	r2, #9
 800a818:	d903      	bls.n	800a822 <_svfiprintf_r+0x1a6>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0c6      	beq.n	800a7ac <_svfiprintf_r+0x130>
 800a81e:	9105      	str	r1, [sp, #20]
 800a820:	e7c4      	b.n	800a7ac <_svfiprintf_r+0x130>
 800a822:	fb0c 2101 	mla	r1, ip, r1, r2
 800a826:	4604      	mov	r4, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f0      	b.n	800a80e <_svfiprintf_r+0x192>
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b0f      	ldr	r3, [pc, #60]	; (800a870 <_svfiprintf_r+0x1f4>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4638      	mov	r0, r7
 800a838:	f3af 8000 	nop.w
 800a83c:	1c42      	adds	r2, r0, #1
 800a83e:	4606      	mov	r6, r0
 800a840:	d1d6      	bne.n	800a7f0 <_svfiprintf_r+0x174>
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	065b      	lsls	r3, r3, #25
 800a846:	f53f af2d 	bmi.w	800a6a4 <_svfiprintf_r+0x28>
 800a84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a84c:	b01d      	add	sp, #116	; 0x74
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	ab03      	add	r3, sp, #12
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	462a      	mov	r2, r5
 800a858:	4b05      	ldr	r3, [pc, #20]	; (800a870 <_svfiprintf_r+0x1f4>)
 800a85a:	a904      	add	r1, sp, #16
 800a85c:	4638      	mov	r0, r7
 800a85e:	f000 f879 	bl	800a954 <_printf_i>
 800a862:	e7eb      	b.n	800a83c <_svfiprintf_r+0x1c0>
 800a864:	0800b3d1 	.word	0x0800b3d1
 800a868:	0800b3db 	.word	0x0800b3db
 800a86c:	00000000 	.word	0x00000000
 800a870:	0800a5c9 	.word	0x0800a5c9
 800a874:	0800b3d7 	.word	0x0800b3d7

0800a878 <_printf_common>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	4616      	mov	r6, r2
 800a87e:	4699      	mov	r9, r3
 800a880:	688a      	ldr	r2, [r1, #8]
 800a882:	690b      	ldr	r3, [r1, #16]
 800a884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a888:	4293      	cmp	r3, r2
 800a88a:	bfb8      	it	lt
 800a88c:	4613      	movlt	r3, r2
 800a88e:	6033      	str	r3, [r6, #0]
 800a890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a894:	4607      	mov	r7, r0
 800a896:	460c      	mov	r4, r1
 800a898:	b10a      	cbz	r2, 800a89e <_printf_common+0x26>
 800a89a:	3301      	adds	r3, #1
 800a89c:	6033      	str	r3, [r6, #0]
 800a89e:	6823      	ldr	r3, [r4, #0]
 800a8a0:	0699      	lsls	r1, r3, #26
 800a8a2:	bf42      	ittt	mi
 800a8a4:	6833      	ldrmi	r3, [r6, #0]
 800a8a6:	3302      	addmi	r3, #2
 800a8a8:	6033      	strmi	r3, [r6, #0]
 800a8aa:	6825      	ldr	r5, [r4, #0]
 800a8ac:	f015 0506 	ands.w	r5, r5, #6
 800a8b0:	d106      	bne.n	800a8c0 <_printf_common+0x48>
 800a8b2:	f104 0a19 	add.w	sl, r4, #25
 800a8b6:	68e3      	ldr	r3, [r4, #12]
 800a8b8:	6832      	ldr	r2, [r6, #0]
 800a8ba:	1a9b      	subs	r3, r3, r2
 800a8bc:	42ab      	cmp	r3, r5
 800a8be:	dc26      	bgt.n	800a90e <_printf_common+0x96>
 800a8c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a8c4:	1e13      	subs	r3, r2, #0
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	bf18      	it	ne
 800a8ca:	2301      	movne	r3, #1
 800a8cc:	0692      	lsls	r2, r2, #26
 800a8ce:	d42b      	bmi.n	800a928 <_printf_common+0xb0>
 800a8d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4638      	mov	r0, r7
 800a8d8:	47c0      	blx	r8
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d01e      	beq.n	800a91c <_printf_common+0xa4>
 800a8de:	6823      	ldr	r3, [r4, #0]
 800a8e0:	6922      	ldr	r2, [r4, #16]
 800a8e2:	f003 0306 	and.w	r3, r3, #6
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	bf02      	ittt	eq
 800a8ea:	68e5      	ldreq	r5, [r4, #12]
 800a8ec:	6833      	ldreq	r3, [r6, #0]
 800a8ee:	1aed      	subeq	r5, r5, r3
 800a8f0:	68a3      	ldr	r3, [r4, #8]
 800a8f2:	bf0c      	ite	eq
 800a8f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8f8:	2500      	movne	r5, #0
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	bfc4      	itt	gt
 800a8fe:	1a9b      	subgt	r3, r3, r2
 800a900:	18ed      	addgt	r5, r5, r3
 800a902:	2600      	movs	r6, #0
 800a904:	341a      	adds	r4, #26
 800a906:	42b5      	cmp	r5, r6
 800a908:	d11a      	bne.n	800a940 <_printf_common+0xc8>
 800a90a:	2000      	movs	r0, #0
 800a90c:	e008      	b.n	800a920 <_printf_common+0xa8>
 800a90e:	2301      	movs	r3, #1
 800a910:	4652      	mov	r2, sl
 800a912:	4649      	mov	r1, r9
 800a914:	4638      	mov	r0, r7
 800a916:	47c0      	blx	r8
 800a918:	3001      	adds	r0, #1
 800a91a:	d103      	bne.n	800a924 <_printf_common+0xac>
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a924:	3501      	adds	r5, #1
 800a926:	e7c6      	b.n	800a8b6 <_printf_common+0x3e>
 800a928:	18e1      	adds	r1, r4, r3
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	2030      	movs	r0, #48	; 0x30
 800a92e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a932:	4422      	add	r2, r4
 800a934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a93c:	3302      	adds	r3, #2
 800a93e:	e7c7      	b.n	800a8d0 <_printf_common+0x58>
 800a940:	2301      	movs	r3, #1
 800a942:	4622      	mov	r2, r4
 800a944:	4649      	mov	r1, r9
 800a946:	4638      	mov	r0, r7
 800a948:	47c0      	blx	r8
 800a94a:	3001      	adds	r0, #1
 800a94c:	d0e6      	beq.n	800a91c <_printf_common+0xa4>
 800a94e:	3601      	adds	r6, #1
 800a950:	e7d9      	b.n	800a906 <_printf_common+0x8e>
	...

0800a954 <_printf_i>:
 800a954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a958:	7e0f      	ldrb	r7, [r1, #24]
 800a95a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a95c:	2f78      	cmp	r7, #120	; 0x78
 800a95e:	4691      	mov	r9, r2
 800a960:	4680      	mov	r8, r0
 800a962:	460c      	mov	r4, r1
 800a964:	469a      	mov	sl, r3
 800a966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a96a:	d807      	bhi.n	800a97c <_printf_i+0x28>
 800a96c:	2f62      	cmp	r7, #98	; 0x62
 800a96e:	d80a      	bhi.n	800a986 <_printf_i+0x32>
 800a970:	2f00      	cmp	r7, #0
 800a972:	f000 80d4 	beq.w	800ab1e <_printf_i+0x1ca>
 800a976:	2f58      	cmp	r7, #88	; 0x58
 800a978:	f000 80c0 	beq.w	800aafc <_printf_i+0x1a8>
 800a97c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a984:	e03a      	b.n	800a9fc <_printf_i+0xa8>
 800a986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a98a:	2b15      	cmp	r3, #21
 800a98c:	d8f6      	bhi.n	800a97c <_printf_i+0x28>
 800a98e:	a101      	add	r1, pc, #4	; (adr r1, 800a994 <_printf_i+0x40>)
 800a990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a994:	0800a9ed 	.word	0x0800a9ed
 800a998:	0800aa01 	.word	0x0800aa01
 800a99c:	0800a97d 	.word	0x0800a97d
 800a9a0:	0800a97d 	.word	0x0800a97d
 800a9a4:	0800a97d 	.word	0x0800a97d
 800a9a8:	0800a97d 	.word	0x0800a97d
 800a9ac:	0800aa01 	.word	0x0800aa01
 800a9b0:	0800a97d 	.word	0x0800a97d
 800a9b4:	0800a97d 	.word	0x0800a97d
 800a9b8:	0800a97d 	.word	0x0800a97d
 800a9bc:	0800a97d 	.word	0x0800a97d
 800a9c0:	0800ab05 	.word	0x0800ab05
 800a9c4:	0800aa2d 	.word	0x0800aa2d
 800a9c8:	0800aabf 	.word	0x0800aabf
 800a9cc:	0800a97d 	.word	0x0800a97d
 800a9d0:	0800a97d 	.word	0x0800a97d
 800a9d4:	0800ab27 	.word	0x0800ab27
 800a9d8:	0800a97d 	.word	0x0800a97d
 800a9dc:	0800aa2d 	.word	0x0800aa2d
 800a9e0:	0800a97d 	.word	0x0800a97d
 800a9e4:	0800a97d 	.word	0x0800a97d
 800a9e8:	0800aac7 	.word	0x0800aac7
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	1d1a      	adds	r2, r3, #4
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	602a      	str	r2, [r5, #0]
 800a9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e09f      	b.n	800ab40 <_printf_i+0x1ec>
 800aa00:	6820      	ldr	r0, [r4, #0]
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	0607      	lsls	r7, r0, #24
 800aa06:	f103 0104 	add.w	r1, r3, #4
 800aa0a:	6029      	str	r1, [r5, #0]
 800aa0c:	d501      	bpl.n	800aa12 <_printf_i+0xbe>
 800aa0e:	681e      	ldr	r6, [r3, #0]
 800aa10:	e003      	b.n	800aa1a <_printf_i+0xc6>
 800aa12:	0646      	lsls	r6, r0, #25
 800aa14:	d5fb      	bpl.n	800aa0e <_printf_i+0xba>
 800aa16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa1a:	2e00      	cmp	r6, #0
 800aa1c:	da03      	bge.n	800aa26 <_printf_i+0xd2>
 800aa1e:	232d      	movs	r3, #45	; 0x2d
 800aa20:	4276      	negs	r6, r6
 800aa22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa26:	485a      	ldr	r0, [pc, #360]	; (800ab90 <_printf_i+0x23c>)
 800aa28:	230a      	movs	r3, #10
 800aa2a:	e012      	b.n	800aa52 <_printf_i+0xfe>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	6820      	ldr	r0, [r4, #0]
 800aa30:	1d19      	adds	r1, r3, #4
 800aa32:	6029      	str	r1, [r5, #0]
 800aa34:	0605      	lsls	r5, r0, #24
 800aa36:	d501      	bpl.n	800aa3c <_printf_i+0xe8>
 800aa38:	681e      	ldr	r6, [r3, #0]
 800aa3a:	e002      	b.n	800aa42 <_printf_i+0xee>
 800aa3c:	0641      	lsls	r1, r0, #25
 800aa3e:	d5fb      	bpl.n	800aa38 <_printf_i+0xe4>
 800aa40:	881e      	ldrh	r6, [r3, #0]
 800aa42:	4853      	ldr	r0, [pc, #332]	; (800ab90 <_printf_i+0x23c>)
 800aa44:	2f6f      	cmp	r7, #111	; 0x6f
 800aa46:	bf0c      	ite	eq
 800aa48:	2308      	moveq	r3, #8
 800aa4a:	230a      	movne	r3, #10
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa52:	6865      	ldr	r5, [r4, #4]
 800aa54:	60a5      	str	r5, [r4, #8]
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	bfa2      	ittt	ge
 800aa5a:	6821      	ldrge	r1, [r4, #0]
 800aa5c:	f021 0104 	bicge.w	r1, r1, #4
 800aa60:	6021      	strge	r1, [r4, #0]
 800aa62:	b90e      	cbnz	r6, 800aa68 <_printf_i+0x114>
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	d04b      	beq.n	800ab00 <_printf_i+0x1ac>
 800aa68:	4615      	mov	r5, r2
 800aa6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa6e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa72:	5dc7      	ldrb	r7, [r0, r7]
 800aa74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa78:	4637      	mov	r7, r6
 800aa7a:	42bb      	cmp	r3, r7
 800aa7c:	460e      	mov	r6, r1
 800aa7e:	d9f4      	bls.n	800aa6a <_printf_i+0x116>
 800aa80:	2b08      	cmp	r3, #8
 800aa82:	d10b      	bne.n	800aa9c <_printf_i+0x148>
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	07de      	lsls	r6, r3, #31
 800aa88:	d508      	bpl.n	800aa9c <_printf_i+0x148>
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	6861      	ldr	r1, [r4, #4]
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	bfde      	ittt	le
 800aa92:	2330      	movle	r3, #48	; 0x30
 800aa94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa9c:	1b52      	subs	r2, r2, r5
 800aa9e:	6122      	str	r2, [r4, #16]
 800aaa0:	f8cd a000 	str.w	sl, [sp]
 800aaa4:	464b      	mov	r3, r9
 800aaa6:	aa03      	add	r2, sp, #12
 800aaa8:	4621      	mov	r1, r4
 800aaaa:	4640      	mov	r0, r8
 800aaac:	f7ff fee4 	bl	800a878 <_printf_common>
 800aab0:	3001      	adds	r0, #1
 800aab2:	d14a      	bne.n	800ab4a <_printf_i+0x1f6>
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aab8:	b004      	add	sp, #16
 800aaba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	f043 0320 	orr.w	r3, r3, #32
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	4833      	ldr	r0, [pc, #204]	; (800ab94 <_printf_i+0x240>)
 800aac8:	2778      	movs	r7, #120	; 0x78
 800aaca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	6829      	ldr	r1, [r5, #0]
 800aad2:	061f      	lsls	r7, r3, #24
 800aad4:	f851 6b04 	ldr.w	r6, [r1], #4
 800aad8:	d402      	bmi.n	800aae0 <_printf_i+0x18c>
 800aada:	065f      	lsls	r7, r3, #25
 800aadc:	bf48      	it	mi
 800aade:	b2b6      	uxthmi	r6, r6
 800aae0:	07df      	lsls	r7, r3, #31
 800aae2:	bf48      	it	mi
 800aae4:	f043 0320 	orrmi.w	r3, r3, #32
 800aae8:	6029      	str	r1, [r5, #0]
 800aaea:	bf48      	it	mi
 800aaec:	6023      	strmi	r3, [r4, #0]
 800aaee:	b91e      	cbnz	r6, 800aaf8 <_printf_i+0x1a4>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	f023 0320 	bic.w	r3, r3, #32
 800aaf6:	6023      	str	r3, [r4, #0]
 800aaf8:	2310      	movs	r3, #16
 800aafa:	e7a7      	b.n	800aa4c <_printf_i+0xf8>
 800aafc:	4824      	ldr	r0, [pc, #144]	; (800ab90 <_printf_i+0x23c>)
 800aafe:	e7e4      	b.n	800aaca <_printf_i+0x176>
 800ab00:	4615      	mov	r5, r2
 800ab02:	e7bd      	b.n	800aa80 <_printf_i+0x12c>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	6826      	ldr	r6, [r4, #0]
 800ab08:	6961      	ldr	r1, [r4, #20]
 800ab0a:	1d18      	adds	r0, r3, #4
 800ab0c:	6028      	str	r0, [r5, #0]
 800ab0e:	0635      	lsls	r5, r6, #24
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	d501      	bpl.n	800ab18 <_printf_i+0x1c4>
 800ab14:	6019      	str	r1, [r3, #0]
 800ab16:	e002      	b.n	800ab1e <_printf_i+0x1ca>
 800ab18:	0670      	lsls	r0, r6, #25
 800ab1a:	d5fb      	bpl.n	800ab14 <_printf_i+0x1c0>
 800ab1c:	8019      	strh	r1, [r3, #0]
 800ab1e:	2300      	movs	r3, #0
 800ab20:	6123      	str	r3, [r4, #16]
 800ab22:	4615      	mov	r5, r2
 800ab24:	e7bc      	b.n	800aaa0 <_printf_i+0x14c>
 800ab26:	682b      	ldr	r3, [r5, #0]
 800ab28:	1d1a      	adds	r2, r3, #4
 800ab2a:	602a      	str	r2, [r5, #0]
 800ab2c:	681d      	ldr	r5, [r3, #0]
 800ab2e:	6862      	ldr	r2, [r4, #4]
 800ab30:	2100      	movs	r1, #0
 800ab32:	4628      	mov	r0, r5
 800ab34:	f7f5 fb54 	bl	80001e0 <memchr>
 800ab38:	b108      	cbz	r0, 800ab3e <_printf_i+0x1ea>
 800ab3a:	1b40      	subs	r0, r0, r5
 800ab3c:	6060      	str	r0, [r4, #4]
 800ab3e:	6863      	ldr	r3, [r4, #4]
 800ab40:	6123      	str	r3, [r4, #16]
 800ab42:	2300      	movs	r3, #0
 800ab44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab48:	e7aa      	b.n	800aaa0 <_printf_i+0x14c>
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	462a      	mov	r2, r5
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4640      	mov	r0, r8
 800ab52:	47d0      	blx	sl
 800ab54:	3001      	adds	r0, #1
 800ab56:	d0ad      	beq.n	800aab4 <_printf_i+0x160>
 800ab58:	6823      	ldr	r3, [r4, #0]
 800ab5a:	079b      	lsls	r3, r3, #30
 800ab5c:	d413      	bmi.n	800ab86 <_printf_i+0x232>
 800ab5e:	68e0      	ldr	r0, [r4, #12]
 800ab60:	9b03      	ldr	r3, [sp, #12]
 800ab62:	4298      	cmp	r0, r3
 800ab64:	bfb8      	it	lt
 800ab66:	4618      	movlt	r0, r3
 800ab68:	e7a6      	b.n	800aab8 <_printf_i+0x164>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	4649      	mov	r1, r9
 800ab70:	4640      	mov	r0, r8
 800ab72:	47d0      	blx	sl
 800ab74:	3001      	adds	r0, #1
 800ab76:	d09d      	beq.n	800aab4 <_printf_i+0x160>
 800ab78:	3501      	adds	r5, #1
 800ab7a:	68e3      	ldr	r3, [r4, #12]
 800ab7c:	9903      	ldr	r1, [sp, #12]
 800ab7e:	1a5b      	subs	r3, r3, r1
 800ab80:	42ab      	cmp	r3, r5
 800ab82:	dcf2      	bgt.n	800ab6a <_printf_i+0x216>
 800ab84:	e7eb      	b.n	800ab5e <_printf_i+0x20a>
 800ab86:	2500      	movs	r5, #0
 800ab88:	f104 0619 	add.w	r6, r4, #25
 800ab8c:	e7f5      	b.n	800ab7a <_printf_i+0x226>
 800ab8e:	bf00      	nop
 800ab90:	0800b3e2 	.word	0x0800b3e2
 800ab94:	0800b3f3 	.word	0x0800b3f3

0800ab98 <_realloc_r>:
 800ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	4614      	mov	r4, r2
 800aba0:	460e      	mov	r6, r1
 800aba2:	b921      	cbnz	r1, 800abae <_realloc_r+0x16>
 800aba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	4611      	mov	r1, r2
 800abaa:	f7ff bbd1 	b.w	800a350 <_malloc_r>
 800abae:	b92a      	cbnz	r2, 800abbc <_realloc_r+0x24>
 800abb0:	f7ff fcbe 	bl	800a530 <_free_r>
 800abb4:	4625      	mov	r5, r4
 800abb6:	4628      	mov	r0, r5
 800abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbc:	f000 f843 	bl	800ac46 <_malloc_usable_size_r>
 800abc0:	4284      	cmp	r4, r0
 800abc2:	4607      	mov	r7, r0
 800abc4:	d802      	bhi.n	800abcc <_realloc_r+0x34>
 800abc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800abca:	d812      	bhi.n	800abf2 <_realloc_r+0x5a>
 800abcc:	4621      	mov	r1, r4
 800abce:	4640      	mov	r0, r8
 800abd0:	f7ff fbbe 	bl	800a350 <_malloc_r>
 800abd4:	4605      	mov	r5, r0
 800abd6:	2800      	cmp	r0, #0
 800abd8:	d0ed      	beq.n	800abb6 <_realloc_r+0x1e>
 800abda:	42bc      	cmp	r4, r7
 800abdc:	4622      	mov	r2, r4
 800abde:	4631      	mov	r1, r6
 800abe0:	bf28      	it	cs
 800abe2:	463a      	movcs	r2, r7
 800abe4:	f000 f821 	bl	800ac2a <memcpy>
 800abe8:	4631      	mov	r1, r6
 800abea:	4640      	mov	r0, r8
 800abec:	f7ff fca0 	bl	800a530 <_free_r>
 800abf0:	e7e1      	b.n	800abb6 <_realloc_r+0x1e>
 800abf2:	4635      	mov	r5, r6
 800abf4:	e7df      	b.n	800abb6 <_realloc_r+0x1e>

0800abf6 <memmove>:
 800abf6:	4288      	cmp	r0, r1
 800abf8:	b510      	push	{r4, lr}
 800abfa:	eb01 0402 	add.w	r4, r1, r2
 800abfe:	d902      	bls.n	800ac06 <memmove+0x10>
 800ac00:	4284      	cmp	r4, r0
 800ac02:	4623      	mov	r3, r4
 800ac04:	d807      	bhi.n	800ac16 <memmove+0x20>
 800ac06:	1e43      	subs	r3, r0, #1
 800ac08:	42a1      	cmp	r1, r4
 800ac0a:	d008      	beq.n	800ac1e <memmove+0x28>
 800ac0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac10:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac14:	e7f8      	b.n	800ac08 <memmove+0x12>
 800ac16:	4402      	add	r2, r0
 800ac18:	4601      	mov	r1, r0
 800ac1a:	428a      	cmp	r2, r1
 800ac1c:	d100      	bne.n	800ac20 <memmove+0x2a>
 800ac1e:	bd10      	pop	{r4, pc}
 800ac20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac24:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac28:	e7f7      	b.n	800ac1a <memmove+0x24>

0800ac2a <memcpy>:
 800ac2a:	440a      	add	r2, r1
 800ac2c:	4291      	cmp	r1, r2
 800ac2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac32:	d100      	bne.n	800ac36 <memcpy+0xc>
 800ac34:	4770      	bx	lr
 800ac36:	b510      	push	{r4, lr}
 800ac38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac40:	4291      	cmp	r1, r2
 800ac42:	d1f9      	bne.n	800ac38 <memcpy+0xe>
 800ac44:	bd10      	pop	{r4, pc}

0800ac46 <_malloc_usable_size_r>:
 800ac46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac4a:	1f18      	subs	r0, r3, #4
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	bfbc      	itt	lt
 800ac50:	580b      	ldrlt	r3, [r1, r0]
 800ac52:	18c0      	addlt	r0, r0, r3
 800ac54:	4770      	bx	lr
	...

0800ac58 <_init>:
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	bf00      	nop
 800ac5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5e:	bc08      	pop	{r3}
 800ac60:	469e      	mov	lr, r3
 800ac62:	4770      	bx	lr

0800ac64 <_fini>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	bf00      	nop
 800ac68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6a:	bc08      	pop	{r3}
 800ac6c:	469e      	mov	lr, r3
 800ac6e:	4770      	bx	lr
